// <auto-generated />
using System;
using ADMS.API.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ADMS.API.DbContexts.Migrations
{
    [DbContext(typeof(AdmsContext))]
    partial class AdmsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ADMS.API.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MatterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatterId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ADMS.API.Entities.DocumentActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DocumentActivities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            Activity = "CHECKED IN"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            Activity = "CHECKED OUT"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000003"),
                            Activity = "CREATED"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000004"),
                            Activity = "DELETED"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000005"),
                            Activity = "RESTORED"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000006"),
                            Activity = "SAVED"
                        });
                });

            modelBuilder.Entity("ADMS.API.Entities.DocumentActivityUser", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentId", "DocumentActivityId", "UserId", "CreatedAt");

                    b.HasIndex("DocumentActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentActivityUsers");
                });

            modelBuilder.Entity("ADMS.API.Entities.Matter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Matters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000001"),
                            CreationDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Test Matter #1",
                            IsArchived = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000002"),
                            CreationDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Test Matter #2",
                            IsArchived = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000003"),
                            CreationDate = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Test Matter #3",
                            IsArchived = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000004"),
                            CreationDate = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Test Matter #4",
                            IsArchived = false,
                            IsDeleted = true
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000005"),
                            CreationDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Test Matter #5",
                            IsArchived = true,
                            IsDeleted = true
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000006"),
                            CreationDate = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Test Matter #6",
                            IsArchived = true,
                            IsDeleted = true
                        });
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MatterActivities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            Activity = "ARCHIVED"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000002"),
                            Activity = "CREATED"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000003"),
                            Activity = "DELETED"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000004"),
                            Activity = "RESTORED"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000005"),
                            Activity = "UNARCHIVED"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000006"),
                            Activity = "VIEWED"
                        });
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterActivityUser", b =>
                {
                    b.Property<Guid>("MatterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatterActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MatterId", "MatterActivityId", "UserId", "CreatedAt");

                    b.HasIndex("MatterActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("MatterActivityUsers");

                    b.HasData(
                        new
                        {
                            MatterId = new Guid("60000000-0000-0000-0000-000000000001"),
                            MatterActivityId = new Guid("30000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("50000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 10, 0, 1, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            MatterId = new Guid("60000000-0000-0000-0000-000000000002"),
                            MatterActivityId = new Guid("30000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("50000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 10, 0, 2, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            MatterId = new Guid("60000000-0000-0000-0000-000000000003"),
                            MatterActivityId = new Guid("30000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("50000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 10, 0, 3, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            MatterId = new Guid("60000000-0000-0000-0000-000000000004"),
                            MatterActivityId = new Guid("30000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("50000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 10, 0, 4, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            MatterId = new Guid("60000000-0000-0000-0000-000000000005"),
                            MatterActivityId = new Guid("30000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("50000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 10, 0, 5, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            MatterId = new Guid("60000000-0000-0000-0000-000000000006"),
                            MatterActivityId = new Guid("30000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("50000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 10, 0, 6, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            MatterId = new Guid("60000000-0000-0000-0000-000000000003"),
                            MatterActivityId = new Guid("30000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("50000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 10, 0, 7, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            MatterId = new Guid("60000000-0000-0000-0000-000000000005"),
                            MatterActivityId = new Guid("30000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("50000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 10, 0, 8, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            MatterId = new Guid("60000000-0000-0000-0000-000000000006"),
                            MatterActivityId = new Guid("30000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("50000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 10, 0, 9, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            MatterId = new Guid("60000000-0000-0000-0000-000000000004"),
                            MatterActivityId = new Guid("30000000-0000-0000-0000-000000000003"),
                            UserId = new Guid("50000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 10, 0, 10, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            MatterId = new Guid("60000000-0000-0000-0000-000000000005"),
                            MatterActivityId = new Guid("30000000-0000-0000-0000-000000000003"),
                            UserId = new Guid("50000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 10, 0, 11, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            MatterId = new Guid("60000000-0000-0000-0000-000000000006"),
                            MatterActivityId = new Guid("30000000-0000-0000-0000-000000000003"),
                            UserId = new Guid("50000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 10, 0, 12, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterDocumentActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MatterDocumentActivities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000001"),
                            Activity = "COPIED"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000002"),
                            Activity = "MOVED"
                        });
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterDocumentActivityUserFrom", b =>
                {
                    b.Property<Guid>("MatterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatterDocumentActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MatterId", "DocumentId", "MatterDocumentActivityId", "UserId", "CreatedAt");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MatterDocumentActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("MatterDocumentActivityUsersFrom");
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterDocumentActivityUserTo", b =>
                {
                    b.Property<Guid>("MatterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatterDocumentActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MatterId", "DocumentId", "MatterDocumentActivityId", "UserId", "CreatedAt");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MatterDocumentActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("MatterDocumentActivityUsersTo");
                });

            modelBuilder.Entity("ADMS.API.Entities.Revision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Revisions");
                });

            modelBuilder.Entity("ADMS.API.Entities.RevisionActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RevisionActivities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            Activity = "CREATED"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            Activity = "DELETED"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            Activity = "RESTORED"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            Activity = "SAVED"
                        });
                });

            modelBuilder.Entity("ADMS.API.Entities.RevisionActivityUser", b =>
                {
                    b.Property<Guid>("RevisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RevisionActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RevisionId", "RevisionActivityId", "UserId", "CreatedAt");

                    b.HasIndex("RevisionActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("RevisionActivityUsers");
                });

            modelBuilder.Entity("ADMS.API.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000001"),
                            Name = "rbrown"
                        });
                });

            modelBuilder.Entity("ADMS.API.Entities.Document", b =>
                {
                    b.HasOne("ADMS.API.Entities.Matter", "Matter")
                        .WithMany("Documents")
                        .HasForeignKey("MatterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matter");
                });

            modelBuilder.Entity("ADMS.API.Entities.DocumentActivityUser", b =>
                {
                    b.HasOne("ADMS.API.Entities.DocumentActivity", "DocumentActivity")
                        .WithMany("DocumentActivityUsers")
                        .HasForeignKey("DocumentActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.Document", "Document")
                        .WithMany("DocumentActivityUsers")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.User", "User")
                        .WithMany("DocumentActivityUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("DocumentActivity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterActivityUser", b =>
                {
                    b.HasOne("ADMS.API.Entities.MatterActivity", "MatterActivity")
                        .WithMany("MatterActivityUsers")
                        .HasForeignKey("MatterActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.Matter", "Matter")
                        .WithMany("MatterActivityUsers")
                        .HasForeignKey("MatterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.User", "User")
                        .WithMany("MatterActivityUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matter");

                    b.Navigation("MatterActivity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterDocumentActivityUserFrom", b =>
                {
                    b.HasOne("ADMS.API.Entities.Document", "Document")
                        .WithMany("MatterDocumentActivityUsersFrom")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.MatterDocumentActivity", "MatterDocumentActivity")
                        .WithMany("MatterDocumentActivityUsersFrom")
                        .HasForeignKey("MatterDocumentActivityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.Matter", "Matter")
                        .WithMany("MatterDocumentActivityUsersFrom")
                        .HasForeignKey("MatterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.User", "User")
                        .WithMany("MatterDocumentActivityUsersFrom")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Matter");

                    b.Navigation("MatterDocumentActivity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterDocumentActivityUserTo", b =>
                {
                    b.HasOne("ADMS.API.Entities.Document", "Document")
                        .WithMany("MatterDocumentActivityUsersTo")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.MatterDocumentActivity", "MatterDocumentActivity")
                        .WithMany("MatterDocumentActivityUsersTo")
                        .HasForeignKey("MatterDocumentActivityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.Matter", "Matter")
                        .WithMany("MatterDocumentActivityUsersTo")
                        .HasForeignKey("MatterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.User", "User")
                        .WithMany("MatterDocumentActivityUsersTo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Matter");

                    b.Navigation("MatterDocumentActivity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADMS.API.Entities.Revision", b =>
                {
                    b.HasOne("ADMS.API.Entities.Document", "Document")
                        .WithMany("Revisions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ADMS.API.Entities.RevisionActivityUser", b =>
                {
                    b.HasOne("ADMS.API.Entities.RevisionActivity", "RevisionActivity")
                        .WithMany("RevisionActivityUsers")
                        .HasForeignKey("RevisionActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.Revision", "Revision")
                        .WithMany("RevisionActivityUsers")
                        .HasForeignKey("RevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.User", "User")
                        .WithMany("RevisionActivityUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Revision");

                    b.Navigation("RevisionActivity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADMS.API.Entities.Document", b =>
                {
                    b.Navigation("DocumentActivityUsers");

                    b.Navigation("MatterDocumentActivityUsersFrom");

                    b.Navigation("MatterDocumentActivityUsersTo");

                    b.Navigation("Revisions");
                });

            modelBuilder.Entity("ADMS.API.Entities.DocumentActivity", b =>
                {
                    b.Navigation("DocumentActivityUsers");
                });

            modelBuilder.Entity("ADMS.API.Entities.Matter", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("MatterActivityUsers");

                    b.Navigation("MatterDocumentActivityUsersFrom");

                    b.Navigation("MatterDocumentActivityUsersTo");
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterActivity", b =>
                {
                    b.Navigation("MatterActivityUsers");
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterDocumentActivity", b =>
                {
                    b.Navigation("MatterDocumentActivityUsersFrom");

                    b.Navigation("MatterDocumentActivityUsersTo");
                });

            modelBuilder.Entity("ADMS.API.Entities.Revision", b =>
                {
                    b.Navigation("RevisionActivityUsers");
                });

            modelBuilder.Entity("ADMS.API.Entities.RevisionActivity", b =>
                {
                    b.Navigation("RevisionActivityUsers");
                });

            modelBuilder.Entity("ADMS.API.Entities.User", b =>
                {
                    b.Navigation("DocumentActivityUsers");

                    b.Navigation("MatterActivityUsers");

                    b.Navigation("MatterDocumentActivityUsersFrom");

                    b.Navigation("MatterDocumentActivityUsersTo");

                    b.Navigation("RevisionActivityUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
