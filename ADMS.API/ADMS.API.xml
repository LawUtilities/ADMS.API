<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ADMS.API</name>
    </assembly>
    <members>
        <member name="T:ADMS.API.Controllers.DocumentAuditController">
            <summary>
            Document Audit actions
            </summary>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentAuditController.#ctor(Microsoft.Extensions.Logging.ILogger{ADMS.API.Controllers.DocumentAuditController},ADMS.API.Services.IAdmsRepository,AutoMapper.IMapper,Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory)">
            <summary>
            Document Audit actions
            </summary>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentAuditController.CreateDocumentAudit(System.Guid,System.Guid,ADMS.API.Models.DocumentActivityUserDto)">
            <summary>
            Creates Audit record for Document
            </summary>
            <param name="matterId">matter document belongs to</param>
            <param name="documentId">document to create audit record for</param>
            <param name="audit">audit record to create</param>
            <returns>DocumentActivityUser record</returns>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentAuditController.GetDocumentAudits(System.Guid,System.Guid)">
            <summary>
            Get Audits for specified document
            </summary>
            <param name="matterId">matter document belongs to</param>
            <param name="documentId">document to get audit records for</param>
            <returns>DocumentActivityUser record</returns>
        </member>
        <member name="T:ADMS.API.Controllers.DocumentController">
            <summary>
            Document actions
            </summary>
            <remarks>
            Document Controller constructor
            </remarks>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentController.#ctor(Microsoft.Extensions.Logging.ILogger{ADMS.API.Controllers.DocumentController},ADMS.API.Services.IAdmsRepository,AutoMapper.IMapper,ADMS.API.Services.IPropertyMappingService,ADMS.API.Services.IPropertyCheckerService,Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory)">
            <summary>
            Document actions
            </summary>
            <remarks>
            Document Controller constructor
            </remarks>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentController.CreateDocument(System.Guid,ADMS.API.Models.DocumentForCreationDto)">
            <summary>
            Create new document
            </summary>
            <param name="matterId">Matter Id to retrieve</param>
            <param name="document">document to create</param>
            <returns>Document</returns>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentController.GetMDAUFromHistoryAsync(System.Guid,System.Guid)">
            <summary>
            Retrieve matter document activity user from list
            </summary>
            <param name="matterId">Matter Id to retrieve</param>
            <param name="documentId">Document Id to retrieve</param>
            <returns>List of matter document activity users</returns>
            <response code="200">Returns the requested matter</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentController.GetMDAUToHistoryAsync(System.Guid,System.Guid)">
            <summary>
            Retrieve matter document activity user to list
            </summary>
            <param name="matterId">Matter Id to retrieve</param>
            <param name="documentId">Document Id to retrieve</param>
            <returns>List of matter document activity users</returns>
            <response code="200">Returns the requested matter</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentController.CopyDocument(System.Guid,ADMS.API.Models.DocumentWithoutRevisionsDto)">
            <summary>
            Copies a document from one matter to another
            </summary>
            <param name="matterId">Matter to copy document to</param>
            <param name="document">Document to be copied</param>
            <returns>True if document copied, false otherwise</returns>
            <response code="200">Returns the created document</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter or document not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentController.MoveDocument(System.Guid,ADMS.API.Models.DocumentWithoutRevisionsDto)">
            <summary>
            Moves a document from one matter to another
            </summary>
            <param name="matterId">Matter to move document to</param>
            <param name="document">Document to be moved</param>
            <returns>True if document moved, false otherwise</returns>
            <response code="200">Returns the created document</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter or document not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentController.DeleteDocument(System.Guid,System.Guid)">
            <summary>
            Delete specified document Id
            </summary>
            <param name="matterId">Matter containing document</param>
            <param name="documentId">Document to be deleted</param>
            <returns>IActionResult</returns>
            <response code="204">Returns No Content</response>
            <response code="400">An error occurred</response>
            <response code="404">Document not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentController.CheckoutDocument(System.Guid,System.Guid)">
            <summary>
            Check out document
            </summary>
            <param name="matterId">Matter containing document</param>
            <param name="documentId">Document id to be checked out</param>
            <returns>IActionResult</returns>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentController.CheckinDocument(System.Guid,System.Guid)">
            <summary>
            Check in document
            </summary>
            <param name="matterId">Matter document belongs to</param>
            <param name="documentId">Document id to be checked in</param>
            <returns>IActionResult</returns>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentController.GetDocumentHistoryAsync(System.Guid,System.Guid)">
            <summary>
            Gets specific document history
            </summary>
            <param name="matterId">Matter containing document</param>
            <param name="documentId">Document Id to retrieve</param>
            <returns>Document history</returns>
            <response code="200">Returns the requested document history</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter or document not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentController.GetDocuments(System.Guid,ADMS.API.ResourceParameters.DocumentsResourceParameters)">
            <summary>
            Get document lists
            </summary>
            <param name="matterId">Matter containing document</param>
            <param name="documentsResourceParameters">Document search details</param>
            <returns>List of documents to be returned</returns>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentController.GetDocument(System.Guid,System.Guid,System.String)">
            <summary>
            Get specific document
            </summary>
            <param name="matterId">Matter containing document</param>
            <param name="documentId">Document Id to retrieve</param>
            <param name="fields">Extra fields if necessary</param>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentController.UpdateDocument(System.Guid,System.Guid,ADMS.API.Models.DocumentForUpdateDto)">
            <summary>
            Updates document details
            </summary>
            <param name="matterId">Matter document belongs to</param>
            <param name="documentId">Document id to be updated</param>
            <param name="document">Document details in need of updating</param>
            <returns>IActionResult</returns>
            <response code="204">Returns No Content</response>
            <response code="400">An error occurred</response>
            <response code="404">Document not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.DocumentController.GetDocumentOptions">
            <summary>
            Retrieve document options
            </summary>
            <returns>OK</returns>
        </member>
        <member name="T:ADMS.API.Controllers.FileController">
            <summary>
            File actions
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:ADMS.API.Controllers.FileController"/> class.
            </remarks>
            <param name="logger">The logger to be used by this controller.</param>
            <param name="admsRepository">The repository to use for data access.</param>
        </member>
        <member name="M:ADMS.API.Controllers.FileController.#ctor(Microsoft.Extensions.Logging.ILogger{ADMS.API.Controllers.FileController},ADMS.API.Services.IAdmsRepository)">
            <summary>
            File actions
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:ADMS.API.Controllers.FileController"/> class.
            </remarks>
            <param name="logger">The logger to be used by this controller.</param>
            <param name="admsRepository">The repository to use for data access.</param>
        </member>
        <member name="M:ADMS.API.Controllers.FileController.UploadExistingFileAsync(System.Guid,System.Guid,System.Guid,Microsoft.AspNetCore.Http.IFormFile,System.Threading.CancellationToken)">
            <summary>
            Upload an existing file to the ADMS system
            </summary>
            <param name="matterId">Matter to save the document to</param>
            <param name="documentId">Document to add file to</param>
            <param name="revisionId">Revision to add file as</param>
            <param name="fileUpload">file to be uploaded</param>
            <param name="cancelToken">cancellation token</param>
            <returns>IActionResult</returns>
            <response code="200">Document uploaded</response>
            <response code="400">An error occurred</response>
            <response code="404">Document not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.FileController.DownloadFile(System.Guid,System.Guid,System.Guid)">
            <summary>
            Download the specified file from the ADMS system
            </summary>
            <param name="matterId">The ID of the matter</param>
            <param name="documentId">The ID of the document</param>
            <param name="revisionId">The ID of the revision</param>
            <returns>IActionResult</returns>
            <response code="200">Document downloaded</response>
            <response code="400">An error occurred</response>
            <response code="404">Document not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.FileController.DownloadPDF(System.Guid,System.Guid,System.Guid)">
            <summary>
            Download the specified PDF file from the ADMS system
            </summary>
            <param name="matterId">The ID of the matter</param>
            <param name="documentId">The ID of the document</param>
            <param name="revisionId">The ID of the revision</param>
            <returns>IActionResult</returns>
            <response code="200">PDF Downloaded</response>
            <response code="400">An error occurred</response>
            <response code="404">PDF not created</response>
        </member>
        <member name="M:ADMS.API.Controllers.FileController.VerifyFileType(System.Guid,System.Guid,System.Guid,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Verifies if the file to be uploaded matches the type identified
            </summary>
            <param name="matterId">The ID of the matter</param>
            <param name="documentId">The ID of the document</param>
            <param name="revisionId">The ID of the revision</param>
            <param name="fileUpload">File to be verified</param>
            <returns>IActionResult</returns>
            <response code="200">File type verified</response>
            <response code="400">An error occurred</response>
            <response code="404">Document not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.FileController.CheckExistsAsync(System.Guid,System.Guid,System.Guid)">
            <summary>
            Checks to see if Matter, Document and Revision exists
            </summary>
            <param name="matterId">matter to check</param>
            <param name="documentId">document to check</param>
            <param name="revisionId">revision to check</param>
            <returns>bool if all three exist, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Controllers.FileController.ConvertToPDF(System.String,System.String,System.String)">
            <summary>
            Convert an original document to PDF if possible
            </summary>
            <param name="folder">Matter folder containing original file</param>
            <param name="originalFileName">Original file</param>
            <param name="pdfFileName">PDF filename</param>
            <returns>True if converted, false otherwise</returns>
        </member>
        <member name="T:ADMS.API.Controllers.MatterController">
            <summary>
            Matter actions
            </summary>
            <remarks>
            Matter Controller Constructor
            </remarks>
            <param name="logger">logger to be used by this controller</param>
            <param name="admsRepository">repository to use</param>
            <param name="mapper">atomapper to use</param>
        </member>
        <member name="M:ADMS.API.Controllers.MatterController.#ctor(Microsoft.Extensions.Logging.ILogger{ADMS.API.Controllers.MatterController},ADMS.API.Services.IAdmsRepository,AutoMapper.IMapper)">
            <summary>
            Matter actions
            </summary>
            <remarks>
            Matter Controller Constructor
            </remarks>
            <param name="logger">logger to be used by this controller</param>
            <param name="admsRepository">repository to use</param>
            <param name="mapper">atomapper to use</param>
        </member>
        <member name="M:ADMS.API.Controllers.MatterController.CreateMatter(ADMS.API.Models.MatterForCreationDto)">
            <summary>
            Creates a matter
            </summary>
            <param name="matter">Matter to add</param>
            <returns>ActionResult of MatterDto</returns>
            <response code="200">Returns the created matter</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.MatterController.DeleteMatter(System.Guid)">
            <summary>
            Delete specified matter
            </summary>
            <param name="matterId">Matter to be deleted</param>
            <returns>IActionResult</returns>
            <response code="204">Returns No Content</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.MatterController.GetMatterAsync(System.Guid,System.Boolean)">
            <summary>
            Gets specific matter
            </summary>
            <param name="matterId">Matter Id to retrieve</param>
            <param name="includeDocuments">Include documents in returned matter</param>
            <returns>ActionResult of Matter</returns>
            <response code="200">Returns the requested matter</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.MatterController.GetMDAUHistoryAsync(System.Guid,System.String)">
            <summary>
            Retrieve matter document activity user history
            </summary>
            <param name="matterId">Matter Id to retrieve</param>
            <param name="historyType">Type of history to retrieve (from/to)</param>
            <returns>List of matter document activity users</returns>
            <response code="200">Returns the requested matter</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.MatterController.MatterHistoryExists(System.Guid)">
            <summary>
            Check if Matter History Exists
            </summary>
            <param name="matterId">Matter Id to retrieve</param>
            <returns>True if Matter History exists, false otherwise</returns>
            <response code="200">Returns the requested matter</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.MatterController.GetMatterHistoryAsync(System.Guid)">
            <summary>
            Gets specific matter history
            </summary>
            <param name="matterId">Matter to retrieve</param>
            <returns>Matter history</returns>
            <response code="200">Returns the requested matter history</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter or document not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.MatterController.RestoreMatterAsync(System.Guid)">
            <summary>
            Undelete specific matter
            </summary>
            <param name="matterId">Matter Id to restore</param>
            <returns>True if restored, false otherwise</returns>
            <response code="200">Returns the requested matter</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.MatterController.GetMattersAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            gets list of matters
            </summary>
            <param name="description">matter description</param>
            <param name="includeArchived">include archived matters</param>
            <param name="includeDeleted">include deleted matters</param>
            <returns>list of matters not including documents</returns>
            <response code="200">Returns the requested matters</response>
            <response code="400">An error occured</response>
        </member>
        <member name="M:ADMS.API.Controllers.MatterController.UpdateMatter(System.Guid,ADMS.API.Models.MatterForUpdateDto)">
            <summary>
            Updates matter details
            </summary>
            <param name="matterId">Matter Id</param>
            <param name="matter">Matter to be updated</param>
            <returns>IActionResult</returns>
            <response code="204">Returns No Content</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.MatterController.UploadNewFileAsync(System.Guid,Microsoft.AspNetCore.Http.IFormFile,System.Threading.CancellationToken)">
            <summary>
            Upload a new file to the ADMS system
            </summary>
            <param name="matterId">Matter to save the document to</param>
            <param name="fileUpload">File to be uploaded</param>
            <param name="cancelToken">Cancellation token</param>
            <returns>IActionResult</returns>
            <response code="200">Document uploaded</response>
            <response code="400">An error occurred</response>
            <response code="404">Document not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.MatterController.AddCustomDocumentProperties(System.String,System.String,System.Guid,System.Guid,System.Guid,ADMS.API.Controllers.MatterController.DocumentType)">
            <summary>
            Adds custom document properties to various office documents
            </summary>
            <param name="tempFile">Temporary file used to add properties</param>
            <param name="fileName">Final filename to save file to</param>
            <param name="documentId">Document Id to add</param>
            <param name="revisionId">Revision Id to add</param>
            <param name="matterId">Matter Id to add</param>
            <param name="docType">Type of document to add properties to</param>
        </member>
        <member name="M:ADMS.API.Controllers.MatterController.AddOrUpdateDocumentProperty(System.Object,System.String,System.String,ADMS.API.Controllers.MatterController.DocumentType)">
            <summary>
            Add or update individual document property
            </summary>
            <param name="document">Document to add property to</param>
            <param name="propertyName">Specific property to add</param>
            <param name="propertyValue">Specific value to add</param>
            <param name="docType">Type of document to add property to</param>
        </member>
        <member name="M:ADMS.API.Controllers.MatterController.SetDocumentProperty(System.Object,System.String,System.String,ADMS.API.Controllers.MatterController.DocumentType)">
            <summary>
            Sets specific document property
            </summary>
            <param name="document">Document to add property to</param>
            <param name="propertyName">Specific property to add</param>
            <param name="propertyValue">Specific value to add</param>
            <param name="docType">Type of document to add property to</param>
        </member>
        <member name="F:ADMS.API.Controllers.MatterController.wordExtensionsToFormatType">
            <summary>
            Word extension to Syncfusion format
            </summary>
        </member>
        <member name="F:ADMS.API.Controllers.MatterController.excelExtensionsToFormatType">
            <summary>
            Excel extension to Syncfusion format
            </summary>
        </member>
        <member name="T:ADMS.API.Controllers.MatterController.DocumentType">
            <summary>
            Office document types
            </summary>
        </member>
        <member name="T:ADMS.API.Controllers.RevisionController">
            <summary>
            Matter actions
            </summary>
            <remarks>
            Revision Controller Constructor
            </remarks>
            <param name="logger">logger to be used by this controller</param>
            <param name="admsRepository">repository to use</param>
            <param name="mapper">atomapper to use</param>
        </member>
        <member name="M:ADMS.API.Controllers.RevisionController.#ctor(Microsoft.Extensions.Logging.ILogger{ADMS.API.Controllers.RevisionController},ADMS.API.Services.IAdmsRepository,AutoMapper.IMapper)">
            <summary>
            Matter actions
            </summary>
            <remarks>
            Revision Controller Constructor
            </remarks>
            <param name="logger">logger to be used by this controller</param>
            <param name="admsRepository">repository to use</param>
            <param name="mapper">atomapper to use</param>
        </member>
        <member name="M:ADMS.API.Controllers.RevisionController.CreateRevision(System.Guid,System.Guid,ADMS.API.Models.RevisionForCreationDto)">
            <summary>
            Creates a revision
            </summary>
            <param name="matterId">Matter to be added to</param>
            <param name="documentId">Document to add revision to</param>
            <param name="revision">Revision to add</param>
            <returns>ActionResult of RevisionDto</returns>
            <response code="200">Returns the created revision</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter or Document not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.RevisionController.DeleteRevision(System.Guid,System.Guid,System.Guid)">
            <summary>
            Delete specified revision
            </summary>
            <param name="matterId">Matter containing the document in question</param>
            <param name="documentId">Document containing revision to be deleted</param>
            <param name="revisionId">Revision to be deleted</param>
            <returns>IActionResult</returns>
            <response code="204">Deletion undertaken</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter, Document or Revision not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.RevisionController.GetRevisionAsync(System.Guid,System.Guid,System.Guid)">
            <summary>
            Gets specific revision
            </summary>
            <param name="matterId">Matter containing document</param>
            <param name="documentId">Document containing revision</param>
            <param name="revisionId">Revision Id to retrieve</param>
            <returns>Revision to be retrieved</returns>
            <response code="200">Returns the requested revision</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter, document or revision not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.RevisionController.GetRevisionHistoryAsync(System.Guid,System.Guid,System.Guid)">
            <summary>
            Gets specific revision history
            </summary>
            <param name="matterId">Matter containing document</param>
            <param name="documentId">Document containing revision</param>
            <param name="revisionId">Revision Id to retrieve</param>
            <returns>Revision history to be retrieved</returns>
            <response code="200">Returns the requested revision history</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter, document or revision not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.RevisionController.GetRevisionsAsync(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Gets list of revisions
            </summary>
            <param name="matterId">Matter containing document</param>
            <param name="documentId">Document to retrieve revisions for</param>
            <param name="includeDeleted">Include deleted revisions</param>
            <returns>List of revisions</returns>
            <response code="200">Returns the requested revisions</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter or Document not found</response>
        </member>
        <member name="M:ADMS.API.Controllers.RevisionController.UpdateRevision(System.Guid,System.Guid,System.Guid,ADMS.API.Models.RevisionForUpdateDto)">
            <summary>
            Updates revision details
            </summary>
            <param name="matterId">Matter containing document</param>
            <param name="documentId">Document containing revision</param>
            <param name="revisionId">Revision Id</param>
            <param name="revision">Revision to be updated</param>
            <returns>IActionResult</returns>
            <response code="204">Returns No Content</response>
            <response code="400">An error occurred</response>
            <response code="404">Matter, Document or Revision not found</response>
        </member>
        <member name="T:ADMS.API.Helpers.IEnumerableExtensions">
            <summary>
            merable Extension methods
            </summary>
        </member>
        <member name="M:ADMS.API.Helpers.IEnumerableExtensions.ShapeData``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Shape Data method
            </summary>
            <typeparam name="TSource">Source data type</typeparam>
            <param name="source">source value</param>
            <param name="fields">fields</param>
            <returns>IEnumerable ExpandedObject type</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
            <exception cref="T:System.Exception">property name not found</exception>
        </member>
        <member name="T:ADMS.API.Helpers.IQueryableExtensions">
            <summary>
            Iqueryable Extension methods
            </summary>
        </member>
        <member name="M:ADMS.API.Helpers.IQueryableExtensions.ApplySort``1(System.Linq.IQueryable{``0},System.String,System.Collections.Generic.Dictionary{System.String,ADMS.API.Services.PropertyMappingValue})">
            <summary>
            Apply Sort method
            </summary>
            <typeparam name="T">Data Type</typeparam>
            <param name="source">Source</param>
            <param name="orderBy">Order By field</param>
            <param name="mappingDictionary">Mappibnd Dictionary</param>
            <returns>IQueryable of type T</returns>
            <exception cref="T:System.ArgumentException">Property name missing</exception>
            <exception cref="T:System.ArgumentNullException">source, mappibngDictionary or propertyMappingValue null</exception>
        </member>
        <member name="T:ADMS.API.Helpers.ObjectExtensions">
            <summary>
            Object Extension Methods
            </summary>
        </member>
        <member name="M:ADMS.API.Helpers.ObjectExtensions.ShapeData``1(``0,System.String)">
            <summary>
            Shape Data method
            </summary>
            <typeparam name="TSource">Data Source</typeparam>
            <param name="source">source data</param>
            <param name="fields">fields if used</param>
            <returns>ExpandedObject</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:ADMS.API.Helpers.PagedList`1">
            <summary>
            Paged List
            </summary>
            <typeparam name="T">returns list of type T</typeparam>
        </member>
        <member name="P:ADMS.API.Helpers.PagedList`1.CurrentPage">
            <summary>
            Current page being retrieved
            </summary>
        </member>
        <member name="P:ADMS.API.Helpers.PagedList`1.TotalPages">
            <summary>
            Total number of pages
            </summary>
        </member>
        <member name="P:ADMS.API.Helpers.PagedList`1.PageSize">
            <summary>
            Page Size to retrieve
            </summary>
        </member>
        <member name="P:ADMS.API.Helpers.PagedList`1.TotalCount">
            <summary>
            Total record count
            </summary>
        </member>
        <member name="P:ADMS.API.Helpers.PagedList`1.HasPrevious">
            <summary>
            determines if a previous page exists
            </summary>
        </member>
        <member name="P:ADMS.API.Helpers.PagedList`1.HasNext">
            <summary>
            determines if next page exists
            </summary>
        </member>
        <member name="M:ADMS.API.Helpers.PagedList`1.#ctor(System.Collections.Generic.List{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="items">list items</param>
            <param name="count">total records</param>
            <param name="pageNumber">page number to retrieve</param>
            <param name="pageSize">Page size to return</param>
        </member>
        <member name="M:ADMS.API.Helpers.PagedList`1.CreateAsync(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:ADMS.API.Helpers.ResourceUriType">
            <summary>
            Type of URL to create
            </summary>
        </member>
        <member name="F:ADMS.API.Helpers.ResourceUriType.PreviousPage">
            <summary>
            Previous item
            </summary>
        </member>
        <member name="F:ADMS.API.Helpers.ResourceUriType.NextPage">
            <summary>
            Next item
            </summary>
        </member>
        <member name="F:ADMS.API.Helpers.ResourceUriType.Current">
            <summary>
            Current item
            </summary>
        </member>
        <member name="T:ADMS.API.Migrations.CreateDatabaseAndSeedTestData">
            <inheritdoc />
        </member>
        <member name="M:ADMS.API.Migrations.CreateDatabaseAndSeedTestData.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ADMS.API.Migrations.CreateDatabaseAndSeedTestData.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ADMS.API.Migrations.CreateDatabaseAndSeedTestData.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ADMS.API.Profiles.DocumentActivityProfile">
            <summary>
            Document Activity Profile for autopmapper
            </summary>
        </member>
        <member name="M:ADMS.API.Profiles.DocumentActivityProfile.#ctor">
            <summary>
            Document Activity Profile Constructor
            </summary>
        </member>
        <member name="T:ADMS.API.Profiles.DocumentActivityUserProfile">
            <summary>
            Document Activity User Profile for autopmapper
            </summary>
        </member>
        <member name="M:ADMS.API.Profiles.DocumentActivityUserProfile.#ctor">
            <summary>
            Document Activity User Profile Constructor
            </summary>
        </member>
        <member name="T:ADMS.API.Profiles.DocumentProfile">
            <summary>
            Automapper profile
            </summary>
        </member>
        <member name="M:ADMS.API.Profiles.DocumentProfile.#ctor">
            <summary>
            Document profile constructor
            </summary>
        </member>
        <member name="T:ADMS.API.Profiles.MatterActivityProfile">
            <summary>
            Matter Activity Profile for autopmapper
            </summary>
        </member>
        <member name="M:ADMS.API.Profiles.MatterActivityProfile.#ctor">
            <summary>
            Matter Activity Profile Constructor
            </summary>
        </member>
        <member name="T:ADMS.API.Profiles.MatterActivityUserProfile">
            <summary>
            Matter Activity User Profile for autopmapper
            </summary>
        </member>
        <member name="M:ADMS.API.Profiles.MatterActivityUserProfile.#ctor">
            <summary>
            Matter Activity User Profile Constructor
            </summary>
        </member>
        <member name="T:ADMS.API.Profiles.MatterDocumentActivityProfile">
            <summary>
            Matter Document Activity Profile for autopmapper
            </summary>
        </member>
        <member name="M:ADMS.API.Profiles.MatterDocumentActivityProfile.#ctor">
            <summary>
            Matter Document Activity Profile Constructor
            </summary>
        </member>
        <member name="T:ADMS.API.Profiles.MatterDocumentActivityUserFromProfile">
            <summary>
            Matter Document Activity User Profile for autopmapper
            </summary>
        </member>
        <member name="M:ADMS.API.Profiles.MatterDocumentActivityUserFromProfile.#ctor">
            <summary>
            MatterDocumentActivityUser Profile Constructor
            </summary>
        </member>
        <member name="T:ADMS.API.Profiles.MatterDocumentActivityUserProfile">
            <summary>
            Matter Document Activity Profile for autopmapper
            </summary>
        </member>
        <member name="M:ADMS.API.Profiles.MatterDocumentActivityUserProfile.#ctor">
            <summary>
            Matter Document Activity Profile Constructor
            </summary>
        </member>
        <member name="T:ADMS.API.Profiles.MatterDocumentActivityUserToProfile">
            <summary>
            Matter Document Activity User Profile for autopmapper
            </summary>
        </member>
        <member name="M:ADMS.API.Profiles.MatterDocumentActivityUserToProfile.#ctor">
            <summary>
            MatterDocumentActivityUser Profile Constructor
            </summary>
        </member>
        <member name="T:ADMS.API.Profiles.MatterProfile">
            <summary>
            Automapper profile
            </summary>
        </member>
        <member name="M:ADMS.API.Profiles.MatterProfile.#ctor">
            <summary>
            Matter profile constructor
            </summary>
        </member>
        <member name="T:ADMS.API.Profiles.RevisionActivityProfile">
            <summary>
            Revision Activity Profile for autopmapper
            </summary>
        </member>
        <member name="M:ADMS.API.Profiles.RevisionActivityProfile.#ctor">
            <summary>
            Revision Activity Profile Constructor
            </summary>
        </member>
        <member name="T:ADMS.API.Profiles.RevisionActivityUserProfile">
            <summary>
            Revision Activity User Profile for autopmapper
            </summary>
        </member>
        <member name="M:ADMS.API.Profiles.RevisionActivityUserProfile.#ctor">
            <summary>
            Revision Activity User Profile Constructor
            </summary>
        </member>
        <member name="T:ADMS.API.Profiles.RevisionProfile">
            <summary>
            Revision Profile fpr autopmapper
            </summary>
        </member>
        <member name="M:ADMS.API.Profiles.RevisionProfile.#ctor">
            <summary>
            Revision Profile Constructor
            </summary>
        </member>
        <member name="T:ADMS.API.Profiles.UserProfile">
            <summary>
            User Profile for autopmapper
            </summary>
        </member>
        <member name="M:ADMS.API.Profiles.UserProfile.#ctor">
            <summary>
            User Profile Constructor
            </summary>
        </member>
        <member name="T:ADMS.API.Services.AdmsRepository">
            <summary>
            Adms Repository containing implementation details.
            </summary>
            <remarks>
            Adms Context constructor
            </remarks>
            <param name="logger">logging mechanism</param>
            <param name="context">context to use</param>
            <param name="mapper">Data Mapper to convert from Dto to entity class</param>
            <param name="propertyMappingService">property mapping service</param>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.#ctor(Microsoft.Extensions.Logging.ILogger{ADMS.API.Services.AdmsRepository},ADMS.API.DbContexts.AdmsContext,AutoMapper.IMapper,ADMS.API.Services.IPropertyMappingService)">
            <summary>
            Adms Repository containing implementation details.
            </summary>
            <remarks>
            Adms Context constructor
            </remarks>
            <param name="logger">logging mechanism</param>
            <param name="context">context to use</param>
            <param name="mapper">Data Mapper to convert from Dto to entity class</param>
            <param name="propertyMappingService">property mapping service</param>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.AddDocumentAsync(System.Guid,ADMS.API.Models.DocumentForCreationDto)">
            <summary>
            Add document to existing task.
            </summary>
            <param name="matterId">matter to add document to</param>
            <param name="document">document to add</param>
            <returns></returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.CopyDocumentAsync(System.Guid,ADMS.API.Models.DocumentWithoutRevisionsDto)">
            <summary>
            Copy document from one matter to another as a new document
            </summary>
            <param name="document">document to be copied</param>
            <param name="matterId">new matter to copy to</param>
            <returns>true if copied, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.MoveDocumentAsync(System.Guid,ADMS.API.Models.DocumentWithoutRevisionsDto)">
            <summary>
            Move document from onw matter to another
            </summary>
            <param name="document">document to be moved</param>
            <param name="matterId">new matter to move document to</param>
            <returns>true if moved, false otherwise</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.CheckinDocumentAsync(System.Guid)">
            <summary>
            Checks in document after editing
            </summary>
            <param name="documentId">document to be checked in</param>
            <returns>true if document checked in, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.CheckoutDocumentAsync(System.Guid)">
            <summary>
            Check out document for editing
            </summary>
            <param name="documentId">document to be checked out</param>
            <returns>true if checked out, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.DeleteDocumentAsync(ADMS.API.Models.DocumentDto)">
            <summary>
            Deletes a specified document
            </summary>
            <param name="document">document to be deleted</param>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.DocumentExistsAsync(System.Guid)">
            <summary>
            Document existence check
            </summary>
            <param name="documentId">document to check existence of</param>
            <returns>true if document exists, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetDocumentAsync(System.Guid,System.Boolean)">
            <summary>
            Gets documents and conditionally revisions based on a selected document id
            </summary>
            <param name="documentId">docuent to retrieve</param>
            <param name="includeRevisions">include revisions with return data</param>
            <returns>Document</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetDocumentAsync(System.Guid)">
            <summary>
            Get Document
            </summary>
            <param name="documentId">document to retrieve</param>
            <returns>Document or null if document doesn't exist</returns>
            <exception cref="T:System.ArgumentNullException">thrown if documentId is null</exception>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetDocumentsByFileNameAsync(System.Guid,System.String)">
            <summary>
            Gets a list of documnts by the filename entered
            </summary>
            <param name="matterId">matter containing document(s)</param>
            <param name="fileName">filename required</param>
            <returns>Diocument matching file name</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetDocumentsAsync(System.Guid,System.Boolean)">
            <summary>
            Gets a list of documents without filter
            </summary>
            <param name="matterId">matter containing document(s)</param>
            <param name="includeDeleted">includes deleted documents</param>
            <returns>list of documents</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetDocumentsAsync(System.Guid,ADMS.API.ResourceParameters.DocumentsResourceParameters)">
            <summary>
            Get list of documents
            </summary>
            <param name="matterId">matter containing document(s)</param>
            <param name="documentsResourceParameters">search parameters to locate</param>
            <returns>paged list of documents</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetPagedDocumentsAsync(System.Guid,ADMS.API.ResourceParameters.DocumentsResourceParameters,System.Boolean)">
            <summary>
            Gets a list of documents
            </summary>
            <param name="matterId">matter containing document(s)</param>
            <param name="documentsResourceParameters">search parameters to locate</param>
            <param name="includeDeleted">include deleted documents</param>
            <returns>List of documents and pagination metadata</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetDocumentWithHistoryByIdAsync(System.Guid)">
            <summary>
            Retrieves document history by specified Id
            </summary>
            <param name="documentId">document history to retrieve</param>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.UpdateDocumentAsync(ADMS.API.Entities.Document)">
            <summary>
            Updates a specified document with new data
            </summary>
            <param name="document">Document to be updated</param>
            <returns>true if updated, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetDocumentActivityByActivityNameAsync(System.String)">
            <summary>
            Retrieves document activity by activity name
            </summary>
            <param name="activityName">activity to retrieve</param>
            <returns>DocumentActivity</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.AddDocumentAuditAsync(ADMS.API.Entities.DocumentActivityUser)">
            <summary>
            Add Document Audit record
            </summary>
            <param name="audit">audit record to be added</param>
            <exception cref="T:System.ArgumentNullException">audit is null</exception>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetDocumentAuditsAsync(System.Guid)">
            <summary>
            Get document audit history
            </summary>
            <param name="documentId">document to retrieve audit history for</param>
            <returns>list of document activity user records</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.AddMatterAsync(ADMS.API.Models.MatterDto)">
            <summary>
            Add a matter to the matters collection
            </summary>
            <param name="matter">matter to be added</param>
            <returns>matter created</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.MatterExistsAsync(System.Guid)">
            <summary>
            Check if a matter exists
            </summary>
            <param name="matterId">matter to check</param>
            <returns>true if exists, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.MatterNameExistsAsync(System.String)">
            <summary>
            Check if a matter name exists
            </summary>
            <param name="matterName">name of matter to identify</param>
            <returns>true if exists, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.DeleteMatterAsync(ADMS.API.Models.MatterDto)">
            <summary>
            Deletes a metter
            </summary>
            <param name="matter">matter to be deleted</param>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetMattersAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets list of matters ordered by description
            </summary>
            <param name="description">matter description being searched for</param>
            <param name="includeArchived">include archived matters in returned result</param>
            <param name="includeDeleted">include deleted matters in returned data</param>
            <returns>IEnumerable Matter</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetMatterAsync(System.Guid,System.Boolean)">
            <summary>
            Get matter by id
            </summary>
            <param name="matterId">matter id to retrieve</param>
            <param name="includeDocuments">include documents in returned matter</param>
            <returns>matter</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.RestoreMatterAsync(System.Guid)">
            <summary>
            Restore Matter by id
            </summary>
            <param name="matterId">matter id to restore</param>
            <returns>True if matter restored, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetMatterWithHistoryByIdAsync(System.Guid)">
            <summary>
            Retrieves matter history by specified Id
            </summary>
            <param name="matterId">matter history to retrieve</param>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.DoesMatterHistoryExistAsync(System.Guid)">
            <summary>
            Identifies if matter history exists
            </summary>
            <param name="matterId">Matter to check</param>
            <returns>true if Matter History exists, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetMatterActivityByActivityNameAsync(System.String)">
            <summary>
            Gets MatterActivity by activity
            </summary>
            <param name="activityName">activity to retrieve</param>
            <returns>MatterActivity</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.RevisionActivityExistsAsync(System.String)">
            <summary>
            checks if a revision activity already exists
            </summary>
            <param name="activityName"></param>
            <returns></returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetRevisionActivityByActivityNameAsync(System.String)">
            <summary>
            Gets revision activity for given activity
            </summary>
            <param name="activityName">activity to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.UpdateRevisionAsync(System.Guid,System.Guid,System.Guid,ADMS.API.Models.RevisionDto)">
            <summary>
            Update specified revision
            </summary>
            <param name="matterId">Matter containing revision to update</param>
            <param name="documentId">Document containing revision to be updated</param>
            <param name="revisionId">Revision to be updated</param>
            <param name="revision">Revision containing data to be updated</param>
            <returns>Updated revision</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.AddRevisionAsync(System.Guid,ADMS.API.Models.RevisionDto)">
            <summary>
            Adds revision to document
            </summary>
            <param name="documentId">document to be added to </param>
            <param name="revision">revision to add</param>
            <returns></returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.RevisionExistsAsync(System.Guid)">
            <summary>
            Checks if revision Id exists
            </summary>
            <param name="revisionId">revision to check</param>
            <returns>true if exists, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.DeleteRevisionAsync(ADMS.API.Models.RevisionDto)">
            <summary>
            Deletes a specified revision
            </summary>
            <param name="revision">The revision to be deleted</param>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetRevisionByIdAsync(System.Guid)">
            <summary>
            Retrieves revision by specified Id
            </summary>
            <param name="revisionId">revision to retrieve</param>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetRevisionWithHistoryByIdAsync(System.Guid)">
            <summary>
            Retrieves revision history by specified Id
            </summary>
            <param name="revisionId">revision to retrieve</param>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetRevisionsAsync(System.Guid,System.Boolean)">
            <summary>
            Get list of revisions
            </summary>
            <param name="documentId">document to retrieve revisions for</param>
            <param name="includeDeleted">include deleted revisions</param>
            <returns>list of revisions</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetUserByUsernameAsync(System.String)">
            <summary>
            Gets a user by username
            </summary>
            <param name="username">username being requested</param>
            <returns>User</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.SaveChangesAsync">
            <summary>
            persists the saved data to the database
            </summary>
            <returns>true if data could be saved to the database, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.AdmsRepository.GetExtendedAuditsAsync(System.Guid,System.Guid,System.String)">
            <summary>
            retrieves an extended audit history
            </summary>
            <param name="matterId">matter to retrieve data for</param>
            <param name="documentId">document to retrieve data for</param>
            <param name="direction">operation:  From / To</param>
            <returns></returns>
        </member>
        <member name="T:ADMS.API.Services.IAdmsRepository">
            <summary>
            ADMS Repository identifying actions used.
            </summary>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.AddDocumentAsync(System.Guid,ADMS.API.Models.DocumentForCreationDto)">
            <summary>
            Adds document to selected matter
            </summary>
            <param name="matterId">matter Id to add to</param>
            <param name="document">document to be added</param>
            <returns></returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.DocumentExistsAsync(System.Guid)">
            <summary>
            see if a specified document exists
            </summary>
            <param name="documentId">Document ID to be checked</param>
            <returns>True if the document exists, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.CheckinDocumentAsync(System.Guid)">
            <summary>
            Checkin document
            </summary>
            <param name="documentId">document to be checked out</param>
            <returns>true if checked in, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.CheckoutDocumentAsync(System.Guid)">
            <summary>
            Checkout document for editing
            </summary>
            <param name="documentId">document to be checked out</param>
            <returns>true if checked out, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.DeleteDocumentAsync(ADMS.API.Models.DocumentDto)">
            <summary>
            Deletes a document
            </summary>
            <param name="document">document to be deleted</param>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetDocumentsAsync(System.Guid,System.Boolean)">
            <summary>
            Gets a list of Documents for a specified matter.
            </summary>
            <param name="matterId">matter containing document(s)</param>
            <param name="includeDeleted">include deleted documents</param>
            <returns>A list of documents</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetDocumentsAsync(System.Guid,ADMS.API.ResourceParameters.DocumentsResourceParameters)">
            <summary>
            Gets a list of Documents for a specified matter via a search.
            </summary>
            <param name="matterId">matter containing document(s)</param>
            <param name="documentsResourceParameters">parameters of document list to be retrieved</param>
            <returns>A list of documents</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetPagedDocumentsAsync(System.Guid,ADMS.API.ResourceParameters.DocumentsResourceParameters,System.Boolean)">
            <summary>
            Gets a filtered set of Documents
            </summary>
            <param name="matterId">matter containing document(s)</param>
            <param name="documentsResourceParameters">search parameters to locate</param>
            <param name="includeDeleted">include deleted documents</param>
            <returns>Document and pagination information.</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetDocumentAsync(System.Guid,System.Boolean)">
            <summary>
            Gets a single document details
            </summary>
            <param name="documentId">Document Id</param>
            <param name="includeRevisions">Should the document return with revision information</param>
            <returns>Document and associated revisions</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetDocumentAsync(System.Guid)">
            <summary>
            Get specific document
            </summary>
            <param name="documentId">document to be retrieved</param>
            <returns>document retrieved</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetDocumentsByFileNameAsync(System.Guid,System.String)">
            <summary>
            Gets a list of documents by entered filename
            </summary>
            <param name="matterId">matter containing document(s)</param>
            <param name="fileName">File name of the document being searched.</param>
            <returns>Document</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetDocumentWithHistoryByIdAsync(System.Guid)">
            <summary>
            retrieve document history by id
            </summary>
            <param name="documentId">document to retrieve history from</param>
            <returns>Document history to be retrieved</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.CopyDocumentAsync(System.Guid,ADMS.API.Models.DocumentWithoutRevisionsDto)">
            <summary>
            Copy document from one matter to another
            </summary>
            <param name="document">document to copy</param>
            <param name="matterId">matter to copy document to</param>
            <returns>true if copied, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.MoveDocumentAsync(System.Guid,ADMS.API.Models.DocumentWithoutRevisionsDto)">
            <summary>
            Move document from one matter to another
            </summary>
            <param name="document">document to be moved</param>
            <param name="matterId">matter to be moved to</param>
            <returns>true if moved, false if not</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.UpdateDocumentAsync(ADMS.API.Entities.Document)">
            <summary>
            Updates a document with new details
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetDocumentActivityByActivityNameAsync(System.String)">
            <summary>
            Gets a DocumentActivity by activity
            </summary>
            <param name="activityName">activity to be retrieved</param>
            <returns>DocumentActivity</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.AddDocumentAuditAsync(ADMS.API.Entities.DocumentActivityUser)">
            <summary>
            Add document audit record
            </summary>
            <param name="audit">audit record to add</param>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetDocumentAuditsAsync(System.Guid)">
            <summary>
            Get document audit record
            </summary>
            <param name="documentId">Document record to retrieve audits for</param>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.AddMatterAsync(ADMS.API.Models.MatterDto)">
            <summary>
            Adds a matter to the repository
            </summary>
            <param name="matter">Matter to be added</param>
            <returns>Matter that has been created</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.MatterExistsAsync(System.Guid)">
            <summary>
            Checks if matter exists
            </summary>
            <param name="matterId">Matter to check</param>
            <returns>true if exists, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.MatterNameExistsAsync(System.String)">
            <summary>
            Checks if matter name exists
            </summary>
            <param name="matterName">name of matter to identify</param>
            <returns>true if exists, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.DeleteMatterAsync(ADMS.API.Models.MatterDto)">
            <summary>
            Delete matter
            </summary>
            <param name="matter">matter to be deleted</param>
            <returns>true if matter deleted, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetMattersAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets list of matters not including documents
            </summary>
            <param name="description">matter description</param>
            <param name="includeArchived">include archived matters</param>
            <param name="includeDeleted">include deleted matters</param>
            <returns>list of matters</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetMatterAsync(System.Guid,System.Boolean)">
            <summary>
            Gets a matter by Id
            </summary>
            <param name="matterId">matter to return</param>
            <param name="includeDocuments">include documents with returned matter</param>
            <returns>Matter</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.RestoreMatterAsync(System.Guid)">
            <summary>
            Restore Matter by id
            </summary>
            <param name="matterId">matter id to restore</param>
            <returns>True if matter restored, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetMatterWithHistoryByIdAsync(System.Guid)">
            <summary>
            retrieve matter history by id
            </summary>
            <param name="matterId">matter to retrieve history from</param>
            <returns>Matter with history to be retrieved</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetExtendedAuditsAsync(System.Guid,System.Guid,System.String)">
            <summary>
            retrieves an extended audit history
            </summary>
            <param name="matterId">matter to retrieve data for</param>
            <param name="documentId">document to retrieve data for</param>
            <param name="direction">operation:  From / To</param>
            <returns></returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.DoesMatterHistoryExistAsync(System.Guid)">
            <summary>
            Identifies if matter history exists
            </summary>
            <param name="matterId">Matter to check</param>
            <returns>true if Matter History exists, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetMatterActivityByActivityNameAsync(System.String)">
            <summary>
            Gets a MatterActivity by activity
            </summary>
            <param name="activityName">activity to be retrieved</param>
            <returns>MatterActivity</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.AddRevisionAsync(System.Guid,ADMS.API.Models.RevisionDto)">
            <summary>
            Ad revision to selected document
            </summary>
            <param name="documentId">Document to add the revision to</param>
            <param name="revision">revision to add</param>
            <returns>IActionResult</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.RevisionExistsAsync(System.Guid)">
            <summary>
            Checks to see if a specified revision exists
            </summary>
            <param name="revisionId">Revision ID to be checked</param>
            <returns>True if the document exists, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.DeleteRevisionAsync(ADMS.API.Models.RevisionDto)">
            <summary>
            Deletes a revision from a document
            </summary>
            <param name="revision">The revision to be deleted</param>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetRevisionByIdAsync(System.Guid)">
            <summary>
            retrieve revision by id
            </summary>
            <param name="revisionId">revision to be deleted</param>
            <returns>Revision to be retrieved</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetRevisionWithHistoryByIdAsync(System.Guid)">
            <summary>
            retrieve revision history by revision id
            </summary>
            <param name="revisionId">revision to be deleted</param>
            <returns>Revision to be retrieved</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetRevisionsAsync(System.Guid,System.Boolean)">
            <summary>
            Get list of revisions
            </summary>
            <param name="documentId">Document Id to retrieve revisions for</param>
            <param name="includeDeleted">include deleted revisions</param>
            <returns>list of revisions</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.UpdateRevisionAsync(System.Guid,System.Guid,System.Guid,ADMS.API.Models.RevisionDto)">
            <summary>
            update revision
            </summary>
            <param name="matterId">Matter containing revision</param>
            <param name="documentId">Document being updated</param>
            <param name="revisionId">Revision to be updated</param>
            <param name="revision">Revision details to update</param>
            <returns>list of revisions</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetRevisionActivityByActivityNameAsync(System.String)">
            <summary>
            Gets a revision activity by activity name
            </summary>
            <param name="activityName">activity name being sourced</param>
            <returns>RevisionActivity</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.RevisionActivityExistsAsync(System.String)">
            <summary>
            Identifies if a revision activity exists by activity description
            </summary>
            <param name="activityName">activity being checked</param>
            <returns>true if activity exists, false otherwise</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.GetUserByUsernameAsync(System.String)">
            <summary>
            Get a user by enterted username
            </summary>
            <param name="username">username being requested</param>
            <returns>User</returns>
        </member>
        <member name="M:ADMS.API.Services.IAdmsRepository.SaveChangesAsync">
            <summary>
            persists data to database
            </summary>
            <returns>true if successfull, false otherwise</returns>
        </member>
        <member name="T:ADMS.API.Services.IPropertyCheckerService">
            <summary>
            Property Checker Service interfaxe
            </summary>
        </member>
        <member name="M:ADMS.API.Services.IPropertyCheckerService.TypeHasProperties``1(System.String)">
            <summary>
            Verifies that the type has specified properties
            </summary>
            <typeparam name="T">datatype to verify</typeparam>
            <param name="fields">fields to verify</param>
            <returns>True if properties exist, False otherwise</returns>
        </member>
        <member name="T:ADMS.API.Services.IPropertyMapping">
            <summary>
            Property Mapping Interface
            </summary>
        </member>
        <member name="T:ADMS.API.Services.IPropertyMappingService">
            <summary>
            Property Mapping Service
            </summary>
        </member>
        <member name="M:ADMS.API.Services.IPropertyMappingService.GetPropertyMapping``2">
            <summary>
            Gets Property Mapping
            </summary>
            <typeparam name="TSource">Source property</typeparam>
            <typeparam name="TDestination">destination property</typeparam>
            <returns>Dictionary of properties</returns>
        </member>
        <member name="M:ADMS.API.Services.IPropertyMappingService.ValidMappingExistsFor``2(System.String)">
            <summary>
            Verifies mapping exists for source and destination
            </summary>
            <typeparam name="TSource">Source property</typeparam>
            <typeparam name="TDestination">Destination Property</typeparam>
            <param name="fields">fields to verify</param>
            <returns>True if mapping exists, False otherwise</returns>
        </member>
        <member name="T:ADMS.API.Services.PaginationMetadata">
            <summary>
            Pagination Metadata class
            </summary>
        </member>
        <member name="P:ADMS.API.Services.PaginationMetadata.TotalItemCount">
            <summary>
            Toital Item Count
            </summary>
        </member>
        <member name="P:ADMS.API.Services.PaginationMetadata.TotalPageCount">
            <summary>
            Total Page Count
            </summary>
        </member>
        <member name="P:ADMS.API.Services.PaginationMetadata.PageSize">
            <summary>
            Page Size
            </summary>
        </member>
        <member name="P:ADMS.API.Services.PaginationMetadata.CurrentPage">
            <summary>
            Current Page Number
            </summary>
        </member>
        <member name="M:ADMS.API.Services.PaginationMetadata.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Pagination Metadata Constructor
            </summary>
            <param name="totalItemCount">total item count</param>
            <param name="pageSize">page size</param>
            <param name="currentPage">current page</param>
        </member>
        <member name="T:ADMS.API.Services.PropertyCheckerService">
            <summary>
            Property Checker Service
            </summary>
        </member>
        <member name="M:ADMS.API.Services.PropertyCheckerService.TypeHasProperties``1(System.String)">
            <summary>
            Verifies that the property has types
            </summary>
            <typeparam name="T">data type to verify</typeparam>
            <param name="fields">fields to check</param>
            <returns>True if property has type, False otherwise</returns>
        </member>
        <member name="T:ADMS.API.Services.PropertyMapping`2">
            <summary>
            Property Mapping
            </summary>
            <typeparam name="TSource">Source property</typeparam>
            <typeparam name="TDestination">Destination property</typeparam>
            <remarks>
            Constructor
            </remarks>
            <param name="mappingDictionary">Mapping dictionary</param>
            <exception cref="T:System.ArgumentNullException">mappingDictinary null</exception>
        </member>
        <member name="M:ADMS.API.Services.PropertyMapping`2.#ctor(System.Collections.Generic.Dictionary{System.String,ADMS.API.Services.PropertyMappingValue})">
            <summary>
            Property Mapping
            </summary>
            <typeparam name="TSource">Source property</typeparam>
            <typeparam name="TDestination">Destination property</typeparam>
            <remarks>
            Constructor
            </remarks>
            <param name="mappingDictionary">Mapping dictionary</param>
            <exception cref="T:System.ArgumentNullException">mappingDictinary null</exception>
        </member>
        <member name="P:ADMS.API.Services.PropertyMapping`2.MappingDictionary">
            <summary>
            Mapping Dictionary
            </summary>
        </member>
        <member name="T:ADMS.API.Services.PropertyMappingService">
            <summary>
            Property Mapping Service
            </summary>
        </member>
        <member name="M:ADMS.API.Services.PropertyMappingService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ADMS.API.Services.PropertyMappingService.GetPropertyMapping``2">
            <summary>
            Get Property Mapping
            </summary>
            <typeparam name="TSource">Source property</typeparam>
            <typeparam name="TDestination">Destination property</typeparam>
            <returns>dictionary of string / property mapping value</returns>
            <exception cref="T:System.Exception">no explicit mapping found</exception>
        </member>
        <member name="M:ADMS.API.Services.PropertyMappingService.ValidMappingExistsFor``2(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:ADMS.API.Services.PropertyMappingValue">
            <summary>
            Constructor
            </summary>
            <param name="destinationProperties"></param>
            <param name="revert"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ADMS.API.Services.PropertyMappingValue.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="destinationProperties"></param>
            <param name="revert"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:ADMS.API.Services.PropertyMappingValue.DestinationProperties">
            <summary>
            Destination Properties
            </summary>
        </member>
        <member name="P:ADMS.API.Services.PropertyMappingValue.Revert">
            <summary>
            Revert boolean
            </summary>
        </member>
    </members>
</doc>
