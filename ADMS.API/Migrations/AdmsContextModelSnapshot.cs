// <auto-generated />
using System;
using ADMS.API.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ADMS.API.Migrations
{
    [DbContext(typeof(AdmsContext))]
    partial class AdmsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ADMS.API.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MatterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MatterId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ADMS.API.Entities.DocumentActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DocumentActivities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d8fc022-b294-437e-ad9b-a0e61b833270"),
                            Activity = "CHECKED IN"
                        },
                        new
                        {
                            Id = new Guid("86dc18d4-2620-416f-8053-266374fa4418"),
                            Activity = "CHECKED OUT"
                        },
                        new
                        {
                            Id = new Guid("833677b2-9915-4dff-a960-850e0399fc47"),
                            Activity = "CREATED"
                        },
                        new
                        {
                            Id = new Guid("d32536a8-815c-432f-a470-b2b316b30c43"),
                            Activity = "DELETED"
                        },
                        new
                        {
                            Id = new Guid("33ff8724-da35-461f-bb37-bb268a1c8b60"),
                            Activity = "RESTORED"
                        },
                        new
                        {
                            Id = new Guid("8d48562f-35a0-4643-83fb-cde9d879b507"),
                            Activity = "SAVED"
                        });
                });

            modelBuilder.Entity("ADMS.API.Entities.DocumentActivityUser", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentId", "DocumentActivityId", "UserId", "CreatedAt");

                    b.HasIndex("DocumentActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentActivityUsers");
                });

            modelBuilder.Entity("ADMS.API.Entities.Matter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Matters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7774153-b681-4c26-8316-07d718a6d9cc"),
                            CreationDate = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(130),
                            Description = "Test Matter #1",
                            IsArchived = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("332cdc1e-5bd3-43a7-930c-e0cf9d9191be"),
                            CreationDate = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(163),
                            Description = "Test Matter #2",
                            IsArchived = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b4cf639a-2ee4-4e3b-9a5d-ec272bda887e"),
                            CreationDate = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(166),
                            Description = "Test Matter #3",
                            IsArchived = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2d9b2def-f7f1-4faf-8e87-76f34f0008f7"),
                            CreationDate = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(169),
                            Description = "Test Matter #4",
                            IsArchived = false,
                            IsDeleted = true
                        },
                        new
                        {
                            Id = new Guid("11a088be-a380-4957-a02e-7fb06aa564a3"),
                            CreationDate = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(172),
                            Description = "Test Matter #5",
                            IsArchived = true,
                            IsDeleted = true
                        },
                        new
                        {
                            Id = new Guid("f089f59f-0460-4737-a903-e9cc7c388b86"),
                            CreationDate = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(175),
                            Description = "Test Matter #6",
                            IsArchived = true,
                            IsDeleted = true
                        });
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MatterActivities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc9aee9c-950c-4018-aaae-cd23079da63d"),
                            Activity = "ARCHIVED"
                        },
                        new
                        {
                            Id = new Guid("268c76b7-fbff-4c14-b397-ffe61748a1ca"),
                            Activity = "CREATED"
                        },
                        new
                        {
                            Id = new Guid("0efbb031-0ccb-4997-acf6-0613e3abf099"),
                            Activity = "DELETED"
                        },
                        new
                        {
                            Id = new Guid("2ef7e49f-f374-4e0d-9a5f-d38bf2bf4cd3"),
                            Activity = "RESTORED"
                        },
                        new
                        {
                            Id = new Guid("9cc499e4-87cb-4af3-b7ce-b75973287fe9"),
                            Activity = "UNARCHIVED"
                        });
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterActivityUser", b =>
                {
                    b.Property<Guid>("MatterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatterActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MatterId", "MatterActivityId", "UserId", "CreatedAt");

                    b.HasIndex("MatterActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("MatterActivityUsers");

                    b.HasData(
                        new
                        {
                            MatterId = new Guid("b7774153-b681-4c26-8316-07d718a6d9cc"),
                            MatterActivityId = new Guid("268c76b7-fbff-4c14-b397-ffe61748a1ca"),
                            UserId = new Guid("b628c4f0-bdb8-4b4d-a059-341f16279de8"),
                            CreatedAt = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(178)
                        },
                        new
                        {
                            MatterId = new Guid("332cdc1e-5bd3-43a7-930c-e0cf9d9191be"),
                            MatterActivityId = new Guid("268c76b7-fbff-4c14-b397-ffe61748a1ca"),
                            UserId = new Guid("b628c4f0-bdb8-4b4d-a059-341f16279de8"),
                            CreatedAt = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(181)
                        },
                        new
                        {
                            MatterId = new Guid("b4cf639a-2ee4-4e3b-9a5d-ec272bda887e"),
                            MatterActivityId = new Guid("268c76b7-fbff-4c14-b397-ffe61748a1ca"),
                            UserId = new Guid("b628c4f0-bdb8-4b4d-a059-341f16279de8"),
                            CreatedAt = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(225)
                        },
                        new
                        {
                            MatterId = new Guid("2d9b2def-f7f1-4faf-8e87-76f34f0008f7"),
                            MatterActivityId = new Guid("268c76b7-fbff-4c14-b397-ffe61748a1ca"),
                            UserId = new Guid("b628c4f0-bdb8-4b4d-a059-341f16279de8"),
                            CreatedAt = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(228)
                        },
                        new
                        {
                            MatterId = new Guid("11a088be-a380-4957-a02e-7fb06aa564a3"),
                            MatterActivityId = new Guid("268c76b7-fbff-4c14-b397-ffe61748a1ca"),
                            UserId = new Guid("b628c4f0-bdb8-4b4d-a059-341f16279de8"),
                            CreatedAt = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(231)
                        },
                        new
                        {
                            MatterId = new Guid("f089f59f-0460-4737-a903-e9cc7c388b86"),
                            MatterActivityId = new Guid("268c76b7-fbff-4c14-b397-ffe61748a1ca"),
                            UserId = new Guid("b628c4f0-bdb8-4b4d-a059-341f16279de8"),
                            CreatedAt = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(234)
                        },
                        new
                        {
                            MatterId = new Guid("b4cf639a-2ee4-4e3b-9a5d-ec272bda887e"),
                            MatterActivityId = new Guid("bc9aee9c-950c-4018-aaae-cd23079da63d"),
                            UserId = new Guid("b628c4f0-bdb8-4b4d-a059-341f16279de8"),
                            CreatedAt = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(236)
                        },
                        new
                        {
                            MatterId = new Guid("11a088be-a380-4957-a02e-7fb06aa564a3"),
                            MatterActivityId = new Guid("bc9aee9c-950c-4018-aaae-cd23079da63d"),
                            UserId = new Guid("b628c4f0-bdb8-4b4d-a059-341f16279de8"),
                            CreatedAt = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(239)
                        },
                        new
                        {
                            MatterId = new Guid("f089f59f-0460-4737-a903-e9cc7c388b86"),
                            MatterActivityId = new Guid("bc9aee9c-950c-4018-aaae-cd23079da63d"),
                            UserId = new Guid("b628c4f0-bdb8-4b4d-a059-341f16279de8"),
                            CreatedAt = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(241)
                        },
                        new
                        {
                            MatterId = new Guid("2d9b2def-f7f1-4faf-8e87-76f34f0008f7"),
                            MatterActivityId = new Guid("0efbb031-0ccb-4997-acf6-0613e3abf099"),
                            UserId = new Guid("b628c4f0-bdb8-4b4d-a059-341f16279de8"),
                            CreatedAt = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(244)
                        },
                        new
                        {
                            MatterId = new Guid("11a088be-a380-4957-a02e-7fb06aa564a3"),
                            MatterActivityId = new Guid("0efbb031-0ccb-4997-acf6-0613e3abf099"),
                            UserId = new Guid("b628c4f0-bdb8-4b4d-a059-341f16279de8"),
                            CreatedAt = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(246)
                        },
                        new
                        {
                            MatterId = new Guid("f089f59f-0460-4737-a903-e9cc7c388b86"),
                            MatterActivityId = new Guid("0efbb031-0ccb-4997-acf6-0613e3abf099"),
                            UserId = new Guid("b628c4f0-bdb8-4b4d-a059-341f16279de8"),
                            CreatedAt = new DateTime(2024, 2, 3, 10, 6, 58, 267, DateTimeKind.Utc).AddTicks(248)
                        });
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterDocumentActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MatterDocumentActivities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7083bf51-890e-4e87-9a3f-db75945a02bf"),
                            Activity = "COPIED"
                        },
                        new
                        {
                            Id = new Guid("da30e84c-331a-426d-af88-f79b74de3f49"),
                            Activity = "MOVED"
                        });
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterDocumentActivityUserFrom", b =>
                {
                    b.Property<Guid>("MatterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatterDocumentActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MatterId", "DocumentId", "MatterDocumentActivityId", "UserId", "CreatedAt");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MatterDocumentActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("MatterDocumentActivityUsersFrom");
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterDocumentActivityUserTo", b =>
                {
                    b.Property<Guid>("MatterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatterDocumentActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MatterId", "DocumentId", "MatterDocumentActivityId", "UserId", "CreatedAt");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MatterDocumentActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("MatterDocumentActivityUsersTo");
                });

            modelBuilder.Entity("ADMS.API.Entities.Revision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RevisionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Revisions");
                });

            modelBuilder.Entity("ADMS.API.Entities.RevisionActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RevisionActivities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1926553c-ae97-421b-9142-a784f54bdfc6"),
                            Activity = "CREATED"
                        },
                        new
                        {
                            Id = new Guid("6e96bfb6-1c6f-473e-a98f-346c7c24ffb2"),
                            Activity = "DELETED"
                        },
                        new
                        {
                            Id = new Guid("46e2852f-8fad-4b6a-8ac9-f7b682989a0d"),
                            Activity = "RESTORED"
                        },
                        new
                        {
                            Id = new Guid("5e88dd09-1bc8-4f1c-8146-44e0b4244a65"),
                            Activity = "SAVED"
                        });
                });

            modelBuilder.Entity("ADMS.API.Entities.RevisionActivityUser", b =>
                {
                    b.Property<Guid>("RevisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RevisionActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RevisionId", "RevisionActivityId", "UserId", "CreatedAt");

                    b.HasIndex("RevisionActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("RevisionActivityUsers");
                });

            modelBuilder.Entity("ADMS.API.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b628c4f0-bdb8-4b4d-a059-341f16279de8"),
                            Name = "rbrown"
                        });
                });

            modelBuilder.Entity("ADMS.API.Entities.Document", b =>
                {
                    b.HasOne("ADMS.API.Entities.Matter", "Matter")
                        .WithMany("Documents")
                        .HasForeignKey("MatterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matter");
                });

            modelBuilder.Entity("ADMS.API.Entities.DocumentActivityUser", b =>
                {
                    b.HasOne("ADMS.API.Entities.DocumentActivity", "DocumentActivity")
                        .WithMany("DocumentActivityUsers")
                        .HasForeignKey("DocumentActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.Document", "Document")
                        .WithMany("DocumentActivityUsers")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.User", "User")
                        .WithMany("DocumentActivityUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("DocumentActivity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterActivityUser", b =>
                {
                    b.HasOne("ADMS.API.Entities.MatterActivity", "MatterActivity")
                        .WithMany("MatterActivityUsers")
                        .HasForeignKey("MatterActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.Matter", "Matter")
                        .WithMany("MatterActivityUsers")
                        .HasForeignKey("MatterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.User", "User")
                        .WithMany("MatterActivityUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matter");

                    b.Navigation("MatterActivity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterDocumentActivityUserFrom", b =>
                {
                    b.HasOne("ADMS.API.Entities.Document", "Document")
                        .WithMany("MatterDocumentActivityUsersFrom")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.MatterDocumentActivity", "MatterDocumentActivity")
                        .WithMany("MatterDocumentActivityUsersFrom")
                        .HasForeignKey("MatterDocumentActivityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.Matter", "Matter")
                        .WithMany("MatterDocumentActivityUsersFrom")
                        .HasForeignKey("MatterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.User", "User")
                        .WithMany("MatterDocumentActivityUsersFrom")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Matter");

                    b.Navigation("MatterDocumentActivity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterDocumentActivityUserTo", b =>
                {
                    b.HasOne("ADMS.API.Entities.Document", "Document")
                        .WithMany("MatterDocumentActivityUsersTo")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.MatterDocumentActivity", "MatterDocumentActivity")
                        .WithMany("MatterDocumentActivityUsersTo")
                        .HasForeignKey("MatterDocumentActivityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.Matter", "Matter")
                        .WithMany("MatterDocumentActivityUsersTo")
                        .HasForeignKey("MatterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.User", "User")
                        .WithMany("MatterDocumentActivityUsersTo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Matter");

                    b.Navigation("MatterDocumentActivity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADMS.API.Entities.Revision", b =>
                {
                    b.HasOne("ADMS.API.Entities.Document", "Document")
                        .WithMany("Revisions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ADMS.API.Entities.RevisionActivityUser", b =>
                {
                    b.HasOne("ADMS.API.Entities.RevisionActivity", "RevisionActivity")
                        .WithMany("RevisionActivityUsers")
                        .HasForeignKey("RevisionActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.Revision", "Revision")
                        .WithMany("RevisionActivityUsers")
                        .HasForeignKey("RevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADMS.API.Entities.User", "User")
                        .WithMany("RevisionActivityUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Revision");

                    b.Navigation("RevisionActivity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADMS.API.Entities.Document", b =>
                {
                    b.Navigation("DocumentActivityUsers");

                    b.Navigation("MatterDocumentActivityUsersFrom");

                    b.Navigation("MatterDocumentActivityUsersTo");

                    b.Navigation("Revisions");
                });

            modelBuilder.Entity("ADMS.API.Entities.DocumentActivity", b =>
                {
                    b.Navigation("DocumentActivityUsers");
                });

            modelBuilder.Entity("ADMS.API.Entities.Matter", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("MatterActivityUsers");

                    b.Navigation("MatterDocumentActivityUsersFrom");

                    b.Navigation("MatterDocumentActivityUsersTo");
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterActivity", b =>
                {
                    b.Navigation("MatterActivityUsers");
                });

            modelBuilder.Entity("ADMS.API.Entities.MatterDocumentActivity", b =>
                {
                    b.Navigation("MatterDocumentActivityUsersFrom");

                    b.Navigation("MatterDocumentActivityUsersTo");
                });

            modelBuilder.Entity("ADMS.API.Entities.Revision", b =>
                {
                    b.Navigation("RevisionActivityUsers");
                });

            modelBuilder.Entity("ADMS.API.Entities.RevisionActivity", b =>
                {
                    b.Navigation("RevisionActivityUsers");
                });

            modelBuilder.Entity("ADMS.API.Entities.User", b =>
                {
                    b.Navigation("DocumentActivityUsers");

                    b.Navigation("MatterActivityUsers");

                    b.Navigation("MatterDocumentActivityUsersFrom");

                    b.Navigation("MatterDocumentActivityUsersTo");

                    b.Navigation("RevisionActivityUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
