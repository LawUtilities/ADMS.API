<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ADMS.API.Entities</name>
    </assembly>
    <members>
        <member name="T:ADMS.API.Entities.Document">
            <summary>
            Represents a digital document stored in the ADMS legal document management system.
            </summary>
            <remarks>
            The Document entity serves as the core component of the legal document management system,
            representing digital files and their associated metadata within the context of legal matters.
            Each document belongs to exactly one matter and maintains comprehensive metadata for legal
            compliance, audit trails, and file integrity verification.
            
            <para><strong>Key Characteristics:</strong></para>
            <list type="bullet">
            <item><strong>Digital File Storage:</strong> Represents files stored on disk with metadata in database</item>
            <item><strong>Legal Matter Association:</strong> Each document belongs to exactly one legal matter</item>
            <item><strong>File Integrity:</strong> Maintains checksums for content verification and security</item>
            <item><strong>Version Control:</strong> Supports document revisions with check-in/check-out functionality</item>
            <item><strong>Comprehensive Audit Trail:</strong> Tracks all document operations and user activities</item>
            <item><strong>Soft Deletion:</strong> Preserves deleted documents for audit and recovery purposes</item>
            </list>
            
            <para><strong>File Management Features:</strong></para>
            <list type="bullet">
            <item><strong>File Metadata:</strong> Stores filename, extension, size, and MIME type information</item>
            <item><strong>Content Integrity:</strong> SHA256 checksums for file verification and security</item>
            <item><strong>Type Safety:</strong> Validates file types and extensions for security compliance</item>
            <item><strong>Size Monitoring:</strong> Tracks file sizes for storage management and limits</item>
            <item><strong>MIME Type Detection:</strong> Automatic content type detection and validation</item>
            </list>
            
            <para><strong>Document Lifecycle Management:</strong></para>
            <list type="bullet">
            <item><strong>Creation:</strong> Upload and metadata capture with virus scanning</item>
            <item><strong>Modification:</strong> Version control through check-in/check-out workflow</item>
            <item><strong>Transfer:</strong> Move and copy operations between matters with audit trails</item>
            <item><strong>Deletion:</strong> Soft deletion preserving audit history</item>
            <item><strong>Restoration:</strong> Recovery of deleted documents when needed</item>
            </list>
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key: GUID with identity generation</item>
            <item>Required matter association through foreign key</item>
            <item>File metadata constraints: FileName(128), Extension(5), MimeType, Checksum</item>
            <item>Multiple navigation properties for comprehensive audit trail relationships</item>
            <item>No seeded data - documents are created through user operations</item>
            </list>
            
            <para><strong>Legal Compliance Support:</strong></para>
            <list type="bullet">
            <item>Complete audit trails for all document operations</item>
            <item>File integrity verification through cryptographic checksums</item>
            <item>User attribution for all document activities</item>
            <item>Document custody tracking through check-in/check-out operations</item>
            <item>Transfer tracking between matters for legal discovery</item>
            <item>Soft deletion preserving evidence and audit requirements</item>
            </list>
            
            <para><strong>Security Features:</strong></para>
            <list type="bullet">
            <item>Virus scanning integration during upload</item>
            <item>File type validation and restriction enforcement</item>
            <item>Size limits to prevent abuse and storage issues</item>
            <item>Checksum verification for content integrity</item>
            <item>Extension validation to prevent malicious uploads</item>
            </list>
            
            <para><strong>Entity Framework Integration:</strong></para>
            The entity is configured in AdmsContext with:
            <list type="bullet">
            <item>Required relationship to Matter entity</item>
            <item>One-to-many relationships with Revision and activity tracking entities</item>
            <item>Appropriate cascade behaviors for referential integrity</item>
            <item>Performance optimization for document queries</item>
            <item>Support for complex document transfer audit trails</item>
            </list>
            
            <para><strong>Professional Usage:</strong></para>
            The Document entity supports professional legal practice requirements including proper
            document organization, version control, audit trails, and compliance with legal practice
            standards for maintaining accurate records of document management operations.
            </remarks>
        </member>
        <member name="P:ADMS.API.Entities.Document.Id">
            <summary>
            Gets or sets the unique identifier for the document.
            </summary>
            <remarks>
            This GUID serves as the primary key and is automatically generated when the document
            is created. The unique identifier enables reliable referencing across all system
            components and maintains referential integrity in the audit trail system.
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key with identity generation</item>
            <item>Non-nullable and required for all operations</item>
            <item>Used as foreign key in Revision and all activity tracking entities</item>
            <item>Remains constant throughout the document's lifecycle</item>
            </list>
            
            <para><strong>Usage Considerations:</strong></para>
            The ID remains constant throughout the document's lifecycle and is used for all
            revision associations, activity tracking, file storage paths, and audit trail
            operations. It serves as the primary reference point for all document-related
            operations in the system.
            
            <para><strong>File Storage Integration:</strong></para>
            The document ID is typically used as part of the file storage path to ensure
            unique file names and enable efficient file retrieval operations.
            </remarks>
            <example>
            <code>
            var document = new Document 
            { 
                FileName = "contract.pdf",
                Extension = "pdf",
                MatterId = matterGuid
            };
            // ID will be automatically generated when saved to database
            
            // Using document ID for file storage path
            var filePath = $"matters/{document.MatterId}/documents/{document.Id}.{document.Extension}";
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.FileName">
            <summary>
            Gets or sets the file name of the document.
            </summary>
            <remarks>
            The file name represents the original or desired name of the document file, including
            any descriptive text but excluding the file extension. This field is used for display
            purposes and document identification within the legal matter context.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Required field - cannot be null or empty</item>
            <item>Maximum length: 128 characters (database constraint)</item>
            <item>Should not include file extension (stored separately)</item>
            <item>Must be suitable for file system storage</item>
            <item>Should be descriptive for legal document identification</item>
            </list>
            
            <para><strong>Business Context:</strong></para>
            <list type="bullet">
            <item>Used for document identification in user interfaces</item>
            <item>Important for legal document organization and search</item>
            <item>Displayed in matter document lists and reports</item>
            <item>Used in audit trail descriptions and logging</item>
            <item>Critical for legal discovery and document production</item>
            </list>
            
            <para><strong>Professional Usage:</strong></para>
            File names should be descriptive and professional, helping legal practitioners
            quickly identify document content and purpose within the context of the matter.
            Clear naming conventions improve document management efficiency and legal compliance.
            </remarks>
            <example>
            <code>
            // Professional document naming examples
            var contract = new Document { FileName = "Service Agreement - ABC Corp" };
            var pleading = new Document { FileName = "Motion for Summary Judgment" };
            var evidence = new Document { FileName = "Email Correspondence - Smith to Jones" };
            
            // Full file name with extension for display
            var displayName = $"{document.FileName}.{document.Extension}";
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.Extension">
            <summary>
            Gets or sets the file extension.
            </summary>
            <remarks>
            The file extension identifies the document format and type, stored without the leading dot.
            This field is critical for file type validation, MIME type determination, and security
            enforcement within the legal document management system.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Required field - cannot be null or empty</item>
            <item>Maximum length: 5 characters (database constraint)</item>
            <item>Stored without leading dot (e.g., "pdf" not ".pdf")</item>
            <item>Must be from allowed file types list</item>
            <item>Case-insensitive but stored in lowercase</item>
            </list>
            
            <para><strong>Supported File Types:</strong></para>
            The system supports various document types common in legal practice:
            <list type="bullet">
            <item><strong>Documents:</strong> pdf, doc, docx, rtf, txt</item>
            <item><strong>Spreadsheets:</strong> xls, xlsx, csv</item>
            <item><strong>Presentations:</strong> ppt, pptx</item>
            <item><strong>Images:</strong> jpg, jpeg, png, gif, tiff</item>
            <item><strong>Archives:</strong> zip, rar (with restrictions)</item>
            </list>
            
            <para><strong>Security Considerations:</strong></para>
            <list type="bullet">
            <item>Extensions are validated against allowed types for security</item>
            <item>Content type detection prevents extension spoofing</item>
            <item>Executable file types are prohibited</item>
            <item>Validation occurs during upload and update operations</item>
            </list>
            </remarks>
            <example>
            <code>
            // Setting extensions properly (without leading dot)
            var pdfDocument = new Document { Extension = "pdf" };
            var wordDocument = new Document { Extension = "docx" };
            var imageDocument = new Document { Extension = "jpg" };
            
            // Generating full filename
            var fullFileName = $"{document.FileName}.{document.Extension}";
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ADMS.API.Entities.Document.FileSize" -->
        <member name="P:ADMS.API.Entities.Document.MimeType">
            <summary>
            Gets or sets the MIME type of the file (e.g., "application/pdf").
            </summary>
            <remarks>
            The MIME type identifies the content format of the document according to internet
            standards. This field is automatically determined during upload based on file
            content analysis and is used for proper content handling and security validation.
            
            <para><strong>Content Type Detection:</strong></para>
            <list type="bullet">
            <item>Automatically detected from file content (not just extension)</item>
            <item>Validated against known safe MIME types</item>
            <item>Used for proper HTTP content-type headers</item>
            <item>Critical for browser handling and security</item>
            <item>Prevents MIME type spoofing attacks</item>
            </list>
            
            <para><strong>Common Legal Document MIME Types:</strong></para>
            <list type="bullet">
            <item><strong>PDF:</strong> application/pdf</item>
            <item><strong>Word Documents:</strong> application/vnd.openxmlformats-officedocument.wordprocessingml.document</item>
            <item><strong>Plain Text:</strong> text/plain</item>
            <item><strong>Images:</strong> image/jpeg, image/png, image/tiff</item>
            <item><strong>Excel:</strong> application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</item>
            </list>
            
            <para><strong>Security Considerations:</strong></para>
            <list type="bullet">
            <item>MIME type validation prevents malicious file uploads</item>
            <item>Content-based detection prevents extension spoofing</item>
            <item>Only approved MIME types are allowed</item>
            <item>Validation occurs during upload and file operations</item>
            </list>
            </remarks>
            <example>
            <code>
            // MIME type examples for legal documents
            var pdfDoc = new Document { MimeType = "application/pdf" };
            var wordDoc = new Document { MimeType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document" };
            var imageDoc = new Document { MimeType = "image/jpeg" };
            
            // MIME type validation example
            var allowedTypes = new[] { "application/pdf", "text/plain", "image/jpeg" };
            bool isAllowed = allowedTypes.Contains(document.MimeType);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.Checksum">
            <summary>
            Gets or sets the checksum (e.g., SHA256 hash) of the file for integrity verification.
            </summary>
            <remarks>
            The checksum provides cryptographic verification of file integrity, ensuring that
            document content has not been corrupted or tampered with. This is critical for
            legal document management where content integrity must be guaranteed.
            
            <para><strong>Integrity Verification:</strong></para>
            <list type="bullet">
            <item>SHA256 hash automatically calculated during upload</item>
            <item>Stored as 64-character lowercase hexadecimal string</item>
            <item>Used to detect file corruption or tampering</item>
            <item>Enables duplicate detection across the system</item>
            <item>Critical for legal document authenticity</item>
            </list>
            
            <para><strong>Legal Compliance Benefits:</strong></para>
            <list type="bullet">
            <item>Proves document content integrity for legal proceedings</item>
            <item>Detects unauthorized modifications to legal documents</item>
            <item>Supports chain of custody requirements</item>
            <item>Enables forensic analysis if needed</item>
            <item>Complies with legal practice standards</item>
            </list>
            
            <para><strong>Technical Implementation:</strong></para>
            <list type="bullet">
            <item>Calculated using System.Security.Cryptography.SHA256</item>
            <item>Computed during file upload and stored in database</item>
            <item>Can be recalculated for verification purposes</item>
            <item>Used for duplicate detection and deduplication</item>
            </list>
            </remarks>
            <example>
            <code>
            // Example SHA256 checksum
            var document = new Document 
            { 
                Checksum = "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3"
            };
            
            // Verifying file integrity
            public static bool VerifyIntegrity(byte[] fileContent, string expectedChecksum)
            {
                var hash = System.Security.Cryptography.SHA256.HashData(fileContent);
                var calculatedChecksum = Convert.ToHexString(hash).ToLowerInvariant();
                return string.Equals(calculatedChecksum, expectedChecksum, StringComparison.OrdinalIgnoreCase);
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.MatterId">
            <summary>
            Gets or sets the unique identifier of the matter linked to this document.
            </summary>
            <remarks>
            This property establishes the required foreign key relationship to the matter that
            contains this document. Every document must belong to exactly one matter, providing
            the organizational context for legal document management.
            
            <para><strong>Relationship Requirements:</strong></para>
            <list type="bullet">
            <item>Required field - every document must have a matter</item>
            <item>Must reference a valid, existing matter</item>
            <item>Cannot be changed after document creation (use transfer operations)</item>
            <item>Forms the basis for document organization and access control</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Documents are organized within legal matters</item>
            <item>Matter association controls document access and permissions</item>
            <item>Used for document search and filtering within matter context</item>
            <item>Critical for legal case organization and discovery</item>
            </list>
            
            <para><strong>Document Transfer:</strong></para>
            When documents need to be moved between matters, this is accomplished through
            dedicated transfer operations that maintain audit trails rather than direct
            property modification.
            </remarks>
            <example>
            <code>
            // Creating document in a matter
            var document = new Document
            {
                MatterId = legalMatter.Id,  // Must reference valid matter
                FileName = "Client Contract",
                Extension = "pdf"
            };
            
            // Document organization within matter
            var matterDocuments = matter.Documents.Where(d => !d.IsDeleted);
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ADMS.API.Entities.Document.IsCheckedOut" -->
        <!-- Badly formed XML comment ignored for member "P:ADMS.API.Entities.Document.IsDeleted" -->
        <member name="P:ADMS.API.Entities.Document.CreationDate">
            <summary>
            Gets or sets the creation date and time of the document in UTC for temporal tracking and audit compliance.
            </summary>
            <remarks>
            The creation date establishes the temporal foundation for the document lifecycle and must be accurately
            maintained for legal audit trail compliance and professional document management standards.
            
            <para><strong>Temporal Significance:</strong></para>
            <list type="bullet">
            <item><strong>Audit Trail Foundation:</strong> Establishes the starting point for comprehensive document timeline tracking</item>
            <item><strong>Legal Compliance:</strong> Provides precise temporal data required for legal document management</item>
            <item><strong>Professional Standards:</strong> Supports professional practice standards for document creation tracking</item>
            <item><strong>Chronological Analysis:</strong> Enables document age analysis and professional document lifecycle management</item>
            <item><strong>UTC Standardization:</strong> Uses UTC for consistent global temporal tracking and audit compliance</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item><strong>Immutable Foundation:</strong> Creation date should not change after initial document creation</item>
            <item><strong>Temporal Consistency:</strong> Must be consistent with revision creation dates and activity timestamps</item>
            <item><strong>Reasonable Bounds:</strong> Must be within reasonable temporal bounds for system validity</item>
            <item><strong>Audit Trail Integration:</strong> Serves as temporal reference for all subsequent document operations</item>
            </list>
            
            <para><strong>Validation:</strong></para>
            Validated in ValidateCoreProperties() using BaseValidationDto.ValidateRequiredDate() for comprehensive
            temporal validation and ValidateCrossPropertyRules() for temporal consistency with revisions.
            
            <para><strong>Entity Alignment:</strong></para>
            This property mirrors <see cref="P:ADMS.API.Entities.Document.CreationDate"/> exactly, ensuring
            consistent temporal tracking and reliable document lifecycle management.
            </remarks>
            <example>
            <code>
            // Document creation with temporal tracking
            var document = new DocumentDto 
            { 
                CreationDate = DateTime.UtcNow,
                /* other properties */
            };
            
            // Professional temporal analysis
            var documentAge = document.DocumentAge; // TimeSpan representing age
            var ageInDays = document.DocumentAge.TotalDays;
            
            // Professional reporting
            Console.WriteLine($"Document created: {document.CreationDate:yyyy-MM-dd HH:mm:ss} UTC");
            Console.WriteLine($"Document age: {ageInDays:F1} days");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.Matter">
            <summary>
            Gets or sets the matter entity linked to this document.
            </summary>
            <remarks>
            This navigation property provides access to the matter that contains this document.
            The relationship is established through the MatterId foreign key and enables access
            to matter-level information and operations for legal document management.
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses MatterId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>Part of one-to-many relationship (Matter has many Documents)</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Accessing matter context from document operations</item>
            <item>Matter-level security and access control</item>
            <item>Document organization and case management</item>
            <item>Legal compliance and audit trail operations</item>
            </list>
            
            <para><strong>Performance Considerations:</strong></para>
            The virtual modifier enables lazy loading, but consider explicit loading or
            projections when working with multiple documents to avoid N+1 query issues.
            </remarks>
            <example>
            <code>
            // Accessing matter through document
            string matterDescription = document.Matter.Description;
            bool matterIsArchived = document.Matter.IsArchived;
            
            // Using explicit loading to avoid N+1 queries
            context.Entry(document)
                .Reference(d => d.Matter)
                .Load();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.Revisions">
            <summary>
            Gets or sets the collection of revisions for this document.
            </summary>
            <remarks>
            This collection maintains the version history of the document through revision entities.
            Each revision represents a specific version of the document content, supporting
            comprehensive version control and document history tracking.
            
            <para><strong>Version Control Features:</strong></para>
            <list type="bullet">
            <item>Sequential revision numbering starting from 1</item>
            <item>Complete version history preservation</item>
            <item>User attribution for each revision</item>
            <item>Temporal tracking of document changes</item>
            <item>Support for revision comparison and rollback</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>One-to-many relationship from Document to Revision</item>
            <item>Cascade delete behavior for data integrity</item>
            <item>Ordered by revision number for chronological access</item>
            <item>Supports lazy loading with virtual modifier</item>
            </list>
            
            <para><strong>Legal Compliance Benefits:</strong></para>
            <list type="bullet">
            <item>Complete audit trail of document changes</item>
            <item>Ability to reconstruct document history</item>
            <item>Evidence of document evolution for legal purposes</item>
            <item>Support for regulatory compliance requirements</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing document revisions
            var latestRevision = document.Revisions
                .OrderByDescending(r => r.RevisionNumber)
                .FirstOrDefault();
            
            var revisionCount = document.Revisions.Count;
            var firstRevision = document.Revisions
                .OrderBy(r => r.RevisionNumber)
                .FirstOrDefault();
            
            // Creating new revision
            var newRevision = new Revision 
            { 
                DocumentId = document.Id,
                RevisionNumber = document.Revisions.Count + 1,
                CreationDate = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.DocumentActivityUsers">
            <summary>
            Gets or sets the collection of document activity user associations for this document.
            </summary>
            <remarks>
            This collection tracks all document-related activities performed by users, maintaining
            a comprehensive audit trail of document operations essential for legal document management.
            
            <para><strong>Activity Types Tracked:</strong></para>
            <list type="bullet">
            <item><strong>CREATED:</strong> Document creation activity</item>
            <item><strong>SAVED:</strong> Document save activity</item>
            <item><strong>DELETED:</strong> Document deletion activity</item>
            <item><strong>RESTORED:</strong> Document restoration activity</item>
            <item><strong>CHECKED IN:</strong> Document check-in activity</item>
            <item><strong>CHECKED OUT:</strong> Document check-out activity</item>
            </list>
            
            <para><strong>Legal Compliance Support:</strong></para>
            <list type="bullet">
            <item>Complete user attribution for all document operations</item>
            <item>Temporal audit trails for legal discovery and compliance</item>
            <item>Immutable record of document lifecycle activities</item>
            <item>Support for regulatory reporting and audit requirements</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>One-to-many relationship from Document to DocumentActivityUser</item>
            <item>Composite primary key in DocumentActivityUser includes DocumentId</item>
            <item>Standard cascade behavior for referential integrity</item>
            <item>Performance optimization for activity queries</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing document activities
            foreach (var activity in document.DocumentActivityUsers.OrderBy(a => a.CreatedAt))
            {
                Console.WriteLine($"{activity.User?.Name} performed {activity.DocumentActivity?.Activity} at {activity.CreatedAt}");
            }
            
            // Finding specific activities
            var creationActivity = document.DocumentActivityUsers
                .FirstOrDefault(a => a.DocumentActivity?.Activity == "CREATED");
            
            var recentActivities = document.DocumentActivityUsers
                .Where(a => a.CreatedAt >= DateTime.UtcNow.AddDays(-7))
                .OrderByDescending(a => a.CreatedAt);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.MatterDocumentActivityUsersFrom">
            <summary>
            Gets or sets the collection of "from" matter document activity user associations for this document.
            </summary>
            <remarks>
            This collection tracks document transfer activities where this document was moved or copied
            FROM its current matter to other matters. This provides the source-side audit trail for
            document transfer operations, essential for legal compliance and document custody tracking.
            
            <para><strong>Transfer Operations Tracked:</strong></para>
            <list type="bullet">
            <item><strong>MOVED:</strong> Document moved from source matter to destination</item>
            <item><strong>COPIED:</strong> Document copied from source matter to destination</item>
            </list>
            
            <para><strong>Legal Compliance Benefits:</strong></para>
            <list type="bullet">
            <item>Document custody chains for legal discovery</item>
            <item>Complete audit trail for document provenance</item>
            <item>User attribution for transfer initiation</item>
            <item>Temporal tracking for legal timeline reconstruction</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>One-to-many relationship with composite primary key</item>
            <item>NoAction cascade delete to preserve audit trail integrity</item>
            <item>Supports lazy loading for on-demand access</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing outbound transfer history
            foreach (var transfer in document.MatterDocumentActivityUsersFrom)
            {
                Console.WriteLine($"Document {transfer.MatterDocumentActivity?.Activity} from matter {transfer.Matter?.Description}");
            }
            
            // Recent transfers from this document
            var recentTransfers = document.MatterDocumentActivityUsersFrom
                .Where(t => t.CreatedAt >= DateTime.UtcNow.AddDays(-30))
                .OrderByDescending(t => t.CreatedAt);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.MatterDocumentActivityUsersTo">
            <summary>
            Gets or sets the collection of "to" matter document activity user associations for this document.
            </summary>
            <remarks>
            This collection tracks document transfer activities where this document was moved or copied
            TO its current matter from other matters. This provides the destination-side audit trail
            for document transfer operations, completing the bidirectional tracking system.
            
            <para><strong>Transfer Operations Tracked:</strong></para>
            <list type="bullet">
            <item><strong>MOVED:</strong> Document moved from source matter to current matter</item>
            <item><strong>COPIED:</strong> Document copied from source matter to current matter</item>
            </list>
            
            <para><strong>Legal Practice Benefits:</strong></para>
            <list type="bullet">
            <item>Document provenance tracking for legal compliance</item>
            <item>Matter consolidation and organization audit trails</item>
            <item>User accountability for document receipt</item>
            <item>Complete bidirectional transfer documentation</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>One-to-many relationship with composite primary key</item>
            <item>NoAction cascade delete to preserve audit trail integrity</item>
            <item>Supports lazy loading for on-demand access</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing inbound transfer history
            foreach (var transfer in document.MatterDocumentActivityUsersTo)
            {
                Console.WriteLine($"Document {transfer.MatterDocumentActivity?.Activity} to matter {transfer.Matter?.Description}");
            }
            
            // Finding source of document
            var originalSource = document.MatterDocumentActivityUsersTo
                .OrderBy(t => t.CreatedAt)
                .FirstOrDefault();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.FullFileName">
            <summary>
            Gets the full file name including extension.
            </summary>
            <remarks>
            This computed property combines the file name and extension to provide the complete
            file name as it would appear in a file system or user interface.
            </remarks>
            <example>
            <code>
            var document = new Document { FileName = "Contract", Extension = "pdf" };
            Console.WriteLine(document.FullFileName); // Output: "Contract.pdf"
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.FormattedFileSize">
            <summary>
            Gets the formatted file size in human-readable format.
            </summary>
            <remarks>
            This computed property formats the file size in bytes into a more readable
            format (bytes, KB, MB, GB) for user interface display.
            </remarks>
            <example>
            <code>
            Console.WriteLine(document.FormattedFileSize);
            // Examples: "1.5 KB", "2.3 MB", "1.2 GB"
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.HasRevisions">
            <summary>
            Gets a value indicating whether this document has any revisions.
            </summary>
            <remarks>
            This computed property provides a quick way to determine if the document has
            version history, useful for user interface logic and business operations.
            
            <para><strong>Performance Note:</strong></para>
            This property may trigger database queries if the Revisions collection is not loaded.
            Consider using explicit loading when working with multiple documents.
            </remarks>
            <example>
            <code>
            if (document.HasRevisions)
            {
                Console.WriteLine($"Document has {document.Revisions.Count} revisions");
            }
            else
            {
                Console.WriteLine("Document has no revision history");
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.RevisionCount">
            <summary>
            Gets the total number of revisions for this document.
            </summary>
            <remarks>
            This computed property provides the count of document revisions, useful for
            version control operations and user interface display.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Document has {document.RevisionCount} revisions");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.LatestRevisionNumber">
            <summary>
            Gets the latest revision number for this document.
            </summary>
            <remarks>
            This computed property returns the highest revision number, useful for
            creating new revisions and displaying current version information.
            Returns 0 if no revisions exist.
            </remarks>
            <example>
            <code>
            var nextRevisionNumber = document.LatestRevisionNumber + 1;
            Console.WriteLine($"Latest revision: {document.LatestRevisionNumber}");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.HasActivityHistory">
            <summary>
            Gets a value indicating whether this document has any activity history.
            </summary>
            <remarks>
            This computed property determines if the document has any recorded activities,
            useful for audit trail validation and user interface logic.
            </remarks>
            <example>
            <code>
            if (document.HasActivityHistory)
            {
                // Show activity history in user interface
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.TotalActivityCount">
            <summary>
            Gets the total count of all activities (document + transfer) for this document.
            </summary>
            <remarks>
            This computed property provides a comprehensive count of all activities associated
            with the document, including regular document activities and transfer activities.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Total activities: {document.TotalActivityCount}");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.CanBeDeleted">
            <summary>
            Gets a value indicating whether the document can be safely deleted.
            </summary>
            <remarks>
            This computed property checks business rules to determine if the document can be deleted,
            considering factors like checkout status and current deletion state.
            </remarks>
            <example>
            <code>
            if (document.CanBeDeleted)
            {
                // Allow deletion operation
            }
            else
            {
                // Show user why deletion is not allowed
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.CanBeCheckedOut">
            <summary>
            Gets a value indicating whether the document can be checked out.
            </summary>
            <remarks>
            This computed property determines if the document is available for checkout
            based on current status flags and business rules.
            </remarks>
            <example>
            <code>
            if (document.CanBeCheckedOut)
            {
                // Allow checkout operation
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.CanBeCheckedIn">
            <summary>
            Gets a value indicating whether the document can be checked in.
            </summary>
            <remarks>
            This computed property determines if the document can be checked in
            based on current checkout status.
            </remarks>
            <example>
            <code>
            if (document.CanBeCheckedIn)
            {
                // Allow checkin operation
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.IsPdf">
            <summary>
            Gets a value indicating whether this document is a PDF.
            </summary>
            <remarks>
            This computed property provides a convenient way to identify PDF documents,
            which are commonly used in legal practice.
            </remarks>
            <example>
            <code>
            if (document.IsPdf)
            {
                // Handle PDF-specific operations
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.IsImage">
            <summary>
            Gets a value indicating whether this document is an image.
            </summary>
            <remarks>
            This computed property identifies common image formats used in legal practice.
            </remarks>
            <example>
            <code>
            if (document.IsImage)
            {
                // Handle image-specific operations
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Document.IsOfficeDocument">
            <summary>
            Gets a value indicating whether this document is a Microsoft Office document.
            </summary>
            <remarks>
            This computed property identifies Microsoft Office document formats commonly
            used in legal practice.
            </remarks>
            <example>
            <code>
            if (document.IsOfficeDocument)
            {
                // Handle Office document operations
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Document.Equals(ADMS.API.Entities.Document)">
            <summary>
            Determines whether the specified Document is equal to the current Document.
            </summary>
            <param name="other">The Document to compare with the current Document.</param>
            <returns>true if the specified Document is equal to the current Document; otherwise, false.</returns>
            <remarks>
            Equality is determined by comparing the Id property, as each document has a unique identifier.
            This follows Entity Framework best practices for entity equality comparison.
            </remarks>
        </member>
        <member name="M:ADMS.API.Entities.Document.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current Document.
            </summary>
            <param name="obj">The object to compare with the current Document.</param>
            <returns>true if the specified object is equal to the current Document; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Document.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current Document.</returns>
            <remarks>
            The hash code is based on the Id property to ensure consistent hashing behavior
            that aligns with the equality implementation.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ADMS.API.Entities.Document.CompareTo(ADMS.API.Entities.Document)" -->
        <member name="M:ADMS.API.Entities.Document.op_Equality(ADMS.API.Entities.Document,ADMS.API.Entities.Document)">
            <summary>
            Determines whether two Document instances are equal.
            </summary>
            <param name="left">The first Document to compare.</param>
            <param name="right">The second Document to compare.</param>
            <returns>true if the Documents are equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Document.op_Inequality(ADMS.API.Entities.Document,ADMS.API.Entities.Document)">
            <summary>
            Determines whether two Document instances are not equal.
            </summary>
            <param name="left">The first Document to compare.</param>
            <param name="right">The second Document to compare.</param>
            <returns>true if the Documents are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Document.op_LessThan(ADMS.API.Entities.Document,ADMS.API.Entities.Document)">
            <summary>
            Determines whether one Document precedes another in the ordering.
            </summary>
            <param name="left">The first Document to compare.</param>
            <param name="right">The second Document to compare.</param>
            <returns>true if the left Document precedes the right Document; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Document.op_LessThanOrEqual(ADMS.API.Entities.Document,ADMS.API.Entities.Document)">
            <summary>
            Determines whether one Document precedes or is equal to another in the ordering.
            </summary>
            <param name="left">The first Document to compare.</param>
            <param name="right">The second Document to compare.</param>
            <returns>true if the left Document precedes or equals the right Document; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Document.op_GreaterThan(ADMS.API.Entities.Document,ADMS.API.Entities.Document)">
            <summary>
            Determines whether one Document follows another in the ordering.
            </summary>
            <param name="left">The first Document to compare.</param>
            <param name="right">The second Document to compare.</param>
            <returns>true if the left Document follows the right Document; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Document.op_GreaterThanOrEqual(ADMS.API.Entities.Document,ADMS.API.Entities.Document)">
            <summary>
            Determines whether one Document follows or is equal to another in the ordering.
            </summary>
            <param name="left">The first Document to compare.</param>
            <param name="right">The second Document to compare.</param>
            <returns>true if the left Document follows or equals the right Document; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Document.ToString">
            <summary>
            Returns a string representation of the Document.
            </summary>
            <returns>A string that represents the current Document.</returns>
            <remarks>
            The string representation includes key identifying information about the document,
            which is useful for debugging, logging, and display purposes.
            </remarks>
            <example>
            <code>
            var document = new Document 
            { 
                Id = Guid.NewGuid(),
                FileName = "Contract", 
                Extension = "pdf",
                FileSize = 1024576,
                IsDeleted = false
            };
            
            Console.WriteLine(document);
            // Output: "Document: Contract.pdf (1.0 MB) - Active"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Document.IsAvailableForEditing">
            <summary>
            Determines whether this document is available for editing.
            </summary>
            <returns>true if the document can be edited; otherwise, false.</returns>
            <remarks>
            This method checks business rules to determine if the document can be edited,
            considering checkout status and deletion state.
            </remarks>
            <example>
            <code>
            if (document.IsAvailableForEditing())
            {
                // Allow edit operations
            }
            else
            {
                // Show appropriate message to user
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Document.GetDocumentStatistics">
            <summary>
            Gets usage statistics for this document.
            </summary>
            <returns>A dictionary containing document statistics.</returns>
            <remarks>
            This method provides insights into the document's usage patterns and history
            for reporting and analysis purposes.
            </remarks>
            <example>
            <code>
            var stats = document.GetDocumentStatistics();
            Console.WriteLine($"File size: {stats["FileSize"]}");
            Console.WriteLine($"Total activities: {stats["TotalActivities"]}");
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Document.GetNextRevisionNumber">
            <summary>
            Creates the next revision number for this document.
            </summary>
            <returns>The next sequential revision number.</returns>
            <remarks>
            This method calculates the next revision number based on existing revisions,
            ensuring sequential numbering without gaps.
            </remarks>
            <example>
            <code>
            var nextRevision = new Revision
            {
                DocumentId = document.Id,
                RevisionNumber = document.GetNextRevisionNumber(),
                CreationDate = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Document.GetMostRecentActivity">
            <summary>
            Gets the most recent activity performed on this document.
            </summary>
            <returns>The most recent DocumentActivityUser, or null if no activities exist.</returns>
            <remarks>
            This method provides access to the most recent activity for user interface
            display and business logic purposes.
            </remarks>
            <example>
            <code>
            var lastActivity = document.GetMostRecentActivity();
            if (lastActivity != null)
            {
                Console.WriteLine($"Last activity: {lastActivity.DocumentActivity?.Activity} " +
                                 $"by {lastActivity.User?.Name} at {lastActivity.CreatedAt}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Document.GetActivitiesByType(System.String)">
            <summary>
            Gets activities of a specific type performed on this document.
            </summary>
            <param name="activityType">The activity type to filter by.</param>
            <returns>A collection of matching activities.</returns>
            <remarks>
            This method enables filtering activities by type for specific analysis
            and reporting purposes.
            </remarks>
            <example>
            <code>
            var creationActivities = document.GetActivitiesByType("CREATED");
            var saveActivities = document.GetActivitiesByType("SAVED");
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Document.IsValidFileExtension">
            <summary>
            Validates the file extension against allowed types.
            </summary>
            <returns>true if the extension is allowed; otherwise, false.</returns>
            <remarks>
            This method validates the document's extension against the system's allowed
            file types for security and compliance purposes.
            </remarks>
            <example>
            <code>
            if (document.IsValidFileExtension())
            {
                // Extension is allowed
            }
            else
            {
                // Extension is not permitted
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Document.Validate">
            <summary>
            Validates the current Document instance against business rules.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <remarks>
            This method performs comprehensive validation including business rule compliance,
            file metadata validation, and security checks.
            </remarks>
            <example>
            <code>
            var validationResults = document.Validate();
            if (validationResults.Any())
            {
                foreach (var error in validationResults)
                {
                    Console.WriteLine($"Validation Error: {error.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Entities.DocumentActivity">
            <summary>
            Represents an activity that can be performed on a document in the ADMS legal document management system.
            </summary>
            <remarks>
            The DocumentActivity entity serves as a lookup table for the standardized activities that can be
            performed on documents within the legal document management system. This entity is critical for
            maintaining comprehensive audit trails and ensuring consistent activity classification across all
            document operations.
            
            <para><strong>Key Characteristics:</strong></para>
            <list type="bullet">
            <item><strong>Static Reference Data:</strong> Contains predefined activity types seeded from database</item>
            <item><strong>Document Operations Focus:</strong> Specializes in document lifecycle and version control operations</item>
            <item><strong>Audit Trail Foundation:</strong> Central classification system for document activities</item>
            <item><strong>Business Rule Enforcement:</strong> Ensures only valid document activities are recorded</item>
            <item><strong>Legal Compliance:</strong> Supports comprehensive audit requirements</item>
            <item><strong>Version Control Integration:</strong> Supports document check-in/check-out workflows</item>
            </list>
            
            <para><strong>Seeded Activities:</strong></para>
            The following document activities are seeded in AdmsContext.SeedDocumentActivities:
            <list type="bullet">
            <item><strong>CHECKED IN:</strong> Document checked into version control system</item>
            <item><strong>CHECKED OUT:</strong> Document checked out for editing</item>
            <item><strong>CREATED:</strong> Initial document creation</item>
            <item><strong>DELETED:</strong> Document marked for deletion (soft delete)</item>
            <item><strong>RESTORED:</strong> Deleted document restored to active status</item>
            <item><strong>SAVED:</strong> Document saved with changes</item>
            </list>
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key: GUID with identity generation</item>
            <item>Activity constraint: StringLength(50) with required validation</item>
            <item>Seeded data: Six standard document lifecycle activities</item>
            <item>Relationships: One-to-many with DocumentActivityUser for audit trails</item>
            </list>
            
            <para><strong>Document Lifecycle Support:</strong></para>
            <list type="bullet">
            <item><strong>Creation Operations:</strong> CREATED for new document establishment</item>
            <item><strong>Version Control Operations:</strong> CHECKED IN/CHECKED OUT for document custody</item>
            <item><strong>Modification Operations:</strong> SAVED for document content changes</item>
            <item><strong>Lifecycle Operations:</strong> DELETED/RESTORED for document state management</item>
            </list>
            
            <para><strong>Legal Compliance Support:</strong></para>
            <list type="bullet">
            <item>Standardized activity classification for legal audit requirements</item>
            <item>Immutable reference data preserving audit trail integrity</item>
            <item>Complete user attribution through DocumentActivityUser associations</item>
            <item>Support for regulatory reporting and compliance audits</item>
            <item>Document custody tracking through check-in/check-out operations</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Activity names must match DocumentActivityValidationHelper.AllowedActivities</item>
            <item>Activities are standardized and system-defined (not user-created)</item>
            <item>Each activity can be associated with multiple users and documents</item>
            <item>Activity names are case-insensitive but stored in uppercase</item>
            <item>Check-out activities should have corresponding check-in activities</item>
            </list>
            
            <para><strong>Entity Framework Integration:</strong></para>
            The entity is configured in AdmsContext with:
            <list type="bullet">
            <item>Seeded data for all standard document lifecycle activities</item>
            <item>Required relationships to DocumentActivityUser junction entity</item>
            <item>Standard cascade delete behavior for referential integrity</item>
            <item>Performance optimization for frequent lookup operations</item>
            </list>
            
            <para><strong>Version Control Integration:</strong></para>
            The DocumentActivity entity supports sophisticated version control workflows through
            check-in/check-out operations, enabling proper document custody tracking and preventing
            simultaneous editing conflicts in legal document management scenarios.
            </remarks>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivity.Id">
            <summary>
            Gets or sets the unique identifier for the document activity.
            </summary>
            <remarks>
            This GUID serves as the primary key and is automatically generated when the activity is created.
            For seeded activities, specific GUIDs are used to ensure consistency across deployments and
            enable reliable reference in business logic and reporting.
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key with identity generation</item>
            <item>Non-nullable and required for all operations</item>
            <item>Used as foreign key in DocumentActivityUser relationship table</item>
            <item>Seeded with specific GUIDs for standard document activities</item>
            </list>
            
            <para><strong>Seeded Activity IDs:</strong></para>
            <list type="bullet">
            <item>CHECKED IN: 20000000-0000-0000-0000-000000000001</item>
            <item>CHECKED OUT: 20000000-0000-0000-0000-000000000002</item>
            <item>CREATED: 20000000-0000-0000-0000-000000000003</item>
            <item>DELETED: 20000000-0000-0000-0000-000000000004</item>
            <item>RESTORED: 20000000-0000-0000-0000-000000000005</item>
            <item>SAVED: 20000000-0000-0000-0000-000000000006</item>
            </list>
            
            <para><strong>Usage Considerations:</strong></para>
            The ID remains constant throughout the activity's lifecycle and is used for all
            audit trail associations, business logic references, and reporting operations.
            </remarks>
            <example>
            <code>
            var activity = new DocumentActivity 
            { 
                Activity = "CUSTOM_DOCUMENT_ACTIVITY"
            };
            // ID will be automatically generated when saved to database
            
            // Accessing seeded activity
            var createdActivityId = Guid.Parse("20000000-0000-0000-0000-000000000003");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivity.Activity">
            <summary>
            Gets or sets the name or description of the document activity.
            </summary>
            <remarks>
            The activity name serves as the primary identifier and classifier for document operations.
            This field must conform to the standardized activity names defined in 
            DocumentActivityValidationHelper.AllowedActivities to ensure consistency across the system.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Required field - cannot be null or empty</item>
            <item>Maximum length: 50 characters (database constraint)</item>
            <item>Minimum length: 2 characters (business rule)</item>
            <item>Must be one of the allowed activities from DocumentActivityValidationHelper</item>
            <item>Must contain only letters, numbers, and spaces</item>
            <item>Must contain at least one letter</item>
            <item>Cannot use reserved activity names</item>
            </list>
            
            <para><strong>Standard Activities:</strong></para>
            <list type="bullet">
            <item><strong>CHECKED IN:</strong> Document checked into version control</item>
            <item><strong>CHECKED OUT:</strong> Document checked out for editing</item>
            <item><strong>CREATED:</strong> Document creation activity</item>
            <item><strong>DELETED:</strong> Document deletion activity</item>
            <item><strong>RESTORED:</strong> Document restoration activity</item>
            <item><strong>SAVED:</strong> Document save activity</item>
            </list>
            
            <para><strong>Business Context:</strong></para>
            Activity names are used throughout the system for:
            <list type="bullet">
            <item>Document lifecycle classification and reporting</item>
            <item>Version control workflow management</item>
            <item>Business rule enforcement and workflow control</item>
            <item>User interface display and activity filtering</item>
            <item>Legal compliance reporting and analysis</item>
            <item>Audit trail generation and document operation tracking</item>
            </list>
            
            <para><strong>Validation Integration:</strong></para>
            Activity names are validated using DocumentActivityValidationHelper to ensure
            they conform to business rules and legal compliance requirements.
            </remarks>
            <example>
            <code>
            // Standard seeded activities
            var checkedInActivity = new DocumentActivity { Activity = "CHECKED IN" };
            var checkedOutActivity = new DocumentActivity { Activity = "CHECKED OUT" };
            var createdActivity = new DocumentActivity { Activity = "CREATED" };
            var deletedActivity = new DocumentActivity { Activity = "DELETED" };
            var restoredActivity = new DocumentActivity { Activity = "RESTORED" };
            var savedActivity = new DocumentActivity { Activity = "SAVED" };
            
            // Validation example
            bool isValid = Common.DocumentActivityValidationHelper.IsActivityAllowed(createdActivity.Activity);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivity.DocumentActivityUsers">
            <summary>
            Gets or sets the collection of document activity user associations for this activity.
            </summary>
            <remarks>
            This collection maintains the one-to-many relationship between this document activity and
            the user associations. Each association represents a specific instance of this activity
            being performed by a user on a document.
            
            <para><strong>Document Activity Tracking:</strong></para>
            Each association in this collection provides:
            <list type="bullet">
            <item>User attribution - which user performed this activity</item>
            <item>Document context - which document the activity was performed on</item>
            <item>Temporal tracking - when the activity occurred</item>
            <item>Unique identification - composite key preventing duplicates</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured in AdmsContext.ConfigureDocumentActivityUser</item>
            <item>One-to-many relationship from activity to user associations</item>
            <item>Composite primary key includes ActivityId in the DocumentActivityUser entity</item>
            <item>Standard cascade behavior for referential integrity</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Activity-based document audit trail analysis</item>
            <item>User activity reporting and monitoring</item>
            <item>Document lifecycle tracking</item>
            <item>Version control operation analysis</item>
            <item>Legal compliance and discovery support</item>
            </list>
            
            <para><strong>Performance Considerations:</strong></para>
            The virtual modifier enables lazy loading, but consider explicit loading or
            projections when working with multiple activities to avoid N+1 query issues.
            For frequently accessed audit data, consider including related entities in queries.
            </remarks>
            <example>
            <code>
            // Accessing users who performed this activity
            foreach (var activityUser in documentActivity.DocumentActivityUsers)
            {
                Console.WriteLine($"User {activityUser.User?.Name} performed {documentActivity.Activity} " +
                                 $"on document {activityUser.Document?.FileName} at {activityUser.CreatedAt}");
            }
            
            // Finding all users who performed CREATED activity
            var createdActivity = activities.FirstOrDefault(a => a.Activity == "CREATED");
            var creators = createdActivity?.DocumentActivityUsers
                .Select(au => au.User)
                .Distinct();
            
            // Activity usage statistics
            var usageCount = documentActivity.DocumentActivityUsers.Count;
            var uniqueUsers = documentActivity.DocumentActivityUsers
                .Select(au => au.UserId)
                .Distinct()
                .Count();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivity.HasUserAssociations">
            <summary>
            Gets a value indicating whether this activity has any recorded user associations.
            </summary>
            <remarks>
            This property is useful for determining activity usage and ensuring that
            activities are actually being used in the system. Activities without associations
            may indicate unused system features or configuration issues.
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Activity usage analysis and reporting</item>
            <item>System configuration validation</item>
            <item>Feature utilization monitoring</item>
            <item>Data cleanup and maintenance operations</item>
            </list>
            
            <para><strong>Performance Note:</strong></para>
            This property triggers database queries to count related entities. Consider using
            explicit loading or projections when working with multiple activities to avoid N+1 queries.
            </remarks>
            <example>
            <code>
            if (!documentActivity.HasUserAssociations)
            {
                logger.LogInformation($"Activity {documentActivity.Activity} has no user associations");
            }
            
            // Finding unused activities
            var unusedActivities = activities.Where(a => !a.HasUserAssociations).ToList();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivity.UsageCount">
            <summary>
            Gets the total count of user associations for this activity.
            </summary>
            <remarks>
            This computed property provides insight into the frequency of use for this activity
            type, useful for activity monitoring, usage analytics, and system optimization.
            
            <para><strong>Performance Note:</strong></para>
            This property triggers database queries to count related entities. Consider using
            explicit loading or projections when working with multiple activities to avoid N+1 queries.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Activity {documentActivity.Activity} has been used {documentActivity.UsageCount} times");
            
            // Finding most used activities
            var mostUsedActivities = activities
                .OrderByDescending(a => a.UsageCount)
                .Take(10);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivity.UniqueUserCount">
            <summary>
            Gets the count of unique users who have performed this activity.
            </summary>
            <remarks>
            This computed property provides insight into the breadth of user engagement
            with this activity type, useful for user adoption analysis and training needs assessment.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Activity {documentActivity.Activity} has been performed by {documentActivity.UniqueUserCount} different users");
            
            // Analyzing user engagement
            var engagementMetric = documentActivity.UniqueUserCount / (double)documentActivity.UsageCount;
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivity.UniqueDocumentCount">
            <summary>
            Gets the count of unique documents this activity has been performed on.
            </summary>
            <remarks>
            This computed property provides insight into the breadth of document engagement
            with this activity type, useful for document lifecycle analysis and system usage patterns.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Activity {documentActivity.Activity} has been performed on {documentActivity.UniqueDocumentCount} different documents");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivity.IsStandardActivity">
            <summary>
            Gets a value indicating whether this activity is one of the standard seeded activities.
            </summary>
            <remarks>
            This property identifies whether the activity is one of the standard system-defined
            activities or a custom activity. Standard activities are those seeded in the database
            and validated by DocumentActivityValidationHelper.
            </remarks>
            <example>
            <code>
            if (documentActivity.IsStandardActivity)
            {
                // Apply standard business rules
            }
            else
            {
                // Handle custom activity logic
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivity.NormalizedActivity">
            <summary>
            Gets the normalized version of the activity name.
            </summary>
            <remarks>
            This property provides a normalized version of the activity name following
            the normalization rules from DocumentActivityValidationHelper for consistent
            comparison and storage operations.
            </remarks>
            <example>
            <code>
            var normalized = documentActivity.NormalizedActivity; // Always uppercase, trimmed
            bool areEqual = documentActivity.NormalizedActivity == other.NormalizedActivity;
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivity.ActivityCategory">
            <summary>
            Gets the activity category for classification purposes.
            </summary>
            <remarks>
            This property categorizes the activity based on its type for reporting and analysis purposes.
            </remarks>
            <example>
            <code>
            var category = documentActivity.ActivityCategory;
            // Returns: "Lifecycle", "Version Control", or "Unknown"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.Equals(ADMS.API.Entities.DocumentActivity)">
            <summary>
            Determines whether the specified DocumentActivity is equal to the current DocumentActivity.
            </summary>
            <param name="other">The DocumentActivity to compare with the current DocumentActivity.</param>
            <returns>true if the specified DocumentActivity is equal to the current DocumentActivity; otherwise, false.</returns>
            <remarks>
            Equality is determined by comparing the Id property, as each activity has a unique identifier.
            This follows Entity Framework best practices for entity equality comparison.
            </remarks>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current DocumentActivity.
            </summary>
            <param name="obj">The object to compare with the current DocumentActivity.</param>
            <returns>true if the specified object is equal to the current DocumentActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current DocumentActivity.</returns>
            <remarks>
            The hash code is based on the Id property to ensure consistent hashing behavior
            that aligns with the equality implementation.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ADMS.API.Entities.DocumentActivity.CompareTo(ADMS.API.Entities.DocumentActivity)" -->
        <member name="M:ADMS.API.Entities.DocumentActivity.op_Equality(ADMS.API.Entities.DocumentActivity,ADMS.API.Entities.DocumentActivity)">
            <summary>
            Determines whether two DocumentActivity instances are equal.
            </summary>
            <param name="left">The first DocumentActivity to compare.</param>
            <param name="right">The second DocumentActivity to compare.</param>
            <returns>true if the DocumentActivities are equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.op_Inequality(ADMS.API.Entities.DocumentActivity,ADMS.API.Entities.DocumentActivity)">
            <summary>
            Determines whether two DocumentActivity instances are not equal.
            </summary>
            <param name="left">The first DocumentActivity to compare.</param>
            <param name="right">The second DocumentActivity to compare.</param>
            <returns>true if the DocumentActivities are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.op_LessThan(ADMS.API.Entities.DocumentActivity,ADMS.API.Entities.DocumentActivity)">
            <summary>
            Determines whether one DocumentActivity precedes another in the ordering.
            </summary>
            <param name="left">The first DocumentActivity to compare.</param>
            <param name="right">The second DocumentActivity to compare.</param>
            <returns>true if the left DocumentActivity precedes the right DocumentActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.op_LessThanOrEqual(ADMS.API.Entities.DocumentActivity,ADMS.API.Entities.DocumentActivity)">
            <summary>
            Determines whether one DocumentActivity precedes or is equal to another in the ordering.
            </summary>
            <param name="left">The first DocumentActivity to compare.</param>
            <param name="right">The second DocumentActivity to compare.</param>
            <returns>true if the left DocumentActivity precedes or equals the right DocumentActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.op_GreaterThan(ADMS.API.Entities.DocumentActivity,ADMS.API.Entities.DocumentActivity)">
            <summary>
            Determines whether one DocumentActivity follows another in the ordering.
            </summary>
            <param name="left">The first DocumentActivity to compare.</param>
            <param name="right">The second DocumentActivity to compare.</param>
            <returns>true if the left DocumentActivity follows the right DocumentActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.op_GreaterThanOrEqual(ADMS.API.Entities.DocumentActivity,ADMS.API.Entities.DocumentActivity)">
            <summary>
            Determines whether one DocumentActivity follows or is equal to another in the ordering.
            </summary>
            <param name="left">The first DocumentActivity to compare.</param>
            <param name="right">The second DocumentActivity to compare.</param>
            <returns>true if the left DocumentActivity follows or equals the right DocumentActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.ToString">
            <summary>
            Returns a string representation of the DocumentActivity.
            </summary>
            <returns>A string that represents the current DocumentActivity.</returns>
            <remarks>
            The string representation includes key identifying information about the activity,
            which is useful for debugging, logging, and display purposes.
            </remarks>
            <example>
            <code>
            var activity = new DocumentActivity 
            { 
                Id = Guid.Parse("20000000-0000-0000-0000-000000000003"), 
                Activity = "CREATED"
            };
            
            Console.WriteLine(activity);
            // Output: "DocumentActivity: CREATED (20000000-0000-0000-0000-000000000003)"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.IsCreationActivity">
            <summary>
            Determines whether this activity represents a creation operation.
            </summary>
            <returns>true if this is a creation activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify creation activities for
            business rule enforcement and audit trail analysis.
            </remarks>
            <example>
            <code>
            if (documentActivity.IsCreationActivity())
            {
                // Apply creation-specific business rules
                Console.WriteLine("This is a document creation activity");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.IsSaveActivity">
            <summary>
            Determines whether this activity represents a save operation.
            </summary>
            <returns>true if this is a save activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify save activities for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (documentActivity.IsSaveActivity())
            {
                // Apply save-specific business rules
                auditLogger.LogSave(documentActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.IsDeletionActivity">
            <summary>
            Determines whether this activity represents a deletion operation.
            </summary>
            <returns>true if this is a deletion activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify deletion activities for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (documentActivity.IsDeletionActivity())
            {
                // Apply deletion-specific business rules
                auditLogger.LogDeletion(documentActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.IsRestorationActivity">
            <summary>
            Determines whether this activity represents a restoration operation.
            </summary>
            <returns>true if this is a restoration activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify restoration activities for
            audit trail analysis and recovery operations.
            </remarks>
            <example>
            <code>
            if (documentActivity.IsRestorationActivity())
            {
                // Apply restoration-specific business rules
                recoveryLogger.LogRestoration(documentActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.IsCheckInActivity">
            <summary>
            Determines whether this activity represents a check-in operation.
            </summary>
            <returns>true if this is a check-in activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify check-in activities for
            version control management and document custody tracking.
            </remarks>
            <example>
            <code>
            if (documentActivity.IsCheckInActivity())
            {
                // Apply check-in-specific business rules
                versionControlService.ProcessCheckIn(documentActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.IsCheckOutActivity">
            <summary>
            Determines whether this activity represents a check-out operation.
            </summary>
            <returns>true if this is a check-out activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify check-out activities for
            version control management and document custody tracking.
            </remarks>
            <example>
            <code>
            if (documentActivity.IsCheckOutActivity())
            {
                // Apply check-out-specific business rules
                versionControlService.ProcessCheckOut(documentActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.IsVersionControlActivity">
            <summary>
            Determines whether this activity represents a version control operation (check-in or check-out).
            </summary>
            <returns>true if this is a version control activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify any version control activity
            for business rule enforcement and workflow analysis.
            </remarks>
            <example>
            <code>
            if (documentActivity.IsVersionControlActivity())
            {
                // Apply version control-specific business rules
                versionControlService.ProcessActivity(documentActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.GetSeededActivityId(System.String)">
            <summary>
            Gets the seeded GUID for a specific document activity name.
            </summary>
            <param name="activityName">The activity name to get the GUID for.</param>
            <returns>The seeded GUID if found; otherwise, Guid.Empty.</returns>
            <remarks>
            This method returns the specific GUIDs used in database seeding for standard activities,
            useful for business logic that needs to reference specific activity types.
            </remarks>
            <example>
            <code>
            var createdActivityId = DocumentActivity.GetSeededActivityId("CREATED");
            // Returns: 20000000-0000-0000-0000-000000000003
            
            var checkedInActivityId = DocumentActivity.GetSeededActivityId("CHECKED IN");
            // Returns: 20000000-0000-0000-0000-000000000001
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.GetUsageStatistics">
            <summary>
            Gets usage statistics for this activity.
            </summary>
            <returns>A dictionary containing usage statistics.</returns>
            <remarks>
            This method provides insights into the usage patterns and statistics of this activity
            for reporting and analysis purposes.
            </remarks>
            <example>
            <code>
            var stats = documentActivity.GetUsageStatistics();
            Console.WriteLine($"Total usage: {stats["TotalUsage"]}");
            Console.WriteLine($"Unique users: {stats["UniqueUsers"]}");
            Console.WriteLine($"Unique documents: {stats["UniqueDocuments"]}");
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivity.Validate">
            <summary>
            Validates the current DocumentActivity instance against business rules.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <remarks>
            This method performs comprehensive validation using DocumentActivityValidationHelper
            including activity name validation, length constraints, and business rule compliance.
            </remarks>
            <example>
            <code>
            var validationResults = documentActivity.Validate();
            if (validationResults.Any())
            {
                foreach (var error in validationResults)
                {
                    Console.WriteLine($"Validation Error: {error.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Entities.DocumentActivityUser">
            <summary>
            Represents the association between a document, a document activity, and a user in the ADMS legal document management system.
            </summary>
            <remarks>
            The DocumentActivityUser entity serves as a junction table implementing the many-to-many relationship
            between documents, document activities, and users. This entity is critical for maintaining comprehensive
            audit trails of all document-related operations within the legal document management system.
            
            <para><strong>Key Characteristics:</strong></para>
            <list type="bullet">
            <item><strong>Audit Trail Foundation:</strong> Central component of document activity tracking</item>
            <item><strong>Composite Primary Key:</strong> Ensures uniqueness while allowing temporal tracking</item>
            <item><strong>User Attribution:</strong> Links every document activity to a responsible user</item>
            <item><strong>Temporal Tracking:</strong> Maintains precise timestamps for all activities</item>
            <item><strong>Legal Compliance:</strong> Supports comprehensive audit requirements</item>
            </list>
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Composite primary key: DocumentId + DocumentActivityId + UserId + CreatedAt</item>
            <item>All foreign key relationships are required</item>
            <item>Standard cascade behavior for referential integrity</item>
            <item>Indexed on CreatedAt for temporal queries</item>
            </list>
            
            <para><strong>Document Activities Supported:</strong></para>
            This entity tracks various document lifecycle activities:
            <list type="bullet">
            <item><strong>CREATED:</strong> Document creation activity</item>
            <item><strong>SAVED:</strong> Document save activity</item>
            <item><strong>DELETED:</strong> Document deletion activity</item>
            <item><strong>RESTORED:</strong> Document restoration activity</item>
            <item><strong>CHECKED IN:</strong> Document check-in activity</item>
            <item><strong>CHECKED OUT:</strong> Document check-out activity</item>
            </list>
            
            <para><strong>Audit Trail Functionality:</strong></para>
            This entity enables comprehensive tracking of document activities:
            <list type="bullet">
            <item><strong>Who:</strong> Which user performed the document activity</item>
            <item><strong>What:</strong> What type of activity was performed (CREATED/SAVED/etc.)</item>
            <item><strong>Where:</strong> Which document the activity was performed on</item>
            <item><strong>When:</strong> Precise timestamp of the activity</item>
            </list>
            
            <para><strong>Legal Compliance Support:</strong></para>
            <list type="bullet">
            <item>Complete user attribution for all document operations</item>
            <item>Temporal audit trails for legal discovery and compliance</item>
            <item>Immutable record of document lifecycle activities</item>
            <item>Support for regulatory reporting and audit requirements</item>
            <item>Check-in/check-out tracking for document custody</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Every document activity must be attributed to a user</item>
            <item>Multiple activities of the same type can occur with different timestamps</item>
            <item>CreatedAt timestamp must be within reasonable bounds</item>
            <item>All foreign key relationships must reference valid entities</item>
            <item>Check-out activities should have corresponding check-in activities</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            The entity is configured in AdmsContext.ConfigureDocumentActivityUser with:
            <list type="bullet">
            <item>Composite key including all four core properties</item>
            <item>Required relationships to Document, DocumentActivity, and User</item>
            <item>Standard cascade behaviors for referential integrity</item>
            <item>Performance indexes on commonly queried fields</item>
            </list>
            </remarks>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivityUser.DocumentId">
            <summary>
            Gets or sets the unique identifier of the document.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the document that this activity
            is associated with. It forms part of the composite primary key and is required for all
            document activity user associations.
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to Document entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>Standard cascade behavior for referential integrity</item>
            </list>
            
            <para><strong>Business Context:</strong></para>
            <list type="bullet">
            <item>Represents the document on which the activity was performed</item>
            <item>Links activity to specific legal document and matter</item>
            <item>Enables document-scoped activity queries</item>
            <item>Supports document-level audit trail aggregation</item>
            </list>
            
            <para><strong>Legal Significance:</strong></para>
            The document ID is crucial for legal document management as it establishes which
            specific document was involved in the activity, supporting case management and
            legal compliance requirements for document operation tracking.
            </remarks>
            <example>
            <code>
            var activityUser = new DocumentActivityUser
            {
                DocumentId = legalDocument.Id,  // Must reference valid document
                DocumentActivityId = activityId,
                UserId = performingUser.Id,
                CreatedAt = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivityUser.DocumentActivityId">
            <summary>
            Gets or sets the unique identifier of the document activity.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the document activity type
            that was performed. It forms part of the composite primary key and must reference
            a valid document activity from the seeded data.
            
            <para><strong>Activity Types:</strong></para>
            Must reference one of the seeded document activities:
            <list type="bullet">
            <item><strong>CREATED:</strong> Document creation activity</item>
            <item><strong>SAVED:</strong> Document save activity</item>
            <item><strong>DELETED:</strong> Document deletion activity</item>
            <item><strong>RESTORED:</strong> Document restoration activity</item>
            <item><strong>CHECKED IN:</strong> Document check-in activity</item>
            <item><strong>CHECKED OUT:</strong> Document check-out activity</item>
            </list>
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to DocumentActivity entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>Standard cascade behavior for referential integrity</item>
            </list>
            
            <para><strong>Validation Integration:</strong></para>
            The DocumentActivityId is validated using DocumentActivityValidationHelper
            to ensure it references a valid, allowed activity type.
            </remarks>
            <example>
            <code>
            // Linking to a CREATED activity (seeded ID: 20000000-0000-0000-0000-000000000003)
            var createdActivityId = Guid.Parse("20000000-0000-0000-0000-000000000003");
            var activityUser = new DocumentActivityUser
            {
                DocumentActivityId = createdActivityId,  // Must be valid activity
                // ... other properties
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivityUser.UserId">
            <summary>
            Gets or sets the unique identifier of the user who performed the activity.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the user who performed
            the document activity. It forms part of the composite primary key and provides
            essential user attribution for audit trail purposes.
            
            <para><strong>User Attribution:</strong></para>
            <list type="bullet">
            <item>Links activity to responsible user for accountability</item>
            <item>Enables user-scoped document activity reporting</item>
            <item>Supports legal compliance and audit requirements</item>
            <item>Facilitates user activity analytics and monitoring</item>
            </list>
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to User entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>Standard cascade behavior for referential integrity</item>
            </list>
            
            <para><strong>Legal Significance:</strong></para>
            User attribution is critical for:
            <list type="bullet">
            <item>Legal discovery and compliance audits</item>
            <item>Professional responsibility tracking for document operations</item>
            <item>Accountability in legal document management</item>
            <item>Evidence of who performed specific document activities</item>
            </list>
            </remarks>
            <example>
            <code>
            // Attributing document activity to a specific user
            var activityUser = new DocumentActivityUser
            {
                UserId = currentUser.Id,  // Must reference valid user
                DocumentId = document.Id,
                DocumentActivityId = activityId,
                CreatedAt = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivityUser.CreatedAt">
            <summary>
            Gets or sets the date and time when this entry was created (in UTC).
            </summary>
            <remarks>
            This property maintains the precise timestamp of when the document activity occurred.
            It forms part of the composite primary key, enabling multiple activities of the same
            type with different timestamps while maintaining uniqueness.
            
            <para><strong>Temporal Tracking:</strong></para>
            <list type="bullet">
            <item>Provides precise timing for document activity audit trails</item>
            <item>Enables temporal analysis of document lifecycle patterns</item>
            <item>Supports legal timeline reconstruction for case management</item>
            <item>Facilitates workflow and process analysis</item>
            </list>
            
            <para><strong>Date Requirements:</strong></para>
            <list type="bullet">
            <item>Must be stored in UTC format for consistency</item>
            <item>Cannot be earlier than system minimum date</item>
            <item>Cannot be in the future (with tolerance for clock skew)</item>
            <item>Forms part of composite primary key for uniqueness</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Automatically set to current UTC time when not specified</item>
            <item>Should reflect the actual time the document activity occurred</item>
            <item>Used for chronological ordering in audit reports</item>
            <item>Critical for legal compliance and document activity tracking</item>
            </list>
            
            <para><strong>Validation:</strong></para>
            The CreatedAt timestamp is validated using RevisionValidationHelper date validation
            methods to ensure it falls within acceptable ranges for legal document management.
            </remarks>
            <example>
            <code>
            var activityUser = new DocumentActivityUser
            {
                CreatedAt = DateTime.UtcNow,  // Always use UTC
                // ... other properties
            };
            
            // For historical data import
            var historicalActivity = new DocumentActivityUser
            {
                CreatedAt = specificUtcDateTime,  // Specific historical timestamp
                // ... other properties
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivityUser.Document">
            <summary>
            Gets or sets the document associated with this activity.
            </summary>
            <remarks>
            This navigation property provides access to the document on which the activity was
            performed. The relationship is established through the DocumentId foreign key and
            enables rich querying and navigation within Entity Framework.
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses DocumentId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>Standard cascade behavior for referential integrity</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Accessing document metadata from activity context</item>
            <item>Document-level activity operations and reporting</item>
            <item>Audit trail reporting with document information</item>
            <item>Cross-document activity analysis</item>
            </list>
            
            <para><strong>Performance Considerations:</strong></para>
            The virtual modifier enables lazy loading, but consider explicit loading or
            projections when working with multiple activities to avoid N+1 query issues.
            </remarks>
            <example>
            <code>
            // Accessing document information through activity
            var fileName = activityUser.Document?.FileName;
            var fileSize = activityUser.Document?.FileSize;
            
            // Using explicit loading to avoid N+1 queries
            await context.Entry(activityUser)
                .Reference(a => a.Document)
                .LoadAsync();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivityUser.DocumentActivity">
            <summary>
            Gets or sets the document activity associated with this user.
            </summary>
            <remarks>
            This navigation property provides access to the document activity type that was performed.
            The relationship is established through the DocumentActivityId foreign key and enables
            access to activity metadata such as the activity name and description.
            
            <para><strong>Activity Information Access:</strong></para>
            Provides access to:
            <list type="bullet">
            <item>Activity name (CREATED, SAVED, DELETED, etc.)</item>
            <item>Activity metadata and configuration</item>
            <item>Activity validation rules and constraints</item>
            <item>Cross-activity analysis and reporting</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses DocumentActivityId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>Standard cascade behavior for referential integrity</item>
            </list>
            
            <para><strong>Business Logic Integration:</strong></para>
            <list type="bullet">
            <item>Activity-specific business rule enforcement</item>
            <item>Activity categorization and reporting</item>
            <item>Workflow and process analysis</item>
            <item>Activity-based authorization and permissions</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing activity type information
            var activityName = activityUser.DocumentActivity?.Activity;
            var isCreationActivity = activityName == "CREATED";
            
            // Activity-based filtering
            var saveActivities = activities
                .Where(a => a.DocumentActivity?.Activity == "SAVED");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivityUser.User">
            <summary>
            Gets or sets the user associated with this document activity.
            </summary>
            <remarks>
            This navigation property provides access to the user who performed the document activity.
            The relationship is established through the UserId foreign key and enables comprehensive
            user-based reporting and analysis of document activities.
            
            <para><strong>User Information Access:</strong></para>
            Provides access to:
            <list type="bullet">
            <item>User identification and contact information</item>
            <item>User activity patterns and behavior</item>
            <item>Professional attribution for legal compliance</item>
            <item>User-based reporting and analytics</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses UserId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>Standard cascade behavior for referential integrity</item>
            </list>
            
            <para><strong>Legal and Compliance Support:</strong></para>
            <list type="bullet">
            <item>User accountability for document activities</item>
            <item>Professional responsibility tracking</item>
            <item>Legal discovery and audit trail support</item>
            <item>Compliance reporting and analysis</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing user information through activity
            var userName = activityUser.User?.Name;
            var userActivities = activityUser.User?.DocumentActivityUsers;
            
            // User-based activity analysis
            var userCreationCount = user.DocumentActivityUsers
                .Count(au => au.DocumentActivity?.Activity == "CREATED");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivityUser.HasValidReferences">
            <summary>
            Gets a value indicating whether this activity record has valid foreign key references.
            </summary>
            <remarks>
            This computed property validates that all required foreign key properties contain
            valid (non-empty) GUID values, ensuring referential integrity.
            
            <para><strong>Validation Checks:</strong></para>
            <list type="bullet">
            <item>DocumentId is not Guid.Empty</item>
            <item>DocumentActivityId is not Guid.Empty</item>
            <item>UserId is not Guid.Empty</item>
            </list>
            </remarks>
            <example>
            <code>
            if (!activityUser.HasValidReferences)
            {
                throw new InvalidOperationException("Activity user has invalid foreign key references");
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.DocumentActivityUser.HasValidTimestamp">
            <summary>
            Gets a value indicating whether the CreatedAt timestamp is within reasonable bounds.
            </summary>
            <remarks>
            This computed property uses the RevisionValidationHelper to validate that the
            CreatedAt timestamp falls within acceptable date ranges for the system.
            </remarks>
            <example>
            <code>
            if (!activityUser.HasValidTimestamp)
            {
                logger.LogWarning($"Activity user {activityUser} has invalid timestamp: {activityUser.CreatedAt}");
            }
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ADMS.API.Entities.DocumentActivityUser.AgeDays" -->
        <member name="P:ADMS.API.Entities.DocumentActivityUser.ActivityDescription">
            <summary>
            Gets the formatted activity description for display purposes.
            </summary>
            <remarks>
            This computed property provides a human-readable description of the document activity
            including user attribution, activity type, and timestamp information.
            </remarks>
            <example>
            <code>
            Console.WriteLine(activityUser.ActivityDescription);
            // Output: "rbrown performed CREATED on document 'contract.pdf' at 2024-01-15 10:30 UTC"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.Equals(ADMS.API.Entities.DocumentActivityUser)">
            <summary>
            Determines whether the specified DocumentActivityUser is equal to the current DocumentActivityUser.
            </summary>
            <param name="other">The DocumentActivityUser to compare with the current DocumentActivityUser.</param>
            <returns>true if the specified DocumentActivityUser is equal to the current DocumentActivityUser; otherwise, false.</returns>
            <remarks>
            Equality is determined by comparing all four components of the composite primary key:
            DocumentId, DocumentActivityId, UserId, and CreatedAt. This follows Entity Framework
            best practices for entities with composite keys.
            </remarks>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current DocumentActivityUser.
            </summary>
            <param name="obj">The object to compare with the current DocumentActivityUser.</param>
            <returns>true if the specified object is equal to the current DocumentActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current DocumentActivityUser.</returns>
            <remarks>
            The hash code is computed from all four components of the composite primary key
            to ensure consistent hashing behavior that aligns with the equality implementation.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ADMS.API.Entities.DocumentActivityUser.CompareTo(ADMS.API.Entities.DocumentActivityUser)" -->
        <member name="M:ADMS.API.Entities.DocumentActivityUser.op_Equality(ADMS.API.Entities.DocumentActivityUser,ADMS.API.Entities.DocumentActivityUser)">
            <summary>
            Determines whether two DocumentActivityUser instances are equal.
            </summary>
            <param name="left">The first DocumentActivityUser to compare.</param>
            <param name="right">The second DocumentActivityUser to compare.</param>
            <returns>true if the DocumentActivityUsers are equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.op_Inequality(ADMS.API.Entities.DocumentActivityUser,ADMS.API.Entities.DocumentActivityUser)">
            <summary>
            Determines whether two DocumentActivityUser instances are not equal.
            </summary>
            <param name="left">The first DocumentActivityUser to compare.</param>
            <param name="right">The second DocumentActivityUser to compare.</param>
            <returns>true if the DocumentActivityUsers are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.op_LessThan(ADMS.API.Entities.DocumentActivityUser,ADMS.API.Entities.DocumentActivityUser)">
            <summary>
            Determines whether one DocumentActivityUser precedes another in the ordering.
            </summary>
            <param name="left">The first DocumentActivityUser to compare.</param>
            <param name="right">The second DocumentActivityUser to compare.</param>
            <returns>true if the left DocumentActivityUser precedes the right DocumentActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.op_LessThanOrEqual(ADMS.API.Entities.DocumentActivityUser,ADMS.API.Entities.DocumentActivityUser)">
            <summary>
            Determines whether one DocumentActivityUser precedes or is equal to another in the ordering.
            </summary>
            <param name="left">The first DocumentActivityUser to compare.</param>
            <param name="right">The second DocumentActivityUser to compare.</param>
            <returns>true if the left DocumentActivityUser precedes or equals the right DocumentActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.op_GreaterThan(ADMS.API.Entities.DocumentActivityUser,ADMS.API.Entities.DocumentActivityUser)">
            <summary>
            Determines whether one DocumentActivityUser follows another in the ordering.
            </summary>
            <param name="left">The first DocumentActivityUser to compare.</param>
            <param name="right">The second DocumentActivityUser to compare.</param>
            <returns>true if the left DocumentActivityUser follows the right DocumentActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.op_GreaterThanOrEqual(ADMS.API.Entities.DocumentActivityUser,ADMS.API.Entities.DocumentActivityUser)">
            <summary>
            Determines whether one DocumentActivityUser follows or is equal to another in the ordering.
            </summary>
            <param name="left">The first DocumentActivityUser to compare.</param>
            <param name="right">The second DocumentActivityUser to compare.</param>
            <returns>true if the left DocumentActivityUser follows or equals the right DocumentActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.ToString">
            <summary>
            Returns a string representation of the DocumentActivityUser.
            </summary>
            <returns>A string that represents the current DocumentActivityUser.</returns>
            <remarks>
            The string representation includes key identifying information about the activity,
            which is useful for debugging, logging, and audit trail display purposes.
            </remarks>
            <example>
            <code>
            var activityUser = new DocumentActivityUser
            {
                DocumentId = documentGuid,
                DocumentActivityId = activityGuid,
                UserId = userGuid,
                CreatedAt = DateTime.UtcNow
            };
            
            Console.WriteLine(activityUser);
            // Output: "User rbrown performed CREATED on Document 'contract.pdf' at 2024-01-15 10:30:00 UTC"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.IsCreationActivity">
            <summary>
            Determines whether this activity record represents a creation activity.
            </summary>
            <returns>true if this is a creation activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify creation activities without
            directly accessing the navigation property, which can help avoid lazy loading
            in performance-sensitive scenarios.
            </remarks>
            <example>
            <code>
            if (activityUser.IsCreationActivity())
            {
                // Handle creation-specific logic
                Console.WriteLine("This document was created by: " + activityUser.User?.Name);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.IsSaveActivity">
            <summary>
            Determines whether this activity record represents a save activity.
            </summary>
            <returns>true if this is a save activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify save activities for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (activityUser.IsSaveActivity())
            {
                // Handle save-specific logic
                Console.WriteLine("Document was saved by: " + activityUser.User?.Name);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.IsDeletionActivity">
            <summary>
            Determines whether this activity record represents a deletion activity.
            </summary>
            <returns>true if this is a deletion activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify deletion activities for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (activityUser.IsDeletionActivity())
            {
                // Handle deletion-specific logic
                auditLogger.LogDeletion(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.IsRestorationActivity">
            <summary>
            Determines whether this activity record represents a restoration activity.
            </summary>
            <returns>true if this is a restoration activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify restoration activities for
            audit trail analysis and recovery operations.
            </remarks>
            <example>
            <code>
            if (activityUser.IsRestorationActivity())
            {
                // Handle restoration-specific logic
                recoveryLogger.LogRestoration(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.IsCheckInActivity">
            <summary>
            Determines whether this activity record represents a check-in activity.
            </summary>
            <returns>true if this is a check-in activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify check-in activities for
            document custody tracking and version control management.
            </remarks>
            <example>
            <code>
            if (activityUser.IsCheckInActivity())
            {
                // Handle check-in-specific logic
                versionControlLogger.LogCheckIn(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.IsCheckOutActivity">
            <summary>
            Determines whether this activity record represents a check-out activity.
            </summary>
            <returns>true if this is a check-out activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify check-out activities for
            document custody tracking and version control management.
            </remarks>
            <example>
            <code>
            if (activityUser.IsCheckOutActivity())
            {
                // Handle check-out-specific logic
                versionControlLogger.LogCheckOut(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.IsRecent(System.Double)">
            <summary>
            Determines whether this activity occurred recently within the specified timeframe.
            </summary>
            <param name="withinHours">The number of hours to consider as "recent".</param>
            <returns>true if the activity occurred within the specified timeframe; otherwise, false.</returns>
            <remarks>
            This method is useful for identifying recent document activities for notifications,
            reporting, and real-time monitoring purposes.
            </remarks>
            <example>
            <code>
            // Check for activities in the last 24 hours
            if (activityUser.IsRecent(24))
            {
                notificationService.NotifyRecentActivity(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.GetSeededActivityId(System.String)">
            <summary>
            Gets the seeded GUID for a specific document activity name.
            </summary>
            <param name="activityName">The activity name to get the GUID for.</param>
            <returns>The seeded GUID if found; otherwise, Guid.Empty.</returns>
            <remarks>
            This method returns the specific GUIDs used in database seeding for standard document activities,
            useful for business logic that needs to reference specific activity types.
            </remarks>
            <example>
            <code>
            var createdActivityId = DocumentActivityUser.GetSeededActivityId("CREATED");
            // Returns: 20000000-0000-0000-0000-000000000003
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.DocumentActivityUser.Validate">
            <summary>
            Validates the current DocumentActivityUser instance against business rules.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <remarks>
            This method performs comprehensive validation using DocumentActivityValidationHelper
            including foreign key validation, timestamp validation, and activity appropriateness checking.
            </remarks>
            <example>
            <code>
            var validationResults = activityUser.Validate();
            if (validationResults.Any())
            {
                foreach (var error in validationResults)
                {
                    Console.WriteLine($"Validation Error: {error.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Entities.Matter">
            <summary>
            Represents a matter for digital document collection and management in the ADMS legal document management system.
            </summary>
            <remarks>
            The Matter entity serves as the primary organizational container for digital documents within the ADMS legal
            document management system. It functions as a digital filing cabinet that can represent either client-based
            or matter-specific document collections, making it particularly well-suited for small law firms and legal
            practitioners who need flexible document organization strategies.
            
            <para><strong>Key Characteristics:</strong></para>
            <list type="bullet">
            <item><strong>Document Collection:</strong> Central container for related digital documents</item>
            <item><strong>Client or Matter Based:</strong> Flexible organization supporting both client-specific and matter-specific groupings</item>
            <item><strong>Comprehensive Audit Trail:</strong> Full tracking of all matter-related activities</item>
            <item><strong>Document Transfer Support:</strong> Enables moving and copying documents between matters</item>
            <item><strong>Lifecycle Management:</strong> Supports archival, deletion, and restoration workflows</item>
            <item><strong>Legal Compliance:</strong> Maintains audit trails required for legal practice</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item><strong>Client-Based Collections:</strong> All documents for a specific client (e.g., "Smith Family Trust")</item>
            <item><strong>Matter-Specific Collections:</strong> Documents for a specific legal matter (e.g., "Smith v. Jones Litigation")</item>
            <item><strong>Project-Based Collections:</strong> Documents for legal projects (e.g., "Corporate Merger - ABC Corp")</item>
            <item><strong>Subject-Based Collections:</strong> Documents organized by legal subject matter</item>
            </list>
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key: GUID with identity generation</item>
            <item>Description constraint: StringLength(128) with required validation and uniqueness</item>
            <item>Status flags: IsArchived and IsDeleted for lifecycle management</item>
            <item>Temporal tracking: CreationDate in UTC for audit and ordering</item>
            <item>Seeded data: Multiple test matters with various states for development and testing</item>
            </list>
            
            <para><strong>Document Management Features:</strong></para>
            <list type="bullet">
            <item><strong>Document Association:</strong> One-to-many relationship with Document entities</item>
            <item><strong>Document Transfers:</strong> Support for moving/copying documents between matters</item>
            <item><strong>Document Organization:</strong> Logical grouping of related documents</item>
            <item><strong>Access Control:</strong> Foundation for document-level security and permissions</item>
            </list>
            
            <para><strong>Activity Tracking:</strong></para>
            The Matter entity maintains comprehensive audit trails through multiple relationship types:
            <list type="bullet">
            <item><strong>MatterActivityUsers:</strong> General matter lifecycle activities (CREATED, ARCHIVED, DELETED, etc.)</item>
            <item><strong>MatterDocumentActivityUsersFrom:</strong> Source-side document transfer tracking</item>
            <item><strong>MatterDocumentActivityUsersTo:</strong> Destination-side document transfer tracking</item>
            </list>
            
            <para><strong>Legal Compliance Support:</strong></para>
            <list type="bullet">
            <item>Complete audit trails for all matter-related operations</item>
            <item>Document custody tracking for legal discovery requirements</item>
            <item>User attribution for all activities within the matter</item>
            <item>Temporal consistency for legal timeline reconstruction</item>
            <item>Soft deletion with preservation of historical data</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Matter descriptions must be unique across the system</item>
            <item>Creation date is automatically set and cannot be modified</item>
            <item>Matters can be archived and unarchived as needed</item>
            <item>Deleted matters are soft-deleted to preserve audit trails</item>
            <item>All matter operations must be attributed to users for accountability</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            The entity is configured in AdmsContext with:
            <list type="bullet">
            <item>Required relationships to all related activity tracking entities</item>
            <item>Cascade delete restrictions to preserve audit trail integrity</item>
            <item>Performance optimization for document queries</item>
            <item>Seeded test data for development and testing purposes</item>
            </list>
            
            <para><strong>Small Law Firm Benefits:</strong></para>
            <list type="bullet">
            <item>Flexible organization supporting various practice areas</item>
            <item>Simple client-based organization for client-centric practices</item>
            <item>Matter-specific organization for complex litigation</item>
            <item>Comprehensive audit trails for professional compliance</item>
            <item>Document transfer capabilities for case management</item>
            </list>
            </remarks>
        </member>
        <member name="P:ADMS.API.Entities.Matter.Id">
            <summary>
            Gets or sets the unique identifier for the matter.
            </summary>
            <remarks>
            This GUID serves as the primary key and is automatically generated when the matter is created.
            The unique identifier enables reliable referencing across all system components and maintains
            referential integrity in the audit trail system.
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key with identity generation</item>
            <item>Non-nullable and required for all operations</item>
            <item>Used as foreign key in Document and all activity tracking entities</item>
            <item>Remains constant throughout the matter's lifecycle</item>
            </list>
            
            <para><strong>Usage Considerations:</strong></para>
            The ID remains constant throughout the matter's lifecycle and is used for all
            document associations, activity tracking, and audit trail operations. It serves
            as the primary reference point for all matter-related operations in the system.
            </remarks>
            <example>
            <code>
            var matter = new Matter 
            { 
                Description = "Client ABC - Corporate Formation",
                CreationDate = DateTime.UtcNow
            };
            // ID will be automatically generated when saved to database
            
            // Accessing matter by ID
            var matterId = Guid.Parse("60000000-0000-0000-0000-000000000001");
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ADMS.API.Entities.Matter.Description" -->
        <member name="P:ADMS.API.Entities.Matter.IsArchived">
            <summary>
            Gets or sets a value indicating whether the matter is archived.
            </summary>
            <remarks>
            The archived status indicates that the matter has been moved to an inactive state,
            typically when the legal work is complete but the matter and its documents must
            be retained for legal, professional, or client requirements.
            
            <para><strong>Archival Purposes:</strong></para>
            <list type="bullet">
            <item>Completed legal matters that require document retention</item>
            <item>Inactive client relationships with historical document value</item>
            <item>Matters awaiting final disposition or client instruction</item>
            <item>Long-term storage for compliance and audit purposes</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Archived matters remain accessible but are typically hidden from active views</item>
            <item>Documents within archived matters are preserved and accessible</item>
            <item>Archived matters can be unarchived if work resumes</item>
            <item>Archival activities are tracked in the audit trail</item>
            </list>
            
            <para><strong>Workflow Integration:</strong></para>
            <list type="bullet">
            <item>Supports practice management workflows for matter lifecycle</item>
            <item>Enables reporting and analytics on matter completion</item>
            <item>Facilitates compliance with document retention policies</item>
            <item>Supports client communication about matter status</item>
            </list>
            
            <para><strong>Legal Practice Benefits:</strong></para>
            Archival status helps legal professionals maintain organized practices by
            distinguishing between active and completed work while preserving access
            to historical documents and maintaining professional compliance standards.
            </remarks>
            <example>
            <code>
            // Archive a completed matter
            var completedMatter = new Matter 
            { 
                Description = "Johnson Estate - Probate Complete",
                IsArchived = true,
                CreationDate = DateTime.UtcNow
            };
            
            // Check archival status
            if (matter.IsArchived)
            {
                // Handle archived matter display logic
                Console.WriteLine($"Matter '{matter.Description}' is archived");
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Matter.IsDeleted">
            <summary>
            Gets or sets a value indicating whether the matter has been deleted.
            </summary>
            <remarks>
            The deletion status indicates that the matter has been marked for removal while
            preserving the data for audit trail integrity and potential restoration. This
            implements soft deletion to maintain legal compliance and professional standards.
            
            <para><strong>Soft Deletion Benefits:</strong></para>
            <list type="bullet">
            <item>Preserves audit trails for legal compliance and professional responsibility</item>
            <item>Maintains referential integrity for associated documents and activities</item>
            <item>Enables matter restoration if deletion was in error</item>
            <item>Supports legal discovery and historical analysis requirements</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Deleted matters are hidden from normal user interfaces</item>
            <item>Associated documents must be handled according to deletion policies</item>
            <item>Deletion activities are tracked in the audit trail</item>
            <item>Deleted matters can be restored through administrative functions</item>
            </list>
            
            <para><strong>Professional Compliance:</strong></para>
            <list type="bullet">
            <item>Supports professional responsibility for document retention</item>
            <item>Maintains historical records for potential legal review</item>
            <item>Preserves client confidentiality while managing data lifecycle</item>
            <item>Enables compliance with legal practice standards</item>
            </list>
            
            <para><strong>Data Lifecycle Management:</strong></para>
            The soft deletion approach ensures that legal professionals can manage their
            practice data lifecycle while maintaining the integrity and availability of
            historical information required for professional and legal compliance.
            </remarks>
            <example>
            <code>
            // Check deletion status
            if (matter.IsDeleted)
            {
                // Handle deleted matter - typically hidden from normal views
                logger.LogInformation($"Matter '{matter.Description}' is marked as deleted");
            }
            
            // Soft delete a matter
            matter.IsDeleted = true;
            // Note: Actual deletion would be handled through the repository layer
            
            // Query for active (non-deleted) matters
            var activeMatters = matters.Where(m => !m.IsDeleted);
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ADMS.API.Entities.Matter.CreationDate" -->
        <member name="P:ADMS.API.Entities.Matter.Documents">
            <summary>
            Gets or sets the digital documents associated with this matter.
            </summary>
            <remarks>
            This collection represents the core document management functionality of the Matter entity,
            containing all digital documents that belong to this matter. The relationship supports
            comprehensive document organization and management for legal practice.
            
            <para><strong>Document Collection Features:</strong></para>
            <list type="bullet">
            <item>One-to-many relationship supporting unlimited document storage</item>
            <item>Automatic association of documents with the matter</item>
            <item>Support for various document types and formats</item>
            <item>Integration with document versioning and revision control</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as one-to-many relationship in AdmsContext</item>
            <item>Foreign key relationship through Document.MatterId</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>Cascade behavior preserves referential integrity</item>
            </list>
            
            <para><strong>Legal Practice Usage:</strong></para>
            <list type="bullet">
            <item>Organizes client documents by matter or client</item>
            <item>Supports case file management and organization</item>
            <item>Enables comprehensive document search and retrieval</item>
            <item>Facilitates professional compliance and documentation</item>
            </list>
            
            <para><strong>Document Management Benefits:</strong></para>
            <list type="bullet">
            <item>Centralized document storage and organization</item>
            <item>Automatic document association and categorization</item>
            <item>Support for document lifecycle management</item>
            <item>Integration with audit trails and activity tracking</item>
            </list>
            
            <para><strong>Performance Considerations:</strong></para>
            The virtual modifier enables lazy loading, but consider explicit loading or
            projections when working with matters that have large document collections
            to avoid N+1 query issues and optimize performance.
            </remarks>
            <example>
            <code>
            // Accessing documents in a matter
            foreach (var document in matter.Documents)
            {
                Console.WriteLine($"Document: {document.FileName} - Size: {document.FileSize} bytes");
            }
            
            // Counting documents
            var documentCount = matter.Documents.Count;
            var activeDocuments = matter.Documents.Where(d => !d.IsDeleted).Count();
            
            // Using explicit loading to avoid N+1 queries
            await context.Entry(matter)
                .Collection(m => m.Documents)
                .LoadAsync();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Matter.MatterActivityUsers">
            <summary>
            Gets or sets the matter activity users associated with this matter.
            </summary>
            <remarks>
            This collection maintains the comprehensive audit trail for all matter-related activities,
            tracking who performed what actions on the matter and when. This supports legal compliance,
            professional accountability, and practice management requirements.
            
            <para><strong>Activity Tracking Features:</strong></para>
            <list type="bullet">
            <item>Complete audit trail for all matter lifecycle activities</item>
            <item>User attribution for professional accountability</item>
            <item>Temporal tracking for compliance and reporting</item>
            <item>Support for various matter activities (CREATED, ARCHIVED, DELETED, etc.)</item>
            </list>
            
            <para><strong>Legal Compliance Support:</strong></para>
            <list type="bullet">
            <item>Maintains professional responsibility documentation</item>
            <item>Supports legal discovery and audit requirements</item>
            <item>Enables client communication about matter activities</item>
            <item>Facilitates practice management and oversight</item>
            </list>
            
            <para><strong>Professional Practice Benefits:</strong></para>
            <list type="bullet">
            <item>Comprehensive activity logging for professional standards</item>
            <item>User accountability for all matter operations</item>
            <item>Historical tracking for practice improvement</item>
            <item>Integration with billing and time tracking systems</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>One-to-many relationship from Matter to MatterActivityUser</item>
            <item>Composite primary key in MatterActivityUser includes MatterId</item>
            <item>Required relationship preserves audit trail integrity</item>
            <item>Supports efficient querying and reporting</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing matter activity history
            foreach (var activity in matter.MatterActivityUsers.OrderBy(a => a.CreatedAt))
            {
                Console.WriteLine($"{activity.User?.Name} performed {activity.MatterActivity?.Activity} at {activity.CreatedAt}");
            }
            
            // Finding specific activities
            var creationActivity = matter.MatterActivityUsers
                .FirstOrDefault(a => a.MatterActivity?.Activity == "CREATED");
            
            var recentActivities = matter.MatterActivityUsers
                .Where(a => a.CreatedAt >= DateTime.UtcNow.AddDays(-30))
                .OrderByDescending(a => a.CreatedAt);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Matter.MatterDocumentActivityUsersFrom">
            <summary>
            Gets or sets the "from" matter document activity users associated with this matter.
            </summary>
            <remarks>
            This collection tracks all document transfer activities where documents were moved or copied
            FROM this matter to other matters. This provides the source-side audit trail for document
            transfer operations, essential for legal compliance and document custody tracking.
            
            <para><strong>Document Transfer Tracking:</strong></para>
            <list type="bullet">
            <item>Source-side tracking for document moves and copies</item>
            <item>Complete audit trail for document custody changes</item>
            <item>User attribution for document transfer initiation</item>
            <item>Temporal tracking for legal timeline reconstruction</item>
            </list>
            
            <para><strong>Legal Compliance Benefits:</strong></para>
            <list type="bullet">
            <item>Document custody chain maintenance for legal discovery</item>
            <item>Professional responsibility tracking for document handling</item>
            <item>Client confidentiality and document security monitoring</item>
            <item>Audit trail preservation for compliance requirements</item>
            </list>
            
            <para><strong>Professional Practice Support:</strong></para>
            <list type="bullet">
            <item>Document organization and matter management</item>
            <item>Client communication about document location changes</item>
            <item>Practice workflow optimization and analysis</item>
            <item>Professional oversight and quality assurance</item>
            </list>
            
            <para><strong>Integration with Document Management:</strong></para>
            This collection works in conjunction with MatterDocumentActivityUsersTo to provide
            complete bidirectional audit trails for document transfers, ensuring comprehensive
            tracking of document movement between matters in the legal practice.
            </remarks>
            <example>
            <code>
            // Accessing documents transferred FROM this matter
            foreach (var transferFrom in matter.MatterDocumentActivityUsersFrom)
            {
                Console.WriteLine($"Document {transferFrom.Document?.FileName} " +
                                 $"{transferFrom.MatterDocumentActivity?.Activity} from this matter " +
                                 $"by {transferFrom.User?.Name} at {transferFrom.CreatedAt}");
            }
            
            // Finding recent outbound transfers
            var recentTransfersOut = matter.MatterDocumentActivityUsersFrom
                .Where(t => t.CreatedAt >= DateTime.UtcNow.AddDays(-30))
                .OrderByDescending(t => t.CreatedAt);
            
            // Counting transfer activities by type
            var moveCount = matter.MatterDocumentActivityUsersFrom
                .Count(t => t.MatterDocumentActivity?.Activity == "MOVED");
            var copyCount = matter.MatterDocumentActivityUsersFrom
                .Count(t => t.MatterDocumentActivity?.Activity == "COPIED");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Matter.MatterDocumentActivityUsersTo">
            <summary>
            Gets or sets the "to" matter document activity users associated with this matter.
            </summary>
            <remarks>
            This collection tracks all document transfer activities where documents were moved or copied
            TO this matter from other matters. This provides the destination-side audit trail for document
            transfer operations, completing the bidirectional tracking system for legal compliance.
            
            <para><strong>Document Reception Tracking:</strong></para>
            <list type="bullet">
            <item>Destination-side tracking for document moves and copies</item>
            <item>Complete audit trail for documents received into this matter</item>
            <item>User attribution for document transfer receipt</item>
            <item>Temporal tracking for document arrival and integration</item>
            </list>
            
            <para><strong>Legal Practice Benefits:</strong></para>
            <list type="bullet">
            <item>Document provenance tracking for legal discovery</item>
            <item>Client notification about document additions</item>
            <item>Matter completeness validation and quality assurance</item>
            <item>Professional responsibility for document custody</item>
            </list>
            
            <para><strong>Practice Management Support:</strong></para>
            <list type="bullet">
            <item>Matter organization and document consolidation</item>
            <item>Client service delivery and communication</item>
            <item>Professional workflow optimization</item>
            <item>Quality control and oversight capabilities</item>
            </list>
            
            <para><strong>Bidirectional Audit System:</strong></para>
            This collection complements MatterDocumentActivityUsersFrom to provide complete
            bidirectional tracking of document transfers, ensuring that every document movement
            between matters is fully documented and traceable for legal and professional compliance.
            </remarks>
            <example>
            <code>
            // Accessing documents transferred TO this matter
            foreach (var transferTo in matter.MatterDocumentActivityUsersTo)
            {
                Console.WriteLine($"Document {transferTo.Document?.FileName} " +
                                 $"{transferTo.MatterDocumentActivity?.Activity} to this matter " +
                                 $"by {transferTo.User?.Name} at {transferTo.CreatedAt}");
            }
            
            // Finding recent inbound transfers
            var recentTransfersIn = matter.MatterDocumentActivityUsersTo
                .Where(t => t.CreatedAt >= DateTime.UtcNow.AddDays(-7))
                .OrderByDescending(t => t.CreatedAt);
            
            // Analyzing transfer patterns
            var transferSummary = matter.MatterDocumentActivityUsersTo
                .GroupBy(t => t.MatterDocumentActivity?.Activity)
                .Select(g => new { Activity = g.Key, Count = g.Count() });
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Matter.HasDocuments">
            <summary>
            Gets a value indicating whether this matter contains any documents.
            </summary>
            <remarks>
            This computed property provides a quick way to determine if the matter has any associated
            documents, useful for validation, user interface logic, and business rule enforcement.
            
            <para><strong>Performance Note:</strong></para>
            This property triggers database queries if the Documents collection is not loaded.
            Consider using explicit loading or projections when working with multiple matters.
            </remarks>
            <example>
            <code>
            if (matter.HasDocuments)
            {
                Console.WriteLine($"Matter '{matter.Description}' contains {matter.Documents.Count} documents");
            }
            else
            {
                Console.WriteLine($"Matter '{matter.Description}' is empty");
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Matter.DocumentCount">
            <summary>
            Gets the total number of documents in this matter.
            </summary>
            <remarks>
            This computed property provides the total count of documents associated with the matter,
            useful for reporting, user interface display, and practice management analytics.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Matter contains {matter.DocumentCount} total documents");
            
            // Finding matters with many documents
            var largeMatters = matters.Where(m => m.DocumentCount > 100);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Matter.ActiveDocumentCount">
            <summary>
            Gets the number of active (non-deleted) documents in this matter.
            </summary>
            <remarks>
            This computed property provides the count of active documents, excluding those that
            have been soft-deleted, useful for active document management and user interface display.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Matter has {matter.ActiveDocumentCount} active documents");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Matter.AgeDays">
            <summary>
            Gets the age of this matter in days.
            </summary>
            <remarks>
            This computed property calculates the number of days since the matter was created,
            useful for practice management, billing analysis, and matter lifecycle tracking.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Matter is {matter.AgeDays} days old");
            
            // Finding old matters
            var oldMatters = matters.Where(m => m.AgeDays > 365);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Matter.Status">
            <summary>
            Gets the current status of the matter as a descriptive string.
            </summary>
            <remarks>
            This computed property provides a human-readable status description based on the
            matter's current state flags, useful for user interface display and reporting.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Matter status: {matter.Status}");
            // Possible outputs: "Active", "Archived", "Deleted", "Archived and Deleted"
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Matter.HasActivityHistory">
            <summary>
            Gets a value indicating whether this matter has any activity history.
            </summary>
            <remarks>
            This computed property determines if the matter has any recorded activities,
            useful for audit trail validation and user interface logic.
            </remarks>
            <example>
            <code>
            if (matter.HasActivityHistory)
            {
                // Display activity history in user interface
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Matter.TotalActivityCount">
            <summary>
            Gets the total count of all activities (matter + document transfer) for this matter.
            </summary>
            <remarks>
            This computed property provides a comprehensive count of all activities associated
            with the matter, including general matter activities and document transfer activities.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Total activities: {matter.TotalActivityCount}");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Matter.CanBeDeleted">
            <summary>
            Gets a value indicating whether the matter can be safely deleted.
            </summary>
            <remarks>
            This computed property checks business rules to determine if the matter can be deleted,
            considering factors like document status and checkout state.
            </remarks>
            <example>
            <code>
            if (matter.CanBeDeleted)
            {
                // Allow deletion operation
            }
            else
            {
                // Show user why deletion is not allowed
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Matter.Equals(ADMS.API.Entities.Matter)">
            <summary>
            Determines whether the specified Matter is equal to the current Matter.
            </summary>
            <param name="other">The Matter to compare with the current Matter.</param>
            <returns>true if the specified Matter is equal to the current Matter; otherwise, false.</returns>
            <remarks>
            Equality is determined by comparing the Id property, as each matter has a unique identifier.
            This follows Entity Framework best practices for entity equality comparison.
            </remarks>
        </member>
        <member name="M:ADMS.API.Entities.Matter.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current Matter.
            </summary>
            <param name="obj">The object to compare with the current Matter.</param>
            <returns>true if the specified object is equal to the current Matter; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Matter.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current Matter.</returns>
            <remarks>
            The hash code is based on the Id property to ensure consistent hashing behavior
            that aligns with the equality implementation.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ADMS.API.Entities.Matter.CompareTo(ADMS.API.Entities.Matter)" -->
        <member name="M:ADMS.API.Entities.Matter.op_Equality(ADMS.API.Entities.Matter,ADMS.API.Entities.Matter)">
            <summary>
            Determines whether two Matter instances are equal.
            </summary>
            <param name="left">The first Matter to compare.</param>
            <param name="right">The second Matter to compare.</param>
            <returns>true if the Matters are equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Matter.op_Inequality(ADMS.API.Entities.Matter,ADMS.API.Entities.Matter)">
            <summary>
            Determines whether two Matter instances are not equal.
            </summary>
            <param name="left">The first Matter to compare.</param>
            <param name="right">The second Matter to compare.</param>
            <returns>true if the Matters are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Matter.op_LessThan(ADMS.API.Entities.Matter,ADMS.API.Entities.Matter)">
            <summary>
            Determines whether one Matter precedes another in the ordering.
            </summary>
            <param name="left">The first Matter to compare.</param>
            <param name="right">The second Matter to compare.</param>
            <returns>true if the left Matter precedes the right Matter; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Matter.op_LessThanOrEqual(ADMS.API.Entities.Matter,ADMS.API.Entities.Matter)">
            <summary>
            Determines whether one Matter precedes or is equal to another in the ordering.
            </summary>
            <param name="left">The first Matter to compare.</param>
            <param name="right">The second Matter to compare.</param>
            <returns>true if the left Matter precedes or equals the right Matter; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Matter.op_GreaterThan(ADMS.API.Entities.Matter,ADMS.API.Entities.Matter)">
            <summary>
            Determines whether one Matter follows another in the ordering.
            </summary>
            <param name="left">The first Matter to compare.</param>
            <param name="right">The second Matter to compare.</param>
            <returns>true if the left Matter follows the right Matter; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Matter.op_GreaterThanOrEqual(ADMS.API.Entities.Matter,ADMS.API.Entities.Matter)">
            <summary>
            Determines whether one Matter follows or is equal to another in the ordering.
            </summary>
            <param name="left">The first Matter to compare.</param>
            <param name="right">The second Matter to compare.</param>
            <returns>true if the left Matter follows or equals the right Matter; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Matter.ToString">
            <summary>
            Returns a string representation of the Matter.
            </summary>
            <returns>A string that represents the current Matter.</returns>
            <remarks>
            The string representation includes key identifying information about the matter,
            which is useful for debugging, logging, and display purposes.
            </remarks>
            <example>
            <code>
            var matter = new Matter 
            { 
                Id = Guid.Parse("60000000-0000-0000-0000-000000000001"), 
                Description = "Smith Family Trust",
                CreationDate = DateTime.UtcNow
            };
            
            Console.WriteLine(matter);
            // Output: "Matter: Smith Family Trust (60000000-0000-0000-0000-000000000001) - Active"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Matter.IsActive">
            <summary>
            Determines whether this matter is currently active (not archived and not deleted).
            </summary>
            <returns>true if the matter is active; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify active matters for
            user interface display and business logic enforcement.
            </remarks>
            <example>
            <code>
            if (matter.IsActive())
            {
                // Show matter in active matters list
                Console.WriteLine($"Active matter: {matter.Description}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Matter.CanBeArchived">
            <summary>
            Determines whether this matter can be archived based on business rules.
            </summary>
            <returns>true if the matter can be archived; otherwise, false.</returns>
            <remarks>
            This method checks business rules to determine if archival is allowed,
            considering the current state and any associated constraints.
            </remarks>
            <example>
            <code>
            if (matter.CanBeArchived())
            {
                matter.IsArchived = true;
                // Log archival activity...
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Matter.CanBeRestored">
            <summary>
            Determines whether this matter can be restored from deleted state.
            </summary>
            <returns>true if the matter can be restored; otherwise, false.</returns>
            <remarks>
            This method determines if a deleted matter can be restored based on
            business rules and system constraints.
            </remarks>
            <example>
            <code>
            if (matter.CanBeRestored())
            {
                matter.IsDeleted = false;
                // Log restoration activity...
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Matter.GetMatterStatistics">
            <summary>
            Gets summary statistics about the matter's documents and activities.
            </summary>
            <returns>A dictionary containing matter statistics.</returns>
            <remarks>
            This method provides comprehensive statistics for reporting and analysis purposes,
            useful for practice management and client communication.
            </remarks>
            <example>
            <code>
            var stats = matter.GetMatterStatistics();
            Console.WriteLine($"Total documents: {stats["TotalDocuments"]}");
            Console.WriteLine($"Active documents: {stats["ActiveDocuments"]}");
            Console.WriteLine($"Total activities: {stats["TotalActivities"]}");
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Matter.GetMostRecentActivity">
            <summary>
            Gets the most recent activity performed on this matter.
            </summary>
            <returns>The most recent MatterActivityUser, or null if no activities exist.</returns>
            <remarks>
            This method provides access to the most recent activity for user interface
            display and business logic purposes.
            </remarks>
            <example>
            <code>
            var lastActivity = matter.GetMostRecentActivity();
            if (lastActivity != null)
            {
                Console.WriteLine($"Last activity: {lastActivity.MatterActivity?.Activity} " +
                                 $"by {lastActivity.User?.Name} at {lastActivity.CreatedAt}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Matter.GetActivitiesByType(System.String)">
            <summary>
            Gets activities of a specific type performed on this matter.
            </summary>
            <param name="activityType">The activity type to filter by.</param>
            <returns>A collection of matching activities.</returns>
            <remarks>
            This method enables filtering activities by type for specific analysis
            and reporting purposes.
            </remarks>
            <example>
            <code>
            var creationActivities = matter.GetActivitiesByType("CREATED");
            var archivalActivities = matter.GetActivitiesByType("ARCHIVED");
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Matter.Validate">
            <summary>
            Validates the current Matter instance against business rules.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <remarks>
            This method performs comprehensive validation including business rule compliance,
            data integrity checks, and professional practice standards.
            </remarks>
            <example>
            <code>
            var validationResults = matter.Validate();
            if (validationResults.Any())
            {
                foreach (var error in validationResults)
                {
                    Console.WriteLine($"Validation Error: {error.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Entities.MatterActivity">
            <summary>
            Represents an activity that can be performed on a matter in the ADMS legal document management system.
            </summary>
            <remarks>
            The MatterActivity entity serves as a lookup table for the standardized activities that can be performed
            on legal matters within the document management system. This entity is critical for maintaining
            comprehensive audit trails and ensuring consistent activity classification across all matter operations.
            
            <para><strong>Key Characteristics:</strong></para>
            <list type="bullet">
            <item><strong>Static Reference Data:</strong> Contains predefined activity types seeded from database</item>
            <item><strong>Audit Trail Foundation:</strong> Central classification system for matter activities</item>
            <item><strong>Business Rule Enforcement:</strong> Ensures only valid activities are recorded</item>
            <item><strong>Legal Compliance:</strong> Supports comprehensive audit requirements</item>
            <item><strong>Immutable Activities:</strong> Activity types are system-defined and rarely change</item>
            </list>
            
            <para><strong>Seeded Activities:</strong></para>
            The following activities are seeded in AdmsContext.SeedMatterActivities:
            <list type="bullet">
            <item><strong>CREATED:</strong> Matter creation activity</item>
            <item><strong>ARCHIVED:</strong> Matter archival activity</item>
            <item><strong>DELETED:</strong> Matter deletion activity</item>
            <item><strong>RESTORED:</strong> Matter restoration activity</item>
            <item><strong>UNARCHIVED:</strong> Matter unarchival activity</item>
            <item><strong>VIEWED:</strong> Matter viewing/access activity</item>
            </list>
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key: GUID with identity generation</item>
            <item>Activity constraint: StringLength(50) with required validation</item>
            <item>Seeded data: Six standard matter lifecycle activities</item>
            <item>Relationships: One-to-many with MatterActivityUser for audit trails</item>
            </list>
            
            <para><strong>Matter Lifecycle Support:</strong></para>
            <list type="bullet">
            <item><strong>Creation Operations:</strong> CREATED for new matter establishment</item>
            <item><strong>Archive Operations:</strong> ARCHIVED/UNARCHIVED for matter lifecycle management</item>
            <item><strong>Deletion Operations:</strong> DELETED/RESTORED for matter disposal and recovery</item>
            <item><strong>Access Operations:</strong> VIEWED for matter access tracking</item>
            </list>
            
            <para><strong>Legal Compliance Support:</strong></para>
            <list type="bullet">
            <item>Standardized activity classification for legal audit requirements</item>
            <item>Immutable reference data preserving audit trail integrity</item>
            <item>Complete user attribution through MatterActivityUser associations</item>
            <item>Support for regulatory reporting and compliance audits</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Activity names must match MatterActivityValidationHelper.AllowedActivities</item>
            <item>Activities are standardized and system-defined (not user-created)</item>
            <item>Each activity can be associated with multiple users and matters</item>
            <item>Activity names are case-insensitive but stored in uppercase</item>
            </list>
            
            <para><strong>Entity Framework Integration:</strong></para>
            The entity is configured in AdmsContext with:
            <list type="bullet">
            <item>Seeded data for all standard matter lifecycle activities</item>
            <item>Required relationships to MatterActivityUser junction entity</item>
            <item>NoAction cascade delete to preserve audit trail integrity</item>
            <item>Performance optimization for frequent lookup operations</item>
            </list>
            </remarks>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivity.Id">
            <summary>
            Gets or sets the unique identifier for the matter activity.
            </summary>
            <remarks>
            This GUID serves as the primary key and is automatically generated when the activity is created.
            For seeded activities, specific GUIDs are used to ensure consistency across deployments and
            enable reliable reference in business logic and reporting.
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key with identity generation</item>
            <item>Non-nullable and required for all operations</item>
            <item>Used as foreign key in MatterActivityUser relationship table</item>
            <item>Seeded with specific GUIDs for standard activities</item>
            </list>
            
            <para><strong>Seeded Activity IDs:</strong></para>
            <list type="bullet">
            <item>CREATED: 20000000-0000-0000-0000-000000000001</item>
            <item>ARCHIVED: 20000000-0000-0000-0000-000000000002</item>
            <item>DELETED: 20000000-0000-0000-0000-000000000003</item>
            <item>RESTORED: 20000000-0000-0000-0000-000000000004</item>
            <item>UNARCHIVED: 20000000-0000-0000-0000-000000000005</item>
            <item>VIEWED: 20000000-0000-0000-0000-000000000006</item>
            </list>
            
            <para><strong>Usage Considerations:</strong></para>
            The ID remains constant throughout the activity's lifecycle and is used for all
            audit trail associations, business logic references, and reporting operations.
            </remarks>
            <example>
            <code>
            var activity = new MatterActivity 
            { 
                Activity = "CUSTOM_ACTIVITY"
            };
            // ID will be automatically generated when saved to database
            
            // Accessing seeded activity
            var createdActivityId = Guid.Parse("20000000-0000-0000-0000-000000000001");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivity.Activity">
            <summary>
            Gets or sets the name or description of the activity being undertaken.
            </summary>
            <remarks>
            The activity name serves as the primary identifier and classifier for matter operations.
            This field must conform to the standardized activity names defined in 
            MatterActivityValidationHelper.AllowedActivities to ensure consistency across the system.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Required field - cannot be null or empty</item>
            <item>Maximum length: 50 characters (database constraint)</item>
            <item>Minimum length: 2 characters (business rule)</item>
            <item>Must be one of the allowed activities from MatterActivityValidationHelper</item>
            <item>Must contain only letters, numbers, and underscores</item>
            <item>Must contain at least one letter</item>
            <item>Cannot use reserved activity names</item>
            </list>
            
            <para><strong>Standard Activities:</strong></para>
            <list type="bullet">
            <item><strong>CREATED:</strong> Matter creation activity</item>
            <item><strong>ARCHIVED:</strong> Matter archival activity</item>
            <item><strong>DELETED:</strong> Matter deletion activity</item>
            <item><strong>RESTORED:</strong> Matter restoration activity</item>
            <item><strong>UNARCHIVED:</strong> Matter unarchival activity</item>
            <item><strong>VIEWED:</strong> Matter viewing/access activity</item>
            </list>
            
            <para><strong>Business Context:</strong></para>
            Activity names are used throughout the system for:
            <list type="bullet">
            <item>Matter lifecycle classification and reporting</item>
            <item>Business rule enforcement and workflow control</item>
            <item>User interface display and activity filtering</item>
            <item>Legal compliance reporting and analysis</item>
            <item>Audit trail generation and matter management</item>
            </list>
            
            <para><strong>Validation Integration:</strong></para>
            Activity names are validated using MatterActivityValidationHelper to ensure
            they conform to business rules and legal compliance requirements.
            </remarks>
            <example>
            <code>
            // Standard seeded activities
            var createdActivity = new MatterActivity { Activity = "CREATED" };
            var archivedActivity = new MatterActivity { Activity = "ARCHIVED" };
            var deletedActivity = new MatterActivity { Activity = "DELETED" };
            var restoredActivity = new MatterActivity { Activity = "RESTORED" };
            var unarchivedActivity = new MatterActivity { Activity = "UNARCHIVED" };
            var viewedActivity = new MatterActivity { Activity = "VIEWED" };
            
            // Validation example
            bool isValid = Common.MatterActivityValidationHelper.IsActivityAllowed(createdActivity.Activity);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivity.MatterActivityUsers">
            <summary>
            Gets or sets the collection of matter activity user associations for this activity.
            </summary>
            <remarks>
            This collection maintains the one-to-many relationship between this matter activity and
            the user associations. Each association represents a specific instance of this activity
            being performed by a user on a matter.
            
            <para><strong>Audit Trail Functionality:</strong></para>
            Each association in this collection provides:
            <list type="bullet">
            <item>User attribution - which user performed this activity</item>
            <item>Matter context - which matter the activity was performed on</item>
            <item>Temporal tracking - when the activity occurred</item>
            <item>Unique identification - composite key preventing duplicates</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured in AdmsContext.ConfigureMatterActivityUser</item>
            <item>One-to-many relationship from activity to user associations</item>
            <item>Composite primary key includes ActivityId in the user association entity</item>
            <item>NoAction cascade behavior preserves audit trail integrity</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Activity-based audit trail analysis</item>
            <item>User activity reporting and monitoring</item>
            <item>Matter lifecycle tracking</item>
            <item>Legal compliance and discovery support</item>
            </list>
            
            <para><strong>Performance Considerations:</strong></para>
            The virtual modifier enables lazy loading, but consider explicit loading or
            projections when working with multiple activities to avoid N+1 query issues.
            For frequently accessed audit data, consider including related entities in queries.
            </remarks>
            <example>
            <code>
            // Accessing users who performed this activity
            foreach (var activityUser in matterActivity.MatterActivityUsers)
            {
                Console.WriteLine($"User {activityUser.User?.Name} performed {matterActivity.Activity} " +
                                 $"on matter {activityUser.Matter?.Description} at {activityUser.CreatedAt}");
            }
            
            // Finding all users who performed CREATED activity
            var createdActivity = activities.FirstOrDefault(a => a.Activity == "CREATED");
            var creators = createdActivity?.MatterActivityUsers
                .Select(au => au.User)
                .Distinct();
            
            // Activity usage statistics
            var usageCount = matterActivity.MatterActivityUsers.Count;
            var uniqueUsers = matterActivity.MatterActivityUsers
                .Select(au => au.UserId)
                .Distinct()
                .Count();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivity.HasUserAssociations">
            <summary>
            Gets a value indicating whether this activity has any recorded user associations.
            </summary>
            <remarks>
            This property is useful for determining activity usage and ensuring that
            activities are actually being used in the system. Activities without associations
            may indicate unused system features or configuration issues.
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Activity usage analysis and reporting</item>
            <item>System configuration validation</item>
            <item>Feature utilization monitoring</item>
            <item>Data cleanup and maintenance operations</item>
            </list>
            
            <para><strong>Performance Note:</strong></para>
            This property triggers database queries to count related entities. Consider using
            explicit loading or projections when working with multiple activities to avoid N+1 queries.
            </remarks>
            <example>
            <code>
            if (!matterActivity.HasUserAssociations)
            {
                logger.LogInformation($"Activity {matterActivity.Activity} has no user associations");
            }
            
            // Finding unused activities
            var unusedActivities = activities.Where(a => !a.HasUserAssociations).ToList();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivity.UsageCount">
            <summary>
            Gets the total count of user associations for this activity.
            </summary>
            <remarks>
            This computed property provides insight into the frequency of use for this activity
            type, useful for activity monitoring, usage analytics, and system optimization.
            
            <para><strong>Performance Note:</strong></para>
            This property triggers database queries to count related entities. Consider using
            explicit loading or projections when working with multiple activities to avoid N+1 queries.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Activity {matterActivity.Activity} has been used {matterActivity.UsageCount} times");
            
            // Finding most used activities
            var mostUsedActivities = activities
                .OrderByDescending(a => a.UsageCount)
                .Take(10);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivity.UniqueUserCount">
            <summary>
            Gets the count of unique users who have performed this activity.
            </summary>
            <remarks>
            This computed property provides insight into the breadth of user engagement
            with this activity type, useful for user adoption analysis and training needs assessment.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Activity {matterActivity.Activity} has been performed by {matterActivity.UniqueUserCount} different users");
            
            // Analyzing user engagement
            var engagementMetric = matterActivity.UniqueUserCount / (double)matterActivity.UsageCount;
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivity.UniqueMatterCount">
            <summary>
            Gets the count of unique matters this activity has been performed on.
            </summary>
            <remarks>
            This computed property provides insight into the breadth of matter engagement
            with this activity type, useful for matter lifecycle analysis and system usage patterns.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Activity {matterActivity.Activity} has been performed on {matterActivity.UniqueMatterCount} different matters");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivity.IsStandardActivity">
            <summary>
            Gets a value indicating whether this activity is one of the standard seeded activities.
            </summary>
            <remarks>
            This property identifies whether the activity is one of the standard system-defined
            activities or a custom activity. Standard activities are those seeded in the database
            and validated by MatterActivityValidationHelper.
            </remarks>
            <example>
            <code>
            if (matterActivity.IsStandardActivity)
            {
                // Apply standard business rules
            }
            else
            {
                // Handle custom activity logic
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivity.NormalizedActivity">
            <summary>
            Gets the normalized version of the activity name.
            </summary>
            <remarks>
            This property provides a normalized version of the activity name following
            the normalization rules from MatterActivityValidationHelper for consistent
            comparison and storage operations.
            </remarks>
            <example>
            <code>
            var normalized = matterActivity.NormalizedActivity; // Always uppercase, trimmed
            bool areEqual = matterActivity.NormalizedActivity == other.NormalizedActivity;
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivity.ActivityCategory">
            <summary>
            Gets the activity category for classification purposes.
            </summary>
            <remarks>
            This property categorizes the activity based on its type for reporting and analysis purposes.
            </remarks>
            <example>
            <code>
            var category = matterActivity.ActivityCategory;
            // Returns: "Lifecycle", "Archive", "Access", or "Unknown"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.Equals(ADMS.API.Entities.MatterActivity)">
            <summary>
            Determines whether the specified MatterActivity is equal to the current MatterActivity.
            </summary>
            <param name="other">The MatterActivity to compare with the current MatterActivity.</param>
            <returns>true if the specified MatterActivity is equal to the current MatterActivity; otherwise, false.</returns>
            <remarks>
            Equality is determined by comparing the Id property, as each activity has a unique identifier.
            This follows Entity Framework best practices for entity equality comparison.
            </remarks>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current MatterActivity.
            </summary>
            <param name="obj">The object to compare with the current MatterActivity.</param>
            <returns>true if the specified object is equal to the current MatterActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current MatterActivity.</returns>
            <remarks>
            The hash code is based on the Id property to ensure consistent hashing behavior
            that aligns with the equality implementation.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ADMS.API.Entities.MatterActivity.CompareTo(ADMS.API.Entities.MatterActivity)" -->
        <member name="M:ADMS.API.Entities.MatterActivity.op_Equality(ADMS.API.Entities.MatterActivity,ADMS.API.Entities.MatterActivity)">
            <summary>
            Determines whether two MatterActivity instances are equal.
            </summary>
            <param name="left">The first MatterActivity to compare.</param>
            <param name="right">The second MatterActivity to compare.</param>
            <returns>true if the MatterActivities are equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.op_Inequality(ADMS.API.Entities.MatterActivity,ADMS.API.Entities.MatterActivity)">
            <summary>
            Determines whether two MatterActivity instances are not equal.
            </summary>
            <param name="left">The first MatterActivity to compare.</param>
            <param name="right">The second MatterActivity to compare.</param>
            <returns>true if the MatterActivities are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.op_LessThan(ADMS.API.Entities.MatterActivity,ADMS.API.Entities.MatterActivity)">
            <summary>
            Determines whether one MatterActivity precedes another in the ordering.
            </summary>
            <param name="left">The first MatterActivity to compare.</param>
            <param name="right">The second MatterActivity to compare.</param>
            <returns>true if the left MatterActivity precedes the right MatterActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.op_LessThanOrEqual(ADMS.API.Entities.MatterActivity,ADMS.API.Entities.MatterActivity)">
            <summary>
            Determines whether one MatterActivity precedes or is equal to another in the ordering.
            </summary>
            <param name="left">The first MatterActivity to compare.</param>
            <param name="right">The second MatterActivity to compare.</param>
            <returns>true if the left MatterActivity precedes or equals the right MatterActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.op_GreaterThan(ADMS.API.Entities.MatterActivity,ADMS.API.Entities.MatterActivity)">
            <summary>
            Determines whether one MatterActivity follows another in the ordering.
            </summary>
            <param name="left">The first MatterActivity to compare.</param>
            <param name="right">The second MatterActivity to compare.</param>
            <returns>true if the left MatterActivity follows the right MatterActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.op_GreaterThanOrEqual(ADMS.API.Entities.MatterActivity,ADMS.API.Entities.MatterActivity)">
            <summary>
            Determines whether one MatterActivity follows or is equal to another in the ordering.
            </summary>
            <param name="left">The first MatterActivity to compare.</param>
            <param name="right">The second MatterActivity to compare.</param>
            <returns>true if the left MatterActivity follows or equals the right MatterActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.ToString">
            <summary>
            Returns a string representation of the MatterActivity.
            </summary>
            <returns>A string that represents the current MatterActivity.</returns>
            <remarks>
            The string representation includes key identifying information about the activity,
            which is useful for debugging, logging, and display purposes.
            </remarks>
            <example>
            <code>
            var activity = new MatterActivity 
            { 
                Id = Guid.Parse("20000000-0000-0000-0000-000000000001"), 
                Activity = "CREATED"
            };
            
            Console.WriteLine(activity);
            // Output: "MatterActivity: CREATED (20000000-0000-0000-0000-000000000001)"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.IsCreationActivity">
            <summary>
            Determines whether this activity represents a creation operation.
            </summary>
            <returns>true if this is a creation activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify creation activities for
            business rule enforcement and audit trail analysis.
            </remarks>
            <example>
            <code>
            if (matterActivity.IsCreationActivity())
            {
                // Apply creation-specific business rules
                Console.WriteLine("This is a matter creation activity");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.IsArchivalActivity">
            <summary>
            Determines whether this activity represents an archival operation.
            </summary>
            <returns>true if this is an archival activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify archival activities for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (matterActivity.IsArchivalActivity())
            {
                // Apply archival-specific business rules
                archiveLogger.LogArchival(matterActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.IsDeletionActivity">
            <summary>
            Determines whether this activity represents a deletion operation.
            </summary>
            <returns>true if this is a deletion activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify deletion activities for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (matterActivity.IsDeletionActivity())
            {
                // Apply deletion-specific business rules
                auditLogger.LogDeletion(matterActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.IsRestorationActivity">
            <summary>
            Determines whether this activity represents a restoration operation.
            </summary>
            <returns>true if this is a restoration activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify restoration activities for
            audit trail analysis and recovery operations.
            </remarks>
            <example>
            <code>
            if (matterActivity.IsRestorationActivity())
            {
                // Apply restoration-specific business rules
                recoveryLogger.LogRestoration(matterActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.IsUnarchivalActivity">
            <summary>
            Determines whether this activity represents an unarchival operation.
            </summary>
            <returns>true if this is an unarchival activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify unarchival activities for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (matterActivity.IsUnarchivalActivity())
            {
                // Apply unarchival-specific business rules
                unarchiveLogger.LogUnarchival(matterActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.IsViewingActivity">
            <summary>
            Determines whether this activity represents a viewing operation.
            </summary>
            <returns>true if this is a viewing activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify viewing activities for
            access tracking and analytics purposes.
            </remarks>
            <example>
            <code>
            if (matterActivity.IsViewingActivity())
            {
                // Apply viewing-specific business rules
                accessTracker.LogAccess(matterActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.IsAppropriateForMatterStatus(System.Boolean,System.Boolean)">
            <summary>
            Determines whether this activity is appropriate for the given matter context.
            </summary>
            <param name="isArchived">Whether the matter is currently archived.</param>
            <param name="isDeleted">Whether the matter is currently deleted.</param>
            <returns>true if the activity is appropriate for the context; otherwise, false.</returns>
            <remarks>
            This method uses the MatterActivityValidationHelper to validate business rules
            for activity context appropriateness.
            </remarks>
            <example>
            <code>
            bool canApply = activity.IsAppropriateForMatterStatus(false, false);  // true for normal matter
            bool cannotApply = activity.IsAppropriateForMatterStatus(true, false); // false for archived if trying to archive again
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.GetSeededActivityId(System.String)">
            <summary>
            Gets the seeded GUID for a specific activity name.
            </summary>
            <param name="activityName">The activity name to get the GUID for.</param>
            <returns>The seeded GUID if found; otherwise, Guid.Empty.</returns>
            <remarks>
            This method returns the specific GUIDs used in database seeding for standard activities,
            useful for business logic that needs to reference specific activity types.
            </remarks>
            <example>
            <code>
            var createdActivityId = MatterActivity.GetSeededActivityId("CREATED");
            // Returns: 20000000-0000-0000-0000-000000000001
            
            var archivedActivityId = MatterActivity.GetSeededActivityId("ARCHIVED");
            // Returns: 20000000-0000-0000-0000-000000000002
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.GetUsageStatistics">
            <summary>
            Gets usage statistics for this activity.
            </summary>
            <returns>A dictionary containing usage statistics.</returns>
            <remarks>
            This method provides insights into the usage patterns and statistics of this activity
            for reporting and analysis purposes.
            </remarks>
            <example>
            <code>
            var stats = matterActivity.GetUsageStatistics();
            Console.WriteLine($"Total usage: {stats["TotalUsage"]}");
            Console.WriteLine($"Unique users: {stats["UniqueUsers"]}");
            Console.WriteLine($"Unique matters: {stats["UniqueMatters"]}");
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivity.Validate">
            <summary>
            Validates the current MatterActivity instance against business rules.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <remarks>
            This method performs comprehensive validation using MatterActivityValidationHelper
            including activity name validation, length constraints, and business rule compliance.
            </remarks>
            <example>
            <code>
            var validationResults = matterActivity.Validate();
            if (validationResults.Any())
            {
                foreach (var error in validationResults)
                {
                    Console.WriteLine($"Validation Error: {error.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Entities.MatterActivityUser">
            <summary>
            Represents the association between a matter, a matter activity, and a user in the ADMS legal document management system.
            </summary>
            <remarks>
            The MatterActivityUser entity serves as a junction table implementing the many-to-many relationship
            between matters, matter activities, and users. This entity is critical for maintaining comprehensive
            audit trails of all matter-related operations within the legal document management system.
            
            <para><strong>Key Characteristics:</strong></para>
            <list type="bullet">
            <item><strong>Audit Trail Foundation:</strong> Central component of matter activity tracking</item>
            <item><strong>Composite Primary Key:</strong> Ensures uniqueness while allowing temporal tracking</item>
            <item><strong>User Attribution:</strong> Links every matter activity to a responsible user</item>
            <item><strong>Temporal Tracking:</strong> Maintains precise timestamps for all activities</item>
            <item><strong>Legal Compliance:</strong> Supports comprehensive audit requirements</item>
            </list>
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Composite primary key: MatterId + MatterActivityId + UserId + CreatedAt</item>
            <item>All foreign key relationships are required</item>
            <item>NoAction cascade delete to preserve audit trail integrity</item>
            <item>Indexed on CreatedAt for temporal queries</item>
            </list>
            
            <para><strong>Matter Activities Supported:</strong></para>
            This entity tracks various matter lifecycle activities:
            <list type="bullet">
            <item><strong>CREATED:</strong> Matter creation activity</item>
            <item><strong>ARCHIVED:</strong> Matter archival activity</item>
            <item><strong>DELETED:</strong> Matter deletion activity</item>
            <item><strong>RESTORED:</strong> Matter restoration activity</item>
            <item><strong>UNARCHIVED:</strong> Matter unarchival activity</item>
            <item><strong>VIEWED:</strong> Matter access activity</item>
            </list>
            
            <para><strong>Audit Trail Functionality:</strong></para>
            This entity enables comprehensive tracking of matter activities:
            <list type="bullet">
            <item><strong>Who:</strong> Which user performed the matter activity</item>
            <item><strong>What:</strong> What type of activity was performed (CREATED/ARCHIVED/etc.)</item>
            <item><strong>Where:</strong> Which matter the activity was performed on</item>
            <item><strong>When:</strong> Precise timestamp of the activity</item>
            </list>
            
            <para><strong>Legal Compliance Support:</strong></para>
            <list type="bullet">
            <item>Complete user attribution for all matter operations</item>
            <item>Temporal audit trails for legal discovery and compliance</item>
            <item>Immutable record of matter lifecycle activities</item>
            <item>Support for regulatory reporting and audit requirements</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Every matter activity must be attributed to a user</item>
            <item>Multiple activities of the same type can occur with different timestamps</item>
            <item>CreatedAt timestamp must be within reasonable bounds</item>
            <item>All foreign key relationships must reference valid entities</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            The entity is configured in AdmsContext.ConfigureMatterActivityUser with:
            <list type="bullet">
            <item>Composite key including all four core properties</item>
            <item>Required relationships to Matter, MatterActivity, and User</item>
            <item>NoAction cascade behaviors to maintain audit trail integrity</item>
            <item>Performance indexes on commonly queried fields</item>
            </list>
            </remarks>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivityUser.MatterId">
            <summary>
            Gets or sets the unique identifier of the matter.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the matter that this activity
            is associated with. It forms part of the composite primary key and is required for all
            matter activity user associations.
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to Matter entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>NoAction cascade delete to preserve audit trail integrity</item>
            </list>
            
            <para><strong>Business Context:</strong></para>
            <list type="bullet">
            <item>Represents the matter on which the activity was performed</item>
            <item>Links activity to specific legal case or project</item>
            <item>Enables matter-scoped activity queries</item>
            <item>Supports matter-level audit trail aggregation</item>
            </list>
            
            <para><strong>Legal Significance:</strong></para>
            The matter ID is crucial for legal document management as it establishes the context
            within which activities occur, supporting case management and legal compliance
            requirements for matter operation tracking.
            </remarks>
            <example>
            <code>
            var activityUser = new MatterActivityUser
            {
                MatterId = legalMatter.Id,  // Must reference valid matter
                MatterActivityId = activityId,
                UserId = performingUser.Id,
                CreatedAt = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivityUser.MatterActivityId">
            <summary>
            Gets or sets the unique identifier of the matter activity.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the matter activity type
            that was performed. It forms part of the composite primary key and must reference
            a valid matter activity from the seeded data.
            
            <para><strong>Activity Types:</strong></para>
            Must reference one of the seeded matter activities:
            <list type="bullet">
            <item><strong>CREATED:</strong> Matter creation activity</item>
            <item><strong>ARCHIVED:</strong> Matter archival activity</item>
            <item><strong>DELETED:</strong> Matter deletion activity</item>
            <item><strong>RESTORED:</strong> Matter restoration activity</item>
            <item><strong>UNARCHIVED:</strong> Matter unarchival activity</item>
            <item><strong>VIEWED:</strong> Matter access activity</item>
            </list>
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to MatterActivity entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>NoAction cascade delete to preserve audit integrity</item>
            </list>
            
            <para><strong>Validation Integration:</strong></para>
            The MatterActivityId is validated using MatterActivityValidationHelper
            to ensure it references a valid, allowed activity type.
            </remarks>
            <example>
            <code>
            // Linking to a CREATED activity (seeded ID: 20000000-0000-0000-0000-000000000001)
            var createdActivityId = Guid.Parse("20000000-0000-0000-0000-000000000001");
            var activityUser = new MatterActivityUser
            {
                MatterActivityId = createdActivityId,  // Must be valid activity
                // ... other properties
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivityUser.UserId">
            <summary>
            Gets or sets the unique identifier of the user who performed the activity.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the user who performed
            the matter activity. It forms part of the composite primary key and provides
            essential user attribution for audit trail purposes.
            
            <para><strong>User Attribution:</strong></para>
            <list type="bullet">
            <item>Links activity to responsible user for accountability</item>
            <item>Enables user-scoped matter activity reporting</item>
            <item>Supports legal compliance and audit requirements</item>
            <item>Facilitates user activity analytics and monitoring</item>
            </list>
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to User entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>NoAction cascade delete to preserve audit integrity</item>
            </list>
            
            <para><strong>Legal Significance:</strong></para>
            User attribution is critical for:
            <list type="bullet">
            <item>Legal discovery and compliance audits</item>
            <item>Professional responsibility tracking</item>
            <item>Accountability in legal matter management</item>
            <item>Evidence of who performed specific matter activities</item>
            </list>
            </remarks>
            <example>
            <code>
            // Attributing matter activity to a specific user
            var activityUser = new MatterActivityUser
            {
                UserId = currentUser.Id,  // Must reference valid user
                MatterId = matter.Id,
                MatterActivityId = activityId,
                CreatedAt = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivityUser.CreatedAt">
            <summary>
            Gets or sets the date and time when this entry was created (in UTC).
            </summary>
            <remarks>
            This property maintains the precise timestamp of when the matter activity occurred.
            It forms part of the composite primary key, enabling multiple activities of the same
            type with different timestamps while maintaining uniqueness.
            
            <para><strong>Temporal Tracking:</strong></para>
            <list type="bullet">
            <item>Provides precise timing for matter activity audit trails</item>
            <item>Enables temporal analysis of matter lifecycle patterns</item>
            <item>Supports legal timeline reconstruction for case management</item>
            <item>Facilitates workflow and process analysis</item>
            </list>
            
            <para><strong>Date Requirements:</strong></para>
            <list type="bullet">
            <item>Must be stored in UTC format for consistency</item>
            <item>Cannot be earlier than system minimum date</item>
            <item>Cannot be in the future (with tolerance for clock skew)</item>
            <item>Forms part of composite primary key for uniqueness</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Automatically set to current UTC time when not specified</item>
            <item>Should reflect the actual time the matter activity occurred</item>
            <item>Used for chronological ordering in audit reports</item>
            <item>Critical for legal compliance and matter activity tracking</item>
            </list>
            
            <para><strong>Validation:</strong></para>
            The CreatedAt timestamp is validated using RevisionValidationHelper date validation
            methods to ensure it falls within acceptable ranges for legal document management.
            </remarks>
            <example>
            <code>
            var activityUser = new MatterActivityUser
            {
                CreatedAt = DateTime.UtcNow,  // Always use UTC
                // ... other properties
            };
            
            // For historical data import
            var historicalActivity = new MatterActivityUser
            {
                CreatedAt = specificUtcDateTime,  // Specific historical timestamp
                // ... other properties
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivityUser.Matter">
            <summary>
            Gets or sets the matter associated with this activity.
            </summary>
            <remarks>
            This navigation property provides access to the matter on which the activity was
            performed. The relationship is established through the MatterId foreign key and
            enables rich querying and navigation within Entity Framework.
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses MatterId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>NoAction cascade delete behavior preserves audit trail integrity</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Accessing matter details from activity context</item>
            <item>Matter-level activity operations and reporting</item>
            <item>Audit trail reporting with matter information</item>
            <item>Cross-matter activity analysis</item>
            </list>
            
            <para><strong>Performance Considerations:</strong></para>
            The virtual modifier enables lazy loading, but consider explicit loading or
            projections when working with multiple activities to avoid N+1 query issues.
            </remarks>
            <example>
            <code>
            // Accessing matter information through activity
            var matterDescription = activityUser.Matter?.Description;
            var matterCreationDate = activityUser.Matter?.CreationDate;
            
            // Using explicit loading to avoid N+1 queries
            await context.Entry(activityUser)
                .Reference(a => a.Matter)
                .LoadAsync();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivityUser.MatterActivity">
            <summary>
            Gets or sets the matter activity associated with this user.
            </summary>
            <remarks>
            This navigation property provides access to the matter activity type that was performed.
            The relationship is established through the MatterActivityId foreign key and enables
            access to activity metadata such as the activity name and description.
            
            <para><strong>Activity Information Access:</strong></para>
            Provides access to:
            <list type="bullet">
            <item>Activity name (CREATED, ARCHIVED, DELETED, etc.)</item>
            <item>Activity metadata and configuration</item>
            <item>Activity validation rules and constraints</item>
            <item>Cross-activity analysis and reporting</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses MatterActivityId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>NoAction cascade delete to preserve audit integrity</item>
            </list>
            
            <para><strong>Business Logic Integration:</strong></para>
            <list type="bullet">
            <item>Activity-specific business rule enforcement</item>
            <item>Activity categorization and reporting</item>
            <item>Workflow and process analysis</item>
            <item>Activity-based authorization and permissions</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing activity type information
            var activityName = activityUser.MatterActivity?.Activity;
            var isCreationActivity = activityName == "CREATED";
            
            // Activity-based filtering
            var creationActivities = activities
                .Where(a => a.MatterActivity?.Activity == "CREATED");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivityUser.User">
            <summary>
            Gets or sets the user associated with this matter activity.
            </summary>
            <remarks>
            This navigation property provides access to the user who performed the matter activity.
            The relationship is established through the UserId foreign key and enables comprehensive
            user-based reporting and analysis of matter activities.
            
            <para><strong>User Information Access:</strong></para>
            Provides access to:
            <list type="bullet">
            <item>User identification and contact information</item>
            <item>User activity patterns and behavior</item>
            <item>Professional attribution for legal compliance</item>
            <item>User-based reporting and analytics</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses UserId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>NoAction cascade delete to preserve audit integrity</item>
            </list>
            
            <para><strong>Legal and Compliance Support:</strong></para>
            <list type="bullet">
            <item>User accountability for matter activities</item>
            <item>Professional responsibility tracking</item>
            <item>Legal discovery and audit trail support</item>
            <item>Compliance reporting and analysis</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing user information through activity
            var userName = activityUser.User?.Name;
            var userActivities = activityUser.User?.MatterActivityUsers;
            
            // User-based activity analysis
            var userCreationCount = user.MatterActivityUsers
                .Count(au => au.MatterActivity?.Activity == "CREATED");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivityUser.HasValidReferences">
            <summary>
            Gets a value indicating whether this activity record has valid foreign key references.
            </summary>
            <remarks>
            This computed property validates that all required foreign key properties contain
            valid (non-empty) GUID values, ensuring referential integrity.
            
            <para><strong>Validation Checks:</strong></para>
            <list type="bullet">
            <item>MatterId is not Guid.Empty</item>
            <item>MatterActivityId is not Guid.Empty</item>
            <item>UserId is not Guid.Empty</item>
            </list>
            </remarks>
            <example>
            <code>
            if (!activityUser.HasValidReferences)
            {
                throw new InvalidOperationException("Activity user has invalid foreign key references");
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterActivityUser.HasValidTimestamp">
            <summary>
            Gets a value indicating whether the CreatedAt timestamp is within reasonable bounds.
            </summary>
            <remarks>
            This computed property uses the RevisionValidationHelper to validate that the
            CreatedAt timestamp falls within acceptable date ranges for the system.
            </remarks>
            <example>
            <code>
            if (!activityUser.HasValidTimestamp)
            {
                logger.LogWarning($"Activity user {activityUser} has invalid timestamp: {activityUser.CreatedAt}");
            }
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ADMS.API.Entities.MatterActivityUser.AgeDays" -->
        <member name="P:ADMS.API.Entities.MatterActivityUser.ActivityDescription">
            <summary>
            Gets the formatted activity description for display purposes.
            </summary>
            <remarks>
            This computed property provides a human-readable description of the matter activity
            including user attribution, activity type, and timestamp information.
            </remarks>
            <example>
            <code>
            Console.WriteLine(activityUser.ActivityDescription);
            // Output: "rbrown performed CREATED on matter 'Corporate Case' at 2024-01-15 10:30 UTC"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.Equals(ADMS.API.Entities.MatterActivityUser)">
            <summary>
            Determines whether the specified MatterActivityUser is equal to the current MatterActivityUser.
            </summary>
            <param name="other">The MatterActivityUser to compare with the current MatterActivityUser.</param>
            <returns>true if the specified MatterActivityUser is equal to the current MatterActivityUser; otherwise, false.</returns>
            <remarks>
            Equality is determined by comparing all four components of the composite primary key:
            MatterId, MatterActivityId, UserId, and CreatedAt. This follows Entity Framework
            best practices for entities with composite keys.
            </remarks>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current MatterActivityUser.
            </summary>
            <param name="obj">The object to compare with the current MatterActivityUser.</param>
            <returns>true if the specified object is equal to the current MatterActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current MatterActivityUser.</returns>
            <remarks>
            The hash code is computed from all four components of the composite primary key
            to ensure consistent hashing behavior that aligns with the equality implementation.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ADMS.API.Entities.MatterActivityUser.CompareTo(ADMS.API.Entities.MatterActivityUser)" -->
        <member name="M:ADMS.API.Entities.MatterActivityUser.op_Equality(ADMS.API.Entities.MatterActivityUser,ADMS.API.Entities.MatterActivityUser)">
            <summary>
            Determines whether two MatterActivityUser instances are equal.
            </summary>
            <param name="left">The first MatterActivityUser to compare.</param>
            <param name="right">The second MatterActivityUser to compare.</param>
            <returns>true if the MatterActivityUsers are equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.op_Inequality(ADMS.API.Entities.MatterActivityUser,ADMS.API.Entities.MatterActivityUser)">
            <summary>
            Determines whether two MatterActivityUser instances are not equal.
            </summary>
            <param name="left">The first MatterActivityUser to compare.</param>
            <param name="right">The second MatterActivityUser to compare.</param>
            <returns>true if the MatterActivityUsers are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.op_LessThan(ADMS.API.Entities.MatterActivityUser,ADMS.API.Entities.MatterActivityUser)">
            <summary>
            Determines whether one MatterActivityUser precedes another in the ordering.
            </summary>
            <param name="left">The first MatterActivityUser to compare.</param>
            <param name="right">The second MatterActivityUser to compare.</param>
            <returns>true if the left MatterActivityUser precedes the right MatterActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.op_LessThanOrEqual(ADMS.API.Entities.MatterActivityUser,ADMS.API.Entities.MatterActivityUser)">
            <summary>
            Determines whether one MatterActivityUser precedes or is equal to another in the ordering.
            </summary>
            <param name="left">The first MatterActivityUser to compare.</param>
            <param name="right">The second MatterActivityUser to compare.</param>
            <returns>true if the left MatterActivityUser precedes or equals the right MatterActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.op_GreaterThan(ADMS.API.Entities.MatterActivityUser,ADMS.API.Entities.MatterActivityUser)">
            <summary>
            Determines whether one MatterActivityUser follows another in the ordering.
            </summary>
            <param name="left">The first MatterActivityUser to compare.</param>
            <param name="right">The second MatterActivityUser to compare.</param>
            <returns>true if the left MatterActivityUser follows the right MatterActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.op_GreaterThanOrEqual(ADMS.API.Entities.MatterActivityUser,ADMS.API.Entities.MatterActivityUser)">
            <summary>
            Determines whether one MatterActivityUser follows or is equal to another in the ordering.
            </summary>
            <param name="left">The first MatterActivityUser to compare.</param>
            <param name="right">The second MatterActivityUser to compare.</param>
            <returns>true if the left MatterActivityUser follows or equals the right MatterActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.ToString">
            <summary>
            Returns a string representation of the MatterActivityUser.
            </summary>
            <returns>A string that represents the current MatterActivityUser.</returns>
            <remarks>
            The string representation includes key identifying information about the activity,
            which is useful for debugging, logging, and audit trail display purposes.
            </remarks>
            <example>
            <code>
            var activityUser = new MatterActivityUser
            {
                MatterId = matterGuid,
                MatterActivityId = activityGuid,
                UserId = userGuid,
                CreatedAt = DateTime.UtcNow
            };
            
            Console.WriteLine(activityUser);
            // Output: "User rbrown performed CREATED on Matter 'Corporate Case' at 2024-01-15 10:30:00 UTC"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.IsCreationActivity">
            <summary>
            Determines whether this activity record represents a creation activity.
            </summary>
            <returns>true if this is a creation activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify creation activities without
            directly accessing the navigation property, which can help avoid lazy loading
            in performance-sensitive scenarios.
            </remarks>
            <example>
            <code>
            if (activityUser.IsCreationActivity())
            {
                // Handle creation-specific logic
                Console.WriteLine("This matter was created by: " + activityUser.User?.Name);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.IsArchivalActivity">
            <summary>
            Determines whether this activity record represents an archival activity.
            </summary>
            <returns>true if this is an archival activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify archival activities for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (activityUser.IsArchivalActivity())
            {
                // Handle archival-specific logic
                archiveLogger.LogArchival(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.IsDeletionActivity">
            <summary>
            Determines whether this activity record represents a deletion activity.
            </summary>
            <returns>true if this is a deletion activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify deletion activities for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (activityUser.IsDeletionActivity())
            {
                // Handle deletion-specific logic
                auditLogger.LogDeletion(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.IsRestorationActivity">
            <summary>
            Determines whether this activity record represents a restoration activity.
            </summary>
            <returns>true if this is a restoration activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify restoration activities for
            audit trail analysis and recovery operations.
            </remarks>
            <example>
            <code>
            if (activityUser.IsRestorationActivity())
            {
                // Handle restoration-specific logic
                recoveryLogger.LogRestoration(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.IsUnarchivalActivity">
            <summary>
            Determines whether this activity record represents an unarchival activity.
            </summary>
            <returns>true if this is an unarchival activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify unarchival activities for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (activityUser.IsUnarchivalActivity())
            {
                // Handle unarchival-specific logic
                unarchiveLogger.LogUnarchival(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.IsViewingActivity">
            <summary>
            Determines whether this activity record represents a viewing activity.
            </summary>
            <returns>true if this is a viewing activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify viewing activities for
            access tracking and analytics purposes.
            </remarks>
            <example>
            <code>
            if (activityUser.IsViewingActivity())
            {
                // Handle viewing-specific logic
                accessTracker.LogAccess(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.IsRecent(System.Double)">
            <summary>
            Determines whether this activity occurred recently within the specified timeframe.
            </summary>
            <param name="withinHours">The number of hours to consider as "recent".</param>
            <returns>true if the activity occurred within the specified timeframe; otherwise, false.</returns>
            <remarks>
            This method is useful for identifying recent matter activities for notifications,
            reporting, and real-time monitoring purposes.
            </remarks>
            <example>
            <code>
            // Check for activities in the last 24 hours
            if (activityUser.IsRecent(24))
            {
                notificationService.NotifyRecentActivity(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.IsAppropriateForMatterStatus(System.Boolean,System.Boolean)">
            <summary>
            Determines whether this activity is appropriate for the given matter context.
            </summary>
            <param name="isArchived">Whether the matter is currently archived.</param>
            <param name="isDeleted">Whether the matter is currently deleted.</param>
            <returns>true if the activity is appropriate for the context; otherwise, false.</returns>
            <remarks>
            This method uses the MatterActivityValidationHelper to validate business rules
            for activity context appropriateness.
            </remarks>
            <example>
            <code>
            bool canApply = activityUser.IsAppropriateForMatterStatus(false, false);  // true for normal matter
            bool cannotApply = activityUser.IsAppropriateForMatterStatus(true, false); // false for archived if trying to archive again
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.GetSeededActivityId(System.String)">
            <summary>
            Gets the seeded GUID for a specific activity name.
            </summary>
            <param name="activityName">The activity name to get the GUID for.</param>
            <returns>The seeded GUID if found; otherwise, Guid.Empty.</returns>
            <remarks>
            This method returns the specific GUIDs used in database seeding for standard activities,
            useful for business logic that needs to reference specific activity types.
            </remarks>
            <example>
            <code>
            var createdActivityId = MatterActivityUser.GetSeededActivityId("CREATED");
            // Returns: 20000000-0000-0000-0000-000000000001
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterActivityUser.Validate">
            <summary>
            Validates the current MatterActivityUser instance against business rules.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <remarks>
            This method performs comprehensive validation using MatterActivityValidationHelper
            including foreign key validation, timestamp validation, and activity appropriateness checking.
            </remarks>
            <example>
            <code>
            var validationResults = activityUser.Validate();
            if (validationResults.Any())
            {
                foreach (var error in validationResults)
                {
                    Console.WriteLine($"Validation Error: {error.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Entities.MatterDocumentActivity">
            <summary>
            Represents an activity performed on a matter document in the ADMS legal document management system.
            </summary>
            <remarks>
            The MatterDocumentActivity entity serves as a lookup table for the standardized activities that can be
            performed on documents within the context of legal matters. This entity is critical for maintaining
            comprehensive audit trails and ensuring consistent activity classification across all matter-document
            operations in the legal document management system.
            
            <para><strong>Key Characteristics:</strong></para>
            <list type="bullet">
            <item><strong>Static Reference Data:</strong> Contains predefined activity types seeded from database</item>
            <item><strong>Transfer Operations Focus:</strong> Specializes in document movement operations between matters</item>
            <item><strong>Audit Trail Foundation:</strong> Central classification system for matter document activities</item>
            <item><strong>Business Rule Enforcement:</strong> Ensures only valid transfer activities are recorded</item>
            <item><strong>Legal Compliance:</strong> Supports comprehensive audit requirements</item>
            <item><strong>Directional Tracking:</strong> Enables bidirectional document transfer audit trails</item>
            </list>
            
            <para><strong>Seeded Activities:</strong></para>
            The following transfer activities are seeded in AdmsContext.SeedMatterDocumentActivities:
            <list type="bullet">
            <item><strong>COPIED:</strong> Document copied from one matter to another (preserves original)</item>
            <item><strong>MOVED:</strong> Document moved from one matter to another (transfers ownership)</item>
            </list>
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key: GUID with identity generation</item>
            <item>Activity constraint: StringLength(50) with required validation</item>
            <item>Seeded data: Two standard matter document transfer activities</item>
            <item>Relationships: One-to-many with directional user association entities</item>
            </list>
            
            <para><strong>Transfer Operation Support:</strong></para>
            <list type="bullet">
            <item><strong>Bidirectional Tracking:</strong> From and To user associations for complete audit trails</item>
            <item><strong>Document Provenance:</strong> Maintains complete custody chains for legal documents</item>
            <item><strong>Matter Integration:</strong> Links document operations to specific legal cases</item>
            <item><strong>User Attribution:</strong> Tracks both source and destination users</item>
            </list>
            
            <para><strong>Legal Compliance Support:</strong></para>
            <list type="bullet">
            <item>Standardized activity classification for legal audit requirements</item>
            <item>Immutable reference data preserving audit trail integrity</item>
            <item>Complete user attribution through directional associations</item>
            <item>Support for regulatory reporting and compliance audits</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Activity names must match MatterDocumentActivityValidationHelper.AllowedActivities</item>
            <item>Activities are standardized and system-defined (not user-created)</item>
            <item>Each activity requires both "from" and "to" user associations for complete audit trails</item>
            <item>Activity names are case-insensitive but stored in uppercase</item>
            </list>
            
            <para><strong>Entity Framework Integration:</strong></para>
            The entity is configured in AdmsContext with:
            <list type="bullet">
            <item>Seeded data for standard matter document transfer activities</item>
            <item>Required relationships to directional user association entities</item>
            <item>NoAction cascade delete to preserve audit trail integrity</item>
            <item>Performance optimization for frequent lookup operations</item>
            </list>
            
            <para><strong>Relationship Architecture:</strong></para>
            <list type="bullet">
            <item><strong>MatterDocumentActivityUserFrom:</strong> Tracks source users who initiated transfers</item>
            <item><strong>MatterDocumentActivityUserTo:</strong> Tracks destination users who received transfers</item>
            <item><strong>MatterDocumentActivityUser:</strong> Central junction for general matter-document activities</item>
            </list>
            </remarks>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivity.Id">
            <summary>
            Gets or sets the unique identifier for the matter document activity.
            </summary>
            <remarks>
            This GUID serves as the primary key and is automatically generated when the activity is created.
            For seeded activities, specific GUIDs are used to ensure consistency across deployments and
            enable reliable reference in business logic and reporting.
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key with identity generation</item>
            <item>Non-nullable and required for all operations</item>
            <item>Used as foreign key in directional user association entities</item>
            <item>Seeded with specific GUIDs for standard transfer activities</item>
            </list>
            
            <para><strong>Seeded Activity IDs:</strong></para>
            <list type="bullet">
            <item>COPIED: 40000000-0000-0000-0000-000000000001</item>
            <item>MOVED: 40000000-0000-0000-0000-000000000002</item>
            </list>
            
            <para><strong>Usage Considerations:</strong></para>
            The ID remains constant throughout the activity's lifecycle and is used for all
            audit trail associations, business logic references, and reporting operations.
            </remarks>
            <example>
            <code>
            var activity = new MatterDocumentActivity 
            { 
                Activity = "CUSTOM_TRANSFER"
            };
            // ID will be automatically generated when saved to database
            
            // Accessing seeded activity
            var copiedActivityId = Guid.Parse("40000000-0000-0000-0000-000000000001");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivity.Activity">
            <summary>
            Gets or sets the description of the matter document activity.
            </summary>
            <remarks>
            The activity name serves as the primary identifier and classifier for matter document operations.
            This field must conform to the standardized activity names defined in 
            MatterDocumentActivityValidationHelper.AllowedActivities to ensure consistency across the system.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Required field - cannot be null or empty</item>
            <item>Maximum length: 50 characters (database constraint)</item>
            <item>Minimum length: 2 characters (business rule)</item>
            <item>Must be one of the allowed activities from MatterDocumentActivityValidationHelper</item>
            <item>Must contain only letters, numbers, and underscores</item>
            <item>Must contain at least one letter</item>
            <item>Cannot use reserved activity names</item>
            </list>
            
            <para><strong>Standard Activities:</strong></para>
            <list type="bullet">
            <item><strong>COPIED:</strong> Document copied between matters (preserves original)</item>
            <item><strong>MOVED:</strong> Document moved between matters (transfers ownership)</item>
            </list>
            
            <para><strong>Business Context:</strong></para>
            Activity names are used throughout the system for:
            <list type="bullet">
            <item>Document transfer classification and reporting</item>
            <item>Business rule enforcement and workflow control</item>
            <item>User interface display and activity filtering</item>
            <item>Legal compliance reporting and analysis</item>
            <item>Audit trail generation and document provenance tracking</item>
            </list>
            
            <para><strong>Validation Integration:</strong></para>
            Activity names are validated using MatterDocumentActivityValidationHelper to ensure
            they conform to business rules and legal compliance requirements.
            </remarks>
            <example>
            <code>
            // Standard seeded activities
            var copiedActivity = new MatterDocumentActivity { Activity = "COPIED" };
            var movedActivity = new MatterDocumentActivity { Activity = "MOVED" };
            
            // Validation example
            bool isValid = Common.MatterDocumentActivityValidationHelper.IsActivityAllowed(copiedActivity.Activity);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivity.MatterDocumentActivityUsersFrom">
            <summary>
            Gets or sets the collection of "from" user associations for this activity.
            </summary>
            <remarks>
            This collection maintains the one-to-many relationship between this matter document activity
            and the source-side user associations. Each association represents a specific instance of
            this activity being initiated by a user from a source matter to transfer a document.
            
            <para><strong>Source-Side Tracking:</strong></para>
            Each association in this collection provides:
            <list type="bullet">
            <item>Source matter identification - where the document originated</item>
            <item>User attribution - who initiated the document transfer</item>
            <item>Document context - which specific document was transferred</item>
            <item>Temporal tracking - when the transfer was initiated</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured in AdmsContext.ConfigureMatterDocumentActivityUserFrom</item>
            <item>One-to-many relationship from activity to user associations</item>
            <item>Composite primary key includes ActivityId in the From entity</item>
            <item>NoAction cascade behavior preserves audit trail integrity</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Activity-based source tracking for audit trails</item>
            <item>User initiation reporting and monitoring</item>
            <item>Document provenance analysis</item>
            <item>Transfer pattern analysis and optimization</item>
            </list>
            
            <para><strong>Performance Considerations:</strong></para>
            The virtual modifier enables lazy loading, but consider explicit loading or
            projections when working with multiple activities to avoid N+1 query issues.
            </remarks>
            <example>
            <code>
            // Accessing users who initiated this type of transfer
            foreach (var fromUser in matterDocumentActivity.MatterDocumentActivityUsersFrom)
            {
                Console.WriteLine($"User {fromUser.User?.Name} initiated {matterDocumentActivity.Activity} " +
                                 $"from matter {fromUser.Matter?.Description} at {fromUser.CreatedAt}");
            }
            
            // Finding source patterns for MOVED activities
            var movedActivity = activities.FirstOrDefault(a => a.Activity == "MOVED");
            var sourceMatters = movedActivity?.MatterDocumentActivityUsersFrom
                .Select(f => f.Matter)
                .Distinct();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivity.MatterDocumentActivityUsersTo">
            <summary>
            Gets or sets the collection of "to" user associations for this activity.
            </summary>
            <remarks>
            This collection maintains the one-to-many relationship between this matter document activity
            and the destination-side user associations. Each association represents a specific instance of
            this activity being received by a user at a destination matter for document transfers.
            
            <para><strong>Destination-Side Tracking:</strong></para>
            Each association in this collection provides:
            <list type="bullet">
            <item>Destination matter identification - where the document was transferred to</item>
            <item>User attribution - who received the document transfer</item>
            <item>Document context - which specific document was received</item>
            <item>Temporal tracking - when the transfer was completed</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured in AdmsContext.ConfigureMatterDocumentActivityUserTo</item>
            <item>One-to-many relationship from activity to user associations</item>
            <item>Composite primary key includes ActivityId in the To entity</item>
            <item>NoAction cascade behavior preserves audit trail integrity</item>
            </list>
            
            <para><strong>Bidirectional Tracking:</strong></para>
            <list type="bullet">
            <item>Complements MatterDocumentActivityUsersFrom for complete audit trails</item>
            <item>Enables comprehensive document custody chain analysis</item>
            <item>Supports legal discovery and compliance requirements</item>
            <item>Facilitates transfer completion verification</item>
            </list>
            
            <para><strong>Legal Compliance:</strong></para>
            The bidirectional tracking ensures complete accountability for document transfers,
            supporting legal practice requirements for maintaining accurate records of document
            custody and access chains between matters.
            </remarks>
            <example>
            <code>
            // Accessing users who received this type of transfer
            foreach (var toUser in matterDocumentActivity.MatterDocumentActivityUsersTo)
            {
                Console.WriteLine($"User {toUser.User?.Name} received {matterDocumentActivity.Activity} " +
                                 $"to matter {toUser.Matter?.Description} at {toUser.CreatedAt}");
            }
            
            // Analyzing destination patterns for COPIED activities
            var copiedActivity = activities.FirstOrDefault(a => a.Activity == "COPIED");
            var destinationMatters = copiedActivity?.MatterDocumentActivityUsersTo
                .GroupBy(t => t.Matter)
                .Select(g => new { Matter = g.Key, Count = g.Count() })
                .OrderByDescending(x => x.Count);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivity.MatterDocumentActivityUsers">
            <summary>
            Gets or sets the collection of general user associations for this activity.
            </summary>
            <remarks>
            This collection maintains the relationship to the central junction entity that tracks
            matter-document activities in a unified manner, complementing the directional From/To
            tracking with general activity associations.
            
            <para><strong>Central Activity Tracking:</strong></para>
            This collection provides:
            <list type="bullet">
            <item>Unified view of all matter-document activities</item>
            <item>General activity tracking beyond directional transfers</item>
            <item>Simplified queries for activity-based reporting</item>
            <item>Integration with broader audit trail systems</item>
            </list>
            
            <para><strong>Relationship Context:</strong></para>
            While the From/To collections track directional document transfers, this collection
            provides a central point for all matter-document activity tracking, supporting both
            transfer operations and other potential future activity types.
            </remarks>
            <example>
            <code>
            // Accessing all general activity associations
            var totalActivityCount = matterDocumentActivity.MatterDocumentActivityUsers.Count;
            var uniqueUsers = matterDocumentActivity.MatterDocumentActivityUsers
                .Select(a => a.User)
                .Distinct();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivity.HasUserAssociations">
            <summary>
            Gets a value indicating whether this activity has any recorded user associations.
            </summary>
            <remarks>
            This property is useful for determining activity usage and ensuring that
            activities are actually being used in the system. Activities without associations
            may indicate unused system features or configuration issues.
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Activity usage analysis and reporting</item>
            <item>System configuration validation</item>
            <item>Feature utilization monitoring</item>
            <item>Data cleanup and maintenance operations</item>
            </list>
            
            <para><strong>Performance Note:</strong></para>
            This property triggers database queries to count related entities. Consider using
            explicit loading or projections when working with multiple activities to avoid N+1 queries.
            </remarks>
            <example>
            <code>
            if (!matterDocumentActivity.HasUserAssociations)
            {
                logger.LogInformation($"Activity {matterDocumentActivity.Activity} has no user associations");
            }
            
            // Finding unused activities
            var unusedActivities = activities.Where(a => !a.HasUserAssociations).ToList();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivity.TotalUsageCount">
            <summary>
            Gets the total count of user associations across all relationship types.
            </summary>
            <remarks>
            This computed property provides insight into the frequency of use for this activity
            type, including both directional (From/To) and general associations.
            
            <para><strong>Performance Note:</strong></para>
            This property triggers database queries to count related entities. Consider using
            explicit loading or projections when working with multiple activities to avoid N+1 queries.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Activity {matterDocumentActivity.Activity} has been used {matterDocumentActivity.TotalUsageCount} times");
            
            // Finding most used activities
            var mostUsedActivities = activities
                .OrderByDescending(a => a.TotalUsageCount)
                .Take(10);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivity.UniqueUserCount">
            <summary>
            Gets the count of unique users who have performed this activity.
            </summary>
            <remarks>
            This computed property provides insight into the breadth of user engagement
            with this activity type across all association types.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Activity {matterDocumentActivity.Activity} has been performed by {matterDocumentActivity.UniqueUserCount} different users");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivity.IsStandardActivity">
            <summary>
            Gets a value indicating whether this activity is one of the standard seeded activities.
            </summary>
            <remarks>
            This property identifies whether the activity is one of the standard system-defined
            transfer activities or a custom activity. Standard activities are those seeded in the
            database and validated by MatterDocumentActivityValidationHelper.
            </remarks>
            <example>
            <code>
            if (matterDocumentActivity.IsStandardActivity)
            {
                // Apply standard business rules
            }
            else
            {
                // Handle custom activity logic
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivity.NormalizedActivity">
            <summary>
            Gets the normalized version of the activity name.
            </summary>
            <remarks>
            This property provides a normalized version of the activity name following
            the normalization rules from MatterDocumentActivityValidationHelper for consistent
            comparison and storage operations.
            </remarks>
            <example>
            <code>
            var normalized = matterDocumentActivity.NormalizedActivity; // Always uppercase, trimmed
            bool areEqual = matterDocumentActivity.NormalizedActivity == other.NormalizedActivity;
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivity.HasBalancedDirectionalTracking">
            <summary>
            Gets a value indicating whether this activity has balanced directional associations.
            </summary>
            <remarks>
            This property checks if the activity has balanced From and To associations, which is
            important for transfer activities where each transfer should have both source and
            destination tracking for complete audit trails.
            </remarks>
            <example>
            <code>
            if (!matterDocumentActivity.HasBalancedDirectionalTracking)
            {
                logger.LogWarning($"Activity {matterDocumentActivity.Activity} has unbalanced directional tracking");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.Equals(ADMS.API.Entities.MatterDocumentActivity)">
            <summary>
            Determines whether the specified MatterDocumentActivity is equal to the current MatterDocumentActivity.
            </summary>
            <param name="other">The MatterDocumentActivity to compare with the current MatterDocumentActivity.</param>
            <returns>true if the specified MatterDocumentActivity is equal to the current MatterDocumentActivity; otherwise, false.</returns>
            <remarks>
            Equality is determined by comparing the Id property, as each activity has a unique identifier.
            This follows Entity Framework best practices for entity equality comparison.
            </remarks>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current MatterDocumentActivity.
            </summary>
            <param name="obj">The object to compare with the current MatterDocumentActivity.</param>
            <returns>true if the specified object is equal to the current MatterDocumentActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current MatterDocumentActivity.</returns>
            <remarks>
            The hash code is based on the Id property to ensure consistent hashing behavior
            that aligns with the equality implementation.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ADMS.API.Entities.MatterDocumentActivity.CompareTo(ADMS.API.Entities.MatterDocumentActivity)" -->
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.op_Equality(ADMS.API.Entities.MatterDocumentActivity,ADMS.API.Entities.MatterDocumentActivity)">
            <summary>
            Determines whether two MatterDocumentActivity instances are equal.
            </summary>
            <param name="left">The first MatterDocumentActivity to compare.</param>
            <param name="right">The second MatterDocumentActivity to compare.</param>
            <returns>true if the MatterDocumentActivities are equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.op_Inequality(ADMS.API.Entities.MatterDocumentActivity,ADMS.API.Entities.MatterDocumentActivity)">
            <summary>
            Determines whether two MatterDocumentActivity instances are not equal.
            </summary>
            <param name="left">The first MatterDocumentActivity to compare.</param>
            <param name="right">The second MatterDocumentActivity to compare.</param>
            <returns>true if the MatterDocumentActivities are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.op_LessThan(ADMS.API.Entities.MatterDocumentActivity,ADMS.API.Entities.MatterDocumentActivity)">
            <summary>
            Determines whether one MatterDocumentActivity precedes another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivity to compare.</param>
            <param name="right">The second MatterDocumentActivity to compare.</param>
            <returns>true if the left MatterDocumentActivity precedes the right MatterDocumentActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.op_LessThanOrEqual(ADMS.API.Entities.MatterDocumentActivity,ADMS.API.Entities.MatterDocumentActivity)">
            <summary>
            Determines whether one MatterDocumentActivity precedes or is equal to another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivity to compare.</param>
            <param name="right">The second MatterDocumentActivity to compare.</param>
            <returns>true if the left MatterDocumentActivity precedes or equals the right MatterDocumentActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.op_GreaterThan(ADMS.API.Entities.MatterDocumentActivity,ADMS.API.Entities.MatterDocumentActivity)">
            <summary>
            Determines whether one MatterDocumentActivity follows another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivity to compare.</param>
            <param name="right">The second MatterDocumentActivity to compare.</param>
            <returns>true if the left MatterDocumentActivity follows the right MatterDocumentActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.op_GreaterThanOrEqual(ADMS.API.Entities.MatterDocumentActivity,ADMS.API.Entities.MatterDocumentActivity)">
            <summary>
            Determines whether one MatterDocumentActivity follows or is equal to another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivity to compare.</param>
            <param name="right">The second MatterDocumentActivity to compare.</param>
            <returns>true if the left MatterDocumentActivity follows or equals the right MatterDocumentActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.ToString">
            <summary>
            Returns a string representation of the MatterDocumentActivity.
            </summary>
            <returns>A string that represents the current MatterDocumentActivity.</returns>
            <remarks>
            The string representation includes key identifying information about the activity,
            which is useful for debugging, logging, and display purposes.
            </remarks>
            <example>
            <code>
            var activity = new MatterDocumentActivity 
            { 
                Id = Guid.Parse("40000000-0000-0000-0000-000000000001"), 
                Activity = "COPIED"
            };
            
            Console.WriteLine(activity);
            // Output: "MatterDocumentActivity: COPIED (40000000-0000-0000-0000-000000000001)"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.IsCopyActivity">
            <summary>
            Determines whether this activity represents a copy operation.
            </summary>
            <returns>true if this is a copy activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify copy activities for
            business rule enforcement and audit trail analysis.
            </remarks>
            <example>
            <code>
            if (matterDocumentActivity.IsCopyActivity())
            {
                // Apply copy-specific business rules
                Console.WriteLine("This is a document copy activity");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.IsMoveActivity">
            <summary>
            Determines whether this activity represents a move operation.
            </summary>
            <returns>true if this is a move activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify move activities for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (matterDocumentActivity.IsMoveActivity())
            {
                // Apply move-specific business rules
                auditLogger.LogMove(matterDocumentActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.IsTransferActivity">
            <summary>
            Determines whether this activity represents a transfer operation (either move or copy).
            </summary>
            <returns>true if this is a transfer activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify any type of document transfer
            activity for business rule enforcement and workflow analysis.
            </remarks>
            <example>
            <code>
            if (matterDocumentActivity.IsTransferActivity())
            {
                // Apply transfer-specific business rules
                transferService.ProcessTransfer(matterDocumentActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.RequiresBidirectionalAssociations">
            <summary>
            Determines whether this activity requires bidirectional user associations.
            </summary>
            <returns>true if the activity requires both from and to user associations; otherwise, false.</returns>
            <remarks>
            This method uses the MatterDocumentActivityValidationHelper to validate business rules
            for activity context requirements, specifically whether the activity needs both
            source and destination user attribution.
            </remarks>
            <example>
            <code>
            bool requiresBidirectional = activity.RequiresBidirectionalAssociations(); // true for MOVED/COPIED
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.GetSeededActivityId(System.String)">
            <summary>
            Gets the seeded GUID for a specific activity name.
            </summary>
            <param name="activityName">The activity name to get the GUID for.</param>
            <returns>The seeded GUID if found; otherwise, Guid.Empty.</returns>
            <remarks>
            This method returns the specific GUIDs used in database seeding for standard activities,
            useful for business logic that needs to reference specific activity types.
            </remarks>
            <example>
            <code>
            var copiedActivityId = MatterDocumentActivity.GetSeededActivityId("COPIED");
            // Returns: 40000000-0000-0000-0000-000000000001
            
            var movedActivityId = MatterDocumentActivity.GetSeededActivityId("MOVED");
            // Returns: 40000000-0000-0000-0000-000000000002
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.GetTransferStatistics">
            <summary>
            Gets transfer statistics for this activity.
            </summary>
            <returns>A dictionary containing transfer statistics.</returns>
            <remarks>
            This method provides insights into the transfer patterns and usage of this activity
            for reporting and analysis purposes.
            </remarks>
            <example>
            <code>
            var stats = matterDocumentActivity.GetTransferStatistics();
            Console.WriteLine($"Total transfers: {stats["TotalTransfers"]}");
            Console.WriteLine($"Unique users: {stats["UniqueUsers"]}");
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivity.Validate">
            <summary>
            Validates the current MatterDocumentActivity instance against business rules.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <remarks>
            This method performs comprehensive validation using MatterDocumentActivityValidationHelper
            including activity name validation, length constraints, and business rule compliance.
            </remarks>
            <example>
            <code>
            var validationResults = matterDocumentActivity.Validate();
            if (validationResults.Any())
            {
                foreach (var error in validationResults)
                {
                    Console.WriteLine($"Validation Error: {error.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Entities.MatterDocumentActivityUser">
            <summary>
            Represents the linkage of a user to a matter document activity in the ADMS legal document management system.
            </summary>
            <remarks>
            The MatterDocumentActivityUser entity serves as the central junction table for document activities performed
            on documents within matters by users in the legal document management system. This entity provides comprehensive
            audit trails for document operations within the context of legal matters, ensuring complete traceability and
            accountability for all document-related activities.
            
            <para><strong>Key Characteristics:</strong></para>
            <list type="bullet">
            <item><strong>Comprehensive Audit Trail:</strong> Tracks all document activities within matter contexts</item>
            <item><strong>Composite Primary Key:</strong> Ensures uniqueness while allowing temporal tracking</item>
            <item><strong>User Attribution:</strong> Links document activities to responsible users</item>
            <item><strong>Matter Integration:</strong> Connects document activities to specific legal cases</item>
            <item><strong>Temporal Tracking:</strong> Maintains precise timestamps for all activities</item>
            <item><strong>Legal Compliance:</strong> Supports comprehensive audit requirements</item>
            </list>
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Composite primary key: MatterId + DocumentId + MatterDocumentActivityId + UserId + CreatedAt</item>
            <item>All foreign key relationships are required</item>
            <item>NoAction cascade delete to preserve audit trail integrity</item>
            <item>Indexed on CreatedAt for temporal queries</item>
            </list>
            
            <para><strong>Document Activities Supported:</strong></para>
            This entity tracks various document activities within matter contexts:
            <list type="bullet">
            <item><strong>MOVED:</strong> Document moved between matters</item>
            <item><strong>COPIED:</strong> Document copied between matters</item>
            <item>Additional activities as supported by MatterDocumentActivity seeded data</item>
            </list>
            
            <para><strong>Audit Trail Functionality:</strong></para>
            This entity enables comprehensive tracking of matter-document activities:
            <list type="bullet">
            <item><strong>Who:</strong> Which user performed the document activity</item>
            <item><strong>What:</strong> What type of activity was performed (MOVED/COPIED)</item>
            <item><strong>Where:</strong> Which matter and document were involved</item>
            <item><strong>When:</strong> Precise timestamp of the activity</item>
            </list>
            
            <para><strong>Legal Compliance Support:</strong></para>
            <list type="bullet">
            <item>Complete document activity chains for legal discovery</item>
            <item>Matter-specific audit trails for case management</item>
            <item>User accountability for document operations</item>
            <item>Temporal tracking for legal timeline reconstruction</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Every matter document activity must be attributed to a user</item>
            <item>Activities must be associated with valid matters and documents</item>
            <item>Multiple activities of the same type can occur with different timestamps</item>
            <item>CreatedAt timestamp must be within reasonable bounds</item>
            <item>All foreign key relationships must reference valid entities</item>
            </list>
            
            <para><strong>Relationship to Directional Classes:</strong></para>
            While MatterDocumentActivityUserFrom and MatterDocumentActivityUserTo track the directional
            aspects of document transfers, this entity serves as the central record for all matter-document
            activities, providing a unified view of document operations within matter contexts.
            
            <para><strong>Entity Framework Configuration:</strong></para>
            The entity is configured in AdmsContext with:
            <list type="bullet">
            <item>Composite key including all five core properties</item>
            <item>Required relationships to Matter, Document, MatterDocumentActivity, and User</item>
            <item>NoAction cascade behaviors to maintain audit trail integrity</item>
            <item>Performance indexes on commonly queried fields</item>
            </list>
            </remarks>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUser.MatterId">
            <summary>
            Gets or sets the unique identifier of the matter.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the matter where the document
            activity was performed. It forms part of the composite primary key and is required for
            all matter document activity user associations.
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to Matter entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>NoAction cascade delete to preserve audit trail integrity</item>
            </list>
            
            <para><strong>Business Context:</strong></para>
            <list type="bullet">
            <item>Represents the matter where the document activity occurred</item>
            <item>Links activity to specific legal case or project</item>
            <item>Enables matter-scoped document activity queries</item>
            <item>Supports matter-level audit trail aggregation</item>
            </list>
            
            <para><strong>Legal Significance:</strong></para>
            The matter ID is crucial for legal document management as it establishes the context
            within which document activities occur, supporting case management and legal compliance
            requirements for document operation tracking.
            </remarks>
            <example>
            <code>
            var activityUser = new MatterDocumentActivityUser
            {
                MatterId = legalMatter.Id,  // Must reference valid matter
                DocumentId = document.Id,
                MatterDocumentActivityId = activityId,
                UserId = performingUser.Id,
                CreatedAt = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUser.DocumentId">
            <summary>
            Gets or sets the unique identifier of the document.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the document on which the
            activity was performed. It forms part of the composite primary key and identifies the
            specific document involved in the matter document activity.
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to Document entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>NoAction cascade delete to preserve audit trail integrity</item>
            </list>
            
            <para><strong>Activity Context:</strong></para>
            <list type="bullet">
            <item>Identifies the specific document being operated on</item>
            <item>Links activity to document metadata and content</item>
            <item>Enables document-scoped activity history queries</item>
            <item>Supports document lifecycle tracking</item>
            </list>
            
            <para><strong>Audit Trail Integration:</strong></para>
            The document association enables comprehensive tracking of all activities performed
            on documents within matter contexts, supporting legal discovery, compliance audits,
            and case management requirements for maintaining accurate document operation records.
            </remarks>
            <example>
            <code>
            var activityUser = new MatterDocumentActivityUser
            {
                DocumentId = legalDocument.Id,  // Must reference valid document
                MatterId = matter.Id,
                MatterDocumentActivityId = activityId,
                UserId = performingUser.Id,
                CreatedAt = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUser.MatterDocumentActivityId">
            <summary>
            Gets or sets the unique identifier of the matter document activity.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the matter document activity type
            that was performed. It forms part of the composite primary key and must reference a valid
            matter document activity from the seeded data (such as MOVED or COPIED).
            
            <para><strong>Activity Types:</strong></para>
            Must reference one of the seeded matter document activities:
            <list type="bullet">
            <item><strong>MOVED:</strong> Document moved between matters</item>
            <item><strong>COPIED:</strong> Document copied between matters</item>
            </list>
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to MatterDocumentActivity entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>NoAction cascade delete to preserve audit integrity</item>
            </list>
            
            <para><strong>Validation Integration:</strong></para>
            The MatterDocumentActivityId is validated using MatterDocumentActivityValidationHelper
            to ensure it references a valid, allowed activity type for matter document operations.
            </remarks>
            <example>
            <code>
            // Linking to a MOVED activity (seeded ID: 40000000-0000-0000-0000-000000000002)
            var movedActivityId = Guid.Parse("40000000-0000-0000-0000-000000000002");
            var activityUser = new MatterDocumentActivityUser
            {
                MatterDocumentActivityId = movedActivityId,  // Must be valid activity
                // ... other properties
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUser.UserId">
            <summary>
            Gets or sets the unique identifier of the user who performed the activity.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the user who performed the
            matter document activity. It forms part of the composite primary key and provides
            essential user attribution for audit trail purposes.
            
            <para><strong>User Attribution:</strong></para>
            <list type="bullet">
            <item>Links activity to responsible user for accountability</item>
            <item>Enables user-scoped matter document activity reporting</item>
            <item>Supports legal compliance and audit requirements</item>
            <item>Facilitates user activity analytics and monitoring</item>
            </list>
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to User entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>NoAction cascade delete to preserve audit integrity</item>
            </list>
            
            <para><strong>Legal Significance:</strong></para>
            User attribution is critical for:
            <list type="bullet">
            <item>Document activity accountability and legal discovery</item>
            <item>Professional responsibility tracking for document operations</item>
            <item>Evidence of who performed specific matter document activities</item>
            <item>Compliance with legal practice standards for document management</item>
            </list>
            </remarks>
            <example>
            <code>
            // Attributing document activity to a specific user
            var activityUser = new MatterDocumentActivityUser
            {
                UserId = performingUser.Id,  // Must reference valid user
                MatterId = matter.Id,
                DocumentId = document.Id,
                MatterDocumentActivityId = activityId,
                CreatedAt = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUser.CreatedAt">
            <summary>
            Gets or sets the date and time when this activity entry was created (in UTC).
            </summary>
            <remarks>
            This property maintains the precise timestamp of when the matter document activity
            occurred. It forms part of the composite primary key, enabling multiple activities of
            the same type with different timestamps while maintaining uniqueness.
            
            <para><strong>Temporal Tracking:</strong></para>
            <list type="bullet">
            <item>Provides precise timing for matter document activity audit trails</item>
            <item>Enables temporal analysis of document operation patterns</item>
            <item>Supports legal timeline reconstruction for case management</item>
            <item>Facilitates workflow and process analysis</item>
            </list>
            
            <para><strong>Date Requirements:</strong></para>
            <list type="bullet">
            <item>Must be stored in UTC format for consistency</item>
            <item>Cannot be earlier than system minimum date</item>
            <item>Cannot be in the future (with tolerance for clock skew)</item>
            <item>Forms part of composite primary key for uniqueness</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Automatically set to current UTC time when not specified</item>
            <item>Should reflect the actual time the document activity occurred</item>
            <item>Used for chronological ordering in audit reports</item>
            <item>Critical for legal compliance and document activity tracking</item>
            </list>
            
            <para><strong>Validation:</strong></para>
            The CreatedAt timestamp is validated using RevisionValidationHelper date validation
            methods to ensure it falls within acceptable ranges for legal document management.
            </remarks>
            <example>
            <code>
            var activityUser = new MatterDocumentActivityUser
            {
                CreatedAt = DateTime.UtcNow,  // Always use UTC
                // ... other properties
            };
            
            // For historical data import
            var historicalActivity = new MatterDocumentActivityUser
            {
                CreatedAt = specificUtcDateTime,  // Specific historical timestamp
                // ... other properties
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUser.Matter">
            <summary>
            Gets or sets the matter associated with this activity.
            </summary>
            <remarks>
            This navigation property provides access to the matter where the document activity was
            performed. The relationship is established through the MatterId foreign key and enables
            rich querying and navigation within Entity Framework for matter-specific operations.
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses MatterId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>NoAction cascade delete behavior preserves audit trail integrity</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Accessing matter metadata from activity context</item>
            <item>Matter-level document activity operations and reporting</item>
            <item>Audit trail reporting including matter information</item>
            <item>Cross-matter document activity analysis</item>
            </list>
            
            <para><strong>Performance Considerations:</strong></para>
            The virtual modifier enables lazy loading, but consider explicit loading or
            projections when working with multiple activities to avoid N+1 query issues.
            </remarks>
            <example>
            <code>
            // Accessing matter information through activity
            var matterName = activityUser.Matter?.Description;
            var matterCreationDate = activityUser.Matter?.CreationDate;
            
            // Using explicit loading to avoid N+1 queries
            await context.Entry(activityUser)
                .Reference(a => a.Matter)
                .LoadAsync();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUser.Document">
            <summary>
            Gets or sets the document associated with this activity.
            </summary>
            <remarks>
            This navigation property provides access to the document on which the activity was
            performed. The relationship is established through the DocumentId foreign key and
            enables access to document metadata, content, and related information.
            
            <para><strong>Document Information Access:</strong></para>
            Provides access to:
            <list type="bullet">
            <item>Document metadata including filename, size, and content type</item>
            <item>Document content and version information</item>
            <item>Related document operations and audit trails</item>
            <item>Cross-document activity analysis and reporting</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses DocumentId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>NoAction cascade delete behavior preserves audit trail integrity</item>
            </list>
            
            <para><strong>Audit Trail Integration:</strong></para>
            <list type="bullet">
            <item>Document-centric audit trail analysis and reporting</item>
            <item>Document lifecycle tracking within matter contexts</item>
            <item>Legal discovery and compliance support</item>
            <item>Cross-document activity pattern analysis</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing document information through activity
            var documentName = activityUser.Document?.FileName;
            var documentSize = activityUser.Document?.FileSize;
            
            // Document activity history analysis
            var allActivities = activityUser.Document?.MatterDocumentActivityUsers
                .OrderBy(a => a.CreatedAt);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUser.MatterDocumentActivity">
            <summary>
            Gets or sets the matter document activity associated with this user.
            </summary>
            <remarks>
            This navigation property provides access to the matter document activity type that was
            performed. The relationship is established through the MatterDocumentActivityId foreign
            key and enables access to activity metadata and classification.
            
            <para><strong>Activity Information Access:</strong></para>
            Provides access to:
            <list type="bullet">
            <item>Activity type name (MOVED, COPIED, etc.)</item>
            <item>Activity metadata and configuration</item>
            <item>Activity validation rules and constraints</item>
            <item>Cross-activity analysis and reporting</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses MatterDocumentActivityId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>NoAction cascade delete behavior preserves audit integrity</item>
            </list>
            
            <para><strong>Business Logic Integration:</strong></para>
            <list type="bullet">
            <item>Activity-specific business rule enforcement</item>
            <item>Activity categorization and reporting</item>
            <item>Workflow and process analysis</item>
            <item>Activity-based authorization and permissions</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing activity type information
            var activityType = activityUser.MatterDocumentActivity?.Activity;
            var isMoveOperation = activityType == "MOVED";
            
            // Activity-based filtering
            var copyOperations = activities
                .Where(a => a.MatterDocumentActivity?.Activity == "COPIED");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUser.User">
            <summary>
            Gets or sets the user associated with this activity.
            </summary>
            <remarks>
            This navigation property provides access to the user who performed the matter document
            activity. The relationship is established through the UserId foreign key and enables
            comprehensive user-based reporting and analysis.
            
            <para><strong>User Information Access:</strong></para>
            Provides access to:
            <list type="bullet">
            <item>User identification and contact information</item>
            <item>User activity patterns and behavior</item>
            <item>Professional attribution for legal compliance</item>
            <item>User-based reporting and analytics</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses UserId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>NoAction cascade delete behavior preserves audit integrity</item>
            </list>
            
            <para><strong>Legal and Compliance Support:</strong></para>
            <list type="bullet">
            <item>User accountability for matter document activities</item>
            <item>Professional responsibility tracking</item>
            <item>Legal discovery and audit trail support</item>
            <item>Compliance reporting and analysis</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing user information through activity
            var userName = activityUser.User?.Name;
            var userActivities = activityUser.User?.MatterDocumentActivityUsers;
            
            // User-based activity analysis
            var userActivityCount = user.MatterDocumentActivityUsers.Count;
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUser.HasValidReferences">
            <summary>
            Gets a value indicating whether this activity record has valid foreign key references.
            </summary>
            <remarks>
            This computed property validates that all required foreign key properties contain
            valid (non-empty) GUID values, ensuring referential integrity for matter document
            activities.
            
            <para><strong>Validation Checks:</strong></para>
            <list type="bullet">
            <item>MatterId is not Guid.Empty</item>
            <item>DocumentId is not Guid.Empty</item>
            <item>MatterDocumentActivityId is not Guid.Empty</item>
            <item>UserId is not Guid.Empty</item>
            </list>
            </remarks>
            <example>
            <code>
            if (!activityUser.HasValidReferences)
            {
                throw new InvalidOperationException("Activity record has invalid foreign key references");
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUser.HasValidTimestamp">
            <summary>
            Gets a value indicating whether the CreatedAt timestamp is within reasonable bounds.
            </summary>
            <remarks>
            This computed property uses the RevisionValidationHelper to validate that the
            CreatedAt timestamp falls within acceptable date ranges for the legal document
            management system.
            </remarks>
            <example>
            <code>
            if (!activityUser.HasValidTimestamp)
            {
                logger.LogWarning($"Activity record {activityUser} has invalid timestamp: {activityUser.CreatedAt}");
            }
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ADMS.API.Entities.MatterDocumentActivityUser.AgeDays" -->
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUser.ActivityDescription">
            <summary>
            Gets the formatted activity description for display purposes.
            </summary>
            <remarks>
            This computed property provides a human-readable description of the matter document
            activity including user attribution, activity type, and timestamp information.
            </remarks>
            <example>
            <code>
            Console.WriteLine(activityUser.ActivityDescription);
            // Output: "Document 'contract.pdf' MOVED in 'Corporate Matter' by rbrown at 2024-01-15 10:30 UTC"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUser.Equals(ADMS.API.Entities.MatterDocumentActivityUser)">
            <summary>
            Determines whether the specified MatterDocumentActivityUser is equal to the current MatterDocumentActivityUser.
            </summary>
            <param name="other">The MatterDocumentActivityUser to compare with the current MatterDocumentActivityUser.</param>
            <returns>true if the specified MatterDocumentActivityUser is equal to the current MatterDocumentActivityUser; otherwise, false.</returns>
            <remarks>
            Equality is determined by comparing all five components of the composite primary key:
            MatterId, DocumentId, MatterDocumentActivityId, UserId, and CreatedAt. This follows
            Entity Framework best practices for entities with composite keys.
            </remarks>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUser.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current MatterDocumentActivityUser.
            </summary>
            <param name="obj">The object to compare with the current MatterDocumentActivityUser.</param>
            <returns>true if the specified object is equal to the current MatterDocumentActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUser.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current MatterDocumentActivityUser.</returns>
            <remarks>
            The hash code is computed from all five components of the composite primary key
            to ensure consistent hashing behavior that aligns with the equality implementation.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ADMS.API.Entities.MatterDocumentActivityUser.CompareTo(ADMS.API.Entities.MatterDocumentActivityUser)" -->
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUser.op_Equality(ADMS.API.Entities.MatterDocumentActivityUser,ADMS.API.Entities.MatterDocumentActivityUser)">
            <summary>
            Determines whether two MatterDocumentActivityUser instances are equal.
            </summary>
            <param name="left">The first MatterDocumentActivityUser to compare.</param>
            <param name="right">The second MatterDocumentActivityUser to compare.</param>
            <returns>true if the MatterDocumentActivityUsers are equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUser.op_Inequality(ADMS.API.Entities.MatterDocumentActivityUser,ADMS.API.Entities.MatterDocumentActivityUser)">
            <summary>
            Determines whether two MatterDocumentActivityUser instances are not equal.
            </summary>
            <param name="left">The first MatterDocumentActivityUser to compare.</param>
            <param name="right">The second MatterDocumentActivityUser to compare.</param>
            <returns>true if the MatterDocumentActivityUsers are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUser.op_LessThan(ADMS.API.Entities.MatterDocumentActivityUser,ADMS.API.Entities.MatterDocumentActivityUser)">
            <summary>
            Determines whether one MatterDocumentActivityUser precedes another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivityUser to compare.</param>
            <param name="right">The second MatterDocumentActivityUser to compare.</param>
            <returns>true if the left MatterDocumentActivityUser precedes the right MatterDocumentActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUser.op_LessThanOrEqual(ADMS.API.Entities.MatterDocumentActivityUser,ADMS.API.Entities.MatterDocumentActivityUser)">
            <summary>
            Determines whether one MatterDocumentActivityUser precedes or is equal to another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivityUser to compare.</param>
            <param name="right">The second MatterDocumentActivityUser to compare.</param>
            <returns>true if the left MatterDocumentActivityUser precedes or equals the right MatterDocumentActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUser.op_GreaterThan(ADMS.API.Entities.MatterDocumentActivityUser,ADMS.API.Entities.MatterDocumentActivityUser)">
            <summary>
            Determines whether one MatterDocumentActivityUser follows another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivityUser to compare.</param>
            <param name="right">The second MatterDocumentActivityUser to compare.</param>
            <returns>true if the left MatterDocumentActivityUser follows the right MatterDocumentActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUser.op_GreaterThanOrEqual(ADMS.API.Entities.MatterDocumentActivityUser,ADMS.API.Entities.MatterDocumentActivityUser)">
            <summary>
            Determines whether one MatterDocumentActivityUser follows or is equal to another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivityUser to compare.</param>
            <param name="right">The second MatterDocumentActivityUser to compare.</param>
            <returns>true if the left MatterDocumentActivityUser follows or equals the right MatterDocumentActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUser.ToString">
            <summary>
            Returns a string representation of the MatterDocumentActivityUser.
            </summary>
            <returns>A string that represents the current MatterDocumentActivityUser.</returns>
            <remarks>
            The string representation includes key identifying information about the activity,
            which is useful for debugging, logging, and audit trail display purposes.
            </remarks>
            <example>
            <code>
            var activityUser = new MatterDocumentActivityUser
            {
                MatterId = matterGuid,
                DocumentId = documentGuid,
                MatterDocumentActivityId = activityGuid,
                UserId = userGuid,
                CreatedAt = DateTime.UtcNow
            };
            
            Console.WriteLine(activityUser);
            // Output: "Document MOVED in Matter 'Corporate Case' by rbrown at 2024-01-15 10:30:00 UTC"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUser.IsMoveOperation">
            <summary>
            Determines whether this activity record represents a move operation.
            </summary>
            <returns>true if this is a move operation; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify move operations without
            directly accessing the navigation property, which can help avoid lazy loading
            in performance-sensitive scenarios.
            </remarks>
            <example>
            <code>
            if (activityUser.IsMoveOperation())
            {
                // Handle move-specific logic
                Console.WriteLine("Document was moved in: " + activityUser.Matter?.Description);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUser.IsCopyOperation">
            <summary>
            Determines whether this activity record represents a copy operation.
            </summary>
            <returns>true if this is a copy operation; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify copy operations for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (activityUser.IsCopyOperation())
            {
                // Handle copy-specific logic
                auditLogger.LogDocumentCopy(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUser.IsRecent(System.Double)">
            <summary>
            Determines whether this activity occurred recently within the specified timeframe.
            </summary>
            <param name="withinHours">The number of hours to consider as "recent".</param>
            <returns>true if the activity occurred within the specified timeframe; otherwise, false.</returns>
            <remarks>
            This method is useful for identifying recent matter document activities for notifications,
            reporting, and real-time monitoring purposes.
            </remarks>
            <example>
            <code>
            // Check for activities in the last 24 hours
            if (activityUser.IsRecent(24))
            {
                notificationService.NotifyRecentActivity(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUser.GetSeededActivityId(System.String)">
            <summary>
            Gets the seeded GUID for a specific matter document activity name.
            </summary>
            <param name="activityName">The activity name to get the GUID for.</param>
            <returns>The seeded GUID if found; otherwise, Guid.Empty.</returns>
            <remarks>
            This method returns the specific GUIDs used in database seeding for standard
            matter document activities, useful for business logic that needs to reference
            specific activity types.
            </remarks>
            <example>
            <code>
            var copiedActivityId = MatterDocumentActivityUser.GetSeededActivityId("COPIED");
            // Returns: 40000000-0000-0000-0000-000000000001
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUser.Validate">
            <summary>
            Validates the current MatterDocumentActivityUser instance against business rules.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <remarks>
            This method performs comprehensive validation using MatterDocumentActivityValidationHelper
            and additional entity-specific business rules including foreign key validation,
            timestamp validation, and activity appropriateness checking.
            </remarks>
            <example>
            <code>
            var validationResults = activityUser.Validate();
            if (validationResults.Any())
            {
                foreach (var error in validationResults)
                {
                    Console.WriteLine($"Validation Error: {error.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Entities.MatterDocumentActivityUserFrom">
            <summary>
            Represents the linkage of a user to a "from" matter document activity in the ADMS legal document management system.
            </summary>
            <remarks>
            The MatterDocumentActivityUserFrom entity serves as a critical component of the directional audit trail system
            for document transfer operations between matters. This entity specifically tracks the source side of document
            transfers (moves and copies), working in conjunction with MatterDocumentActivityUserTo to provide complete
            bidirectional audit trails essential for legal document management compliance.
            
            <para><strong>Key Characteristics:</strong></para>
            <list type="bullet">
            <item><strong>Directional Audit Trail:</strong> Tracks source side of document transfers between matters</item>
            <item><strong>Composite Primary Key:</strong> Ensures uniqueness while allowing temporal tracking</item>
            <item><strong>User Attribution:</strong> Links document transfers to responsible source users</item>
            <item><strong>Temporal Tracking:</strong> Maintains precise timestamps for all transfer operations</item>
            <item><strong>Legal Compliance:</strong> Supports comprehensive audit requirements for document provenance</item>
            </list>
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Composite primary key: MatterId + DocumentId + MatterDocumentActivityId + UserId + CreatedAt</item>
            <item>All foreign key relationships are required</item>
            <item>NoAction cascade delete to preserve audit trail integrity</item>
            <item>Indexed on CreatedAt for temporal queries</item>
            </list>
            
            <para><strong>Transfer Operations Supported:</strong></para>
            <list type="bullet">
            <item><strong>MOVED:</strong> Document moved from this source matter to destination matter</item>
            <item><strong>COPIED:</strong> Document copied from this source matter to destination matter</item>
            </list>
            
            <para><strong>Audit Trail Functionality:</strong></para>
            This entity enables comprehensive tracking of document transfer sources:
            <list type="bullet">
            <item><strong>Who:</strong> Which user initiated the document transfer</item>
            <item><strong>What:</strong> What type of transfer operation occurred (MOVED/COPIED)</item>
            <item><strong>Where:</strong> Which matter and document were involved in the transfer</item>
            <item><strong>When:</strong> Precise timestamp of the transfer operation</item>
            </list>
            
            <para><strong>Legal Compliance Support:</strong></para>
            <list type="bullet">
            <item>Complete document custody chains for legal discovery</item>
            <item>Bidirectional audit trails for document provenance</item>
            <item>User accountability for document transfer initiation</item>
            <item>Temporal tracking for legal timeline reconstruction</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Every document transfer must be attributed to both source and destination users</item>
            <item>Multiple transfers of the same document can occur with different timestamps</item>
            <item>CreatedAt timestamp must be within reasonable bounds</item>
            <item>All foreign key relationships must reference valid entities</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            The entity is configured in AdmsContext.ConfigureMatterDocumentActivityUserFrom with:
            <list type="bullet">
            <item>Composite key including all five core properties</item>
            <item>Required relationships to Matter, Document, MatterDocumentActivity, and User</item>
            <item>NoAction cascade behaviors to maintain audit trail integrity</item>
            <item>Performance indexes on commonly queried fields</item>
            </list>
            </remarks>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserFrom.MatterId">
            <summary>
            Gets or sets the unique identifier of the source matter.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the source matter where the
            document was transferred from. It forms part of the composite primary key and is required
            for all matter document activity user associations.
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to Matter entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>NoAction cascade delete to preserve audit trail integrity</item>
            </list>
            
            <para><strong>Business Context:</strong></para>
            <list type="bullet">
            <item>Represents the source matter in document transfer operations</item>
            <item>Links transfer activity to specific legal case or project origin</item>
            <item>Enables matter-scoped document transfer queries</item>
            <item>Supports matter-level audit trail aggregation</item>
            </list>
            
            <para><strong>Legal Significance:</strong></para>
            The source matter ID is crucial for legal document management as it establishes
            where documents originated from, supporting case management and legal compliance
            requirements for document custody and provenance tracking.
            </remarks>
            <example>
            <code>
            var transferFrom = new MatterDocumentActivityUserFrom
            {
                MatterId = sourceMatter.Id,  // Must reference valid source matter
                DocumentId = document.Id,
                MatterDocumentActivityId = activityId,
                UserId = initiatingUser.Id,
                CreatedAt = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserFrom.DocumentId">
            <summary>
            Gets or sets the unique identifier of the document being transferred.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the document that was transferred
            from the source matter. It forms part of the composite primary key and identifies the
            specific document involved in the transfer operation.
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to Document entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>NoAction cascade delete to preserve audit trail integrity</item>
            </list>
            
            <para><strong>Transfer Context:</strong></para>
            <list type="bullet">
            <item>Identifies the specific document being transferred</item>
            <item>Links transfer activity to document metadata and content</item>
            <item>Enables document-scoped transfer history queries</item>
            <item>Supports document provenance and custody tracking</item>
            </list>
            
            <para><strong>Audit Trail Integration:</strong></para>
            The document association enables comprehensive tracking of document movements
            across matters, supporting legal discovery, compliance audits, and case management
            requirements for maintaining accurate document custody records.
            </remarks>
            <example>
            <code>
            var transferFrom = new MatterDocumentActivityUserFrom
            {
                DocumentId = legalDocument.Id,  // Must reference valid document
                MatterId = sourceMatter.Id,
                MatterDocumentActivityId = activityId,
                UserId = initiatingUser.Id,
                CreatedAt = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserFrom.MatterDocumentActivityId">
            <summary>
            Gets or sets the unique identifier of the matter document activity.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the matter document activity type
            that was performed. It forms part of the composite primary key and must reference a valid
            matter document activity from the seeded data (MOVED or COPIED).
            
            <para><strong>Activity Types:</strong></para>
            Must reference one of the seeded matter document activities:
            <list type="bullet">
            <item><strong>MOVED:</strong> Document moved from this source matter to destination matter</item>
            <item><strong>COPIED:</strong> Document copied from this source matter to destination matter</item>
            </list>
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to MatterDocumentActivity entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>NoAction cascade delete to preserve audit integrity</item>
            </list>
            
            <para><strong>Validation Integration:</strong></para>
            The MatterDocumentActivityId is validated using MatterDocumentActivityValidationHelper
            to ensure it references a valid, allowed transfer activity type.
            </remarks>
            <example>
            <code>
            // Linking to a COPIED activity (seeded ID: 40000000-0000-0000-0000-000000000001)
            var copiedActivityId = Guid.Parse("40000000-0000-0000-0000-000000000001");
            var transferFrom = new MatterDocumentActivityUserFrom
            {
                MatterDocumentActivityId = copiedActivityId,  // Must be valid activity
                // ... other properties
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserFrom.UserId">
            <summary>
            Gets or sets the unique identifier of the user who initiated the document transfer.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the user who initiated the
            document transfer from the source matter. It forms part of the composite primary key and
            provides essential user attribution for audit trail purposes in document transfer operations.
            
            <para><strong>User Attribution:</strong></para>
            <list type="bullet">
            <item>Links transfer to responsible source user for accountability</item>
            <item>Enables user-scoped document transfer initiation reporting</item>
            <item>Supports legal compliance and audit requirements</item>
            <item>Facilitates user activity analytics and monitoring</item>
            </list>
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to User entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>NoAction cascade delete to preserve audit integrity</item>
            </list>
            
            <para><strong>Legal Significance:</strong></para>
            Source user attribution is critical for:
            <list type="bullet">
            <item>Document custody chains and legal discovery</item>
            <item>Professional responsibility tracking for document transfers</item>
            <item>Accountability in legal document management</item>
            <item>Evidence of document transfer initiation and authorization</item>
            </list>
            </remarks>
            <example>
            <code>
            // Attributing document transfer to a specific user
            var transferFrom = new MatterDocumentActivityUserFrom
            {
                UserId = initiatingUser.Id,  // Must reference valid source user
                MatterId = sourceMatter.Id,
                DocumentId = document.Id,
                MatterDocumentActivityId = activityId,
                CreatedAt = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserFrom.CreatedAt">
            <summary>
            Gets or sets the date and time when this transfer entry was created (in UTC).
            </summary>
            <remarks>
            This property maintains the precise timestamp of when the document transfer from the source
            matter was initiated. It forms part of the composite primary key, enabling multiple transfers
            of the same document with different timestamps while maintaining uniqueness.
            
            <para><strong>Temporal Tracking:</strong></para>
            <list type="bullet">
            <item>Provides precise timing for document transfer audit trails</item>
            <item>Enables temporal analysis of document movement patterns</item>
            <item>Supports legal timeline reconstruction for case management</item>
            <item>Facilitates workflow and process analysis</item>
            </list>
            
            <para><strong>Date Requirements:</strong></para>
            <list type="bullet">
            <item>Must be stored in UTC format for consistency</item>
            <item>Cannot be earlier than system minimum date</item>
            <item>Cannot be in the future (with tolerance for clock skew)</item>
            <item>Forms part of composite primary key for uniqueness</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Automatically set to current UTC time when not specified</item>
            <item>Should reflect the actual time the document transfer was initiated</item>
            <item>Used for chronological ordering in audit reports</item>
            <item>Critical for legal compliance and document custody tracking</item>
            </list>
            
            <para><strong>Validation:</strong></para>
            The CreatedAt timestamp is validated using RevisionValidationHelper date validation
            methods to ensure it falls within acceptable ranges for legal document management.
            </remarks>
            <example>
            <code>
            var transferFrom = new MatterDocumentActivityUserFrom
            {
                CreatedAt = DateTime.UtcNow,  // Always use UTC
                // ... other properties
            };
            
            // For historical data import
            var historicalTransfer = new MatterDocumentActivityUserFrom
            {
                CreatedAt = specificUtcDateTime,  // Specific historical timestamp
                // ... other properties
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserFrom.Matter">
            <summary>
            Gets or sets the source matter associated with this transfer activity.
            </summary>
            <remarks>
            This navigation property provides access to the source matter where the document was
            transferred from. The relationship is established through the MatterId foreign key and
            enables rich querying and navigation within Entity Framework for source matter information
            and analysis.
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses MatterId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>NoAction cascade delete behavior preserves audit trail integrity</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Accessing source matter metadata from transfer context</item>
            <item>Matter-level document transfer operations and reporting</item>
            <item>Audit trail reporting including source matter information</item>
            <item>Cross-matter document movement analysis</item>
            </list>
            
            <para><strong>Performance Considerations:</strong></para>
            The virtual modifier enables lazy loading, but consider explicit loading or
            projections when working with multiple transfers to avoid N+1 query issues.
            </remarks>
            <example>
            <code>
            // Accessing source matter information through transfer
            var sourceMatterName = transferFrom.Matter?.Description;
            var matterCreationDate = transferFrom.Matter?.CreationDate;
            
            // Using explicit loading to avoid N+1 queries
            await context.Entry(transferFrom)
                .Reference(t => t.Matter)
                .LoadAsync();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserFrom.Document">
            <summary>
            Gets or sets the document associated with this transfer activity.
            </summary>
            <remarks>
            This navigation property provides access to the document that was transferred from the
            source matter. The relationship is established through the DocumentId foreign key and
            enables access to document metadata, content, and related information for audit trail
            and document management operations.
            
            <para><strong>Document Information Access:</strong></para>
            Provides access to:
            <list type="bullet">
            <item>Document metadata including filename, size, and content type</item>
            <item>Document content and version information</item>
            <item>Related document operations and audit trails</item>
            <item>Cross-document transfer analysis and reporting</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses DocumentId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>NoAction cascade delete behavior preserves audit trail integrity</item>
            </list>
            
            <para><strong>Audit Trail Integration:</strong></para>
            <list type="bullet">
            <item>Document-centric audit trail analysis and reporting</item>
            <item>Document provenance and custody chain tracking</item>
            <item>Legal discovery and compliance support</item>
            <item>Cross-document transfer pattern analysis</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing document information through transfer
            var documentName = transferFrom.Document?.FileName;
            var documentSize = transferFrom.Document?.FileSize;
            
            // Document transfer history analysis
            var allTransfers = transferFrom.Document?.MatterDocumentActivityUsersFrom
                .OrderBy(t => t.CreatedAt);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserFrom.MatterDocumentActivity">
            <summary>
            Gets or sets the matter document activity associated with this transfer operation.
            </summary>
            <remarks>
            This navigation property provides access to the matter document activity type that was
            performed (MOVED or COPIED). The relationship is established through the
            MatterDocumentActivityId foreign key and enables access to activity metadata and
            classification for audit trail and business logic operations.
            
            <para><strong>Activity Information Access:</strong></para>
            Provides access to:
            <list type="bullet">
            <item>Activity type name (MOVED, COPIED)</item>
            <item>Activity metadata and configuration</item>
            <item>Activity validation rules and constraints</item>
            <item>Cross-activity analysis and reporting</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses MatterDocumentActivityId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>NoAction cascade delete behavior preserves audit integrity</item>
            </list>
            
            <para><strong>Business Logic Integration:</strong></para>
            <list type="bullet">
            <item>Activity-specific business rule enforcement</item>
            <item>Transfer operation categorization and reporting</item>
            <item>Workflow and process analysis</item>
            <item>Activity-based authorization and permissions</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing activity type information
            var activityType = transferFrom.MatterDocumentActivity?.Activity;
            var isMoveOperation = activityType == "MOVED";
            
            // Activity-based filtering
            var copyOperations = transfers
                .Where(t => t.MatterDocumentActivity?.Activity == "COPIED");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserFrom.User">
            <summary>
            Gets or sets the user associated with this document transfer operation.
            </summary>
            <remarks>
            This navigation property provides access to the user who initiated the document transfer
            from the source matter. The relationship is established through the UserId foreign key and
            enables comprehensive user-based reporting and analysis of document transfer operations.
            
            <para><strong>User Information Access:</strong></para>
            Provides access to:
            <list type="bullet">
            <item>User identification and contact information</item>
            <item>User document transfer patterns and behavior</item>
            <item>Professional attribution for legal compliance</item>
            <item>User-based reporting and analytics</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses UserId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>NoAction cascade delete behavior preserves audit integrity</item>
            </list>
            
            <para><strong>Legal and Compliance Support:</strong></para>
            <list type="bullet">
            <item>User accountability for document transfer initiation</item>
            <item>Professional responsibility tracking for document transfers</item>
            <item>Legal discovery and audit trail support</item>
            <item>Compliance reporting and analysis</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing user information through transfer
            var initiatorName = transferFrom.User?.Name;
            var userTransfers = transferFrom.User?.MatterDocumentActivityUsersFrom;
            
            // User-based transfer analysis
            var userInitiationCount = user.MatterDocumentActivityUsersFrom
                .Count(t => t.MatterDocumentActivity?.Activity == "MOVED");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserFrom.HasValidReferences">
            <summary>
            Gets a value indicating whether this transfer record has valid foreign key references.
            </summary>
            <remarks>
            This computed property validates that all required foreign key properties contain
            valid (non-empty) GUID values, ensuring referential integrity for document transfer
            operations.
            
            <para><strong>Validation Checks:</strong></para>
            <list type="bullet">
            <item>MatterId is not Guid.Empty</item>
            <item>DocumentId is not Guid.Empty</item>
            <item>MatterDocumentActivityId is not Guid.Empty</item>
            <item>UserId is not Guid.Empty</item>
            </list>
            </remarks>
            <example>
            <code>
            if (!transferFrom.HasValidReferences)
            {
                throw new InvalidOperationException("Transfer record has invalid foreign key references");
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserFrom.HasValidTimestamp">
            <summary>
            Gets a value indicating whether the CreatedAt timestamp is within reasonable bounds.
            </summary>
            <remarks>
            This computed property uses the RevisionValidationHelper to validate that the
            CreatedAt timestamp falls within acceptable date ranges for the legal document
            management system.
            </remarks>
            <example>
            <code>
            if (!transferFrom.HasValidTimestamp)
            {
                logger.LogWarning($"Transfer record {transferFrom} has invalid timestamp: {transferFrom.CreatedAt}");
            }
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ADMS.API.Entities.MatterDocumentActivityUserFrom.AgeDays" -->
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserFrom.TransferDescription">
            <summary>
            Gets the formatted transfer description for display purposes.
            </summary>
            <remarks>
            This computed property provides a human-readable description of the document transfer
            including user attribution, activity type, and timestamp information for audit trail
            display and reporting purposes.
            </remarks>
            <example>
            <code>
            Console.WriteLine(transferFrom.TransferDescription);
            // Output: "Document 'contract.pdf' MOVED from 'Corporate Matter' by rbrown at 2024-01-15 10:30 UTC"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserFrom.Equals(ADMS.API.Entities.MatterDocumentActivityUserFrom)">
            <summary>
            Determines whether the specified MatterDocumentActivityUserFrom is equal to the current MatterDocumentActivityUserFrom.
            </summary>
            <param name="other">The MatterDocumentActivityUserFrom to compare with the current MatterDocumentActivityUserFrom.</param>
            <returns>true if the specified MatterDocumentActivityUserFrom is equal to the current MatterDocumentActivityUserFrom; otherwise, false.</returns>
            <remarks>
            Equality is determined by comparing all five components of the composite primary key:
            MatterId, DocumentId, MatterDocumentActivityId, UserId, and CreatedAt. This follows
            Entity Framework best practices for entities with composite keys.
            </remarks>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserFrom.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current MatterDocumentActivityUserFrom.
            </summary>
            <param name="obj">The object to compare with the current MatterDocumentActivityUserFrom.</param>
            <returns>true if the specified object is equal to the current MatterDocumentActivityUserFrom; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserFrom.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current MatterDocumentActivityUserFrom.</returns>
            <remarks>
            The hash code is computed from all five components of the composite primary key
            to ensure consistent hashing behavior that aligns with the equality implementation.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ADMS.API.Entities.MatterDocumentActivityUserFrom.CompareTo(ADMS.API.Entities.MatterDocumentActivityUserFrom)" -->
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserFrom.op_Equality(ADMS.API.Entities.MatterDocumentActivityUserFrom,ADMS.API.Entities.MatterDocumentActivityUserFrom)">
            <summary>
            Determines whether two MatterDocumentActivityUserFrom instances are equal.
            </summary>
            <param name="left">The first MatterDocumentActivityUserFrom to compare.</param>
            <param name="right">The second MatterDocumentActivityUserFrom to compare.</param>
            <returns>true if the MatterDocumentActivityUserFroms are equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserFrom.op_Inequality(ADMS.API.Entities.MatterDocumentActivityUserFrom,ADMS.API.Entities.MatterDocumentActivityUserFrom)">
            <summary>
            Determines whether two MatterDocumentActivityUserFrom instances are not equal.
            </summary>
            <param name="left">The first MatterDocumentActivityUserFrom to compare.</param>
            <param name="right">The second MatterDocumentActivityUserFrom to compare.</param>
            <returns>true if the MatterDocumentActivityUserFroms are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserFrom.op_LessThan(ADMS.API.Entities.MatterDocumentActivityUserFrom,ADMS.API.Entities.MatterDocumentActivityUserFrom)">
            <summary>
            Determines whether one MatterDocumentActivityUserFrom precedes another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivityUserFrom to compare.</param>
            <param name="right">The second MatterDocumentActivityUserFrom to compare.</param>
            <returns>true if the left MatterDocumentActivityUserFrom precedes the right MatterDocumentActivityUserFrom; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserFrom.op_LessThanOrEqual(ADMS.API.Entities.MatterDocumentActivityUserFrom,ADMS.API.Entities.MatterDocumentActivityUserFrom)">
            <summary>
            Determines whether one MatterDocumentActivityUserFrom precedes or is equal to another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivityUserFrom to compare.</param>
            <param name="right">The second MatterDocumentActivityUserFrom to compare.</param>
            <returns>true if the left MatterDocumentActivityUserFrom precedes or equals the right MatterDocumentActivityUserFrom; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserFrom.op_GreaterThan(ADMS.API.Entities.MatterDocumentActivityUserFrom,ADMS.API.Entities.MatterDocumentActivityUserFrom)">
            <summary>
            Determines whether one MatterDocumentActivityUserFrom follows another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivityUserFrom to compare.</param>
            <param name="right">The second MatterDocumentActivityUserFrom to compare.</param>
            <returns>true if the left MatterDocumentActivityUserFrom follows the right MatterDocumentActivityUserFrom; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserFrom.op_GreaterThanOrEqual(ADMS.API.Entities.MatterDocumentActivityUserFrom,ADMS.API.Entities.MatterDocumentActivityUserFrom)">
            <summary>
            Determines whether one MatterDocumentActivityUserFrom follows or is equal to another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivityUserFrom to compare.</param>
            <param name="right">The second MatterDocumentActivityUserFrom to compare.</param>
            <returns>true if the left MatterDocumentActivityUserFrom follows or equals the right MatterDocumentActivityUserFrom; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserFrom.ToString">
            <summary>
            Returns a string representation of the MatterDocumentActivityUserFrom.
            </summary>
            <returns>A string that represents the current MatterDocumentActivityUserFrom.</returns>
            <remarks>
            The string representation includes key identifying information about the document transfer,
            which is useful for debugging, logging, and audit trail display purposes.
            </remarks>
            <example>
            <code>
            var transferFrom = new MatterDocumentActivityUserFrom
            {
                MatterId = matterGuid,
                DocumentId = documentGuid,
                MatterDocumentActivityId = activityGuid,
                UserId = userGuid,
                CreatedAt = DateTime.UtcNow
            };
            
            Console.WriteLine(transferFrom);
            // Output: "Document MOVED from Matter 'Corporate Case' by rbrown at 2024-01-15 10:30:00 UTC"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserFrom.IsMoveOperation">
            <summary>
            Determines whether this transfer record represents a move operation.
            </summary>
            <returns>true if this is a move operation; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify move operations without
            directly accessing the navigation property, which can help avoid lazy loading
            in performance-sensitive scenarios.
            </remarks>
            <example>
            <code>
            if (transferFrom.IsMoveOperation())
            {
                // Handle move-specific logic
                Console.WriteLine("Document was moved from: " + transferFrom.Matter?.Description);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserFrom.IsCopyOperation">
            <summary>
            Determines whether this transfer record represents a copy operation.
            </summary>
            <returns>true if this is a copy operation; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify copy operations for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (transferFrom.IsCopyOperation())
            {
                // Handle copy-specific logic
                auditLogger.LogDocumentCopy(transferFrom);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserFrom.IsRecent(System.Double)">
            <summary>
            Determines whether this transfer occurred recently within the specified timeframe.
            </summary>
            <param name="withinHours">The number of hours to consider as "recent".</param>
            <returns>true if the transfer occurred within the specified timeframe; otherwise, false.</returns>
            <remarks>
            This method is useful for identifying recent document transfers for notifications,
            reporting, and real-time monitoring purposes.
            </remarks>
            <example>
            <code>
            // Check for transfers in the last 24 hours
            if (transferFrom.IsRecent(24))
            {
                notificationService.NotifyRecentTransfer(transferFrom);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserFrom.GetSeededActivityId(System.String)">
            <summary>
            Gets the seeded GUID for a specific matter document activity name.
            </summary>
            <param name="activityName">The activity name to get the GUID for.</param>
            <returns>The seeded GUID if found; otherwise, Guid.Empty.</returns>
            <remarks>
            This method returns the specific GUIDs used in database seeding for standard
            matter document activities, useful for business logic that needs to reference
            specific activity types.
            </remarks>
            <example>
            <code>
            var copiedActivityId = MatterDocumentActivityUserFrom.GetSeededActivityId("COPIED");
            // Returns: 40000000-0000-0000-0000-000000000001
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserFrom.Validate">
            <summary>
            Validates the current MatterDocumentActivityUserFrom instance against business rules.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <remarks>
            This method performs comprehensive validation using MatterDocumentActivityValidationHelper
            and additional entity-specific business rules including foreign key validation,
            timestamp validation, and directional transfer requirements.
            </remarks>
            <example>
            <code>
            var validationResults = transferFrom.Validate();
            if (validationResults.Any())
            {
                foreach (var error in validationResults)
                {
                    Console.WriteLine($"Validation Error: {error.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Entities.MatterDocumentActivityUserTo">
            <summary>
            Represents the linkage of a user to a "to" matter document activity in the ADMS legal document management system.
            </summary>
            <remarks>
            The MatterDocumentActivityUserTo entity serves as a critical component of the directional audit trail system
            for document transfer operations between matters. This entity specifically tracks the destination side of
            document transfers (moves and copies), working in conjunction with MatterDocumentActivityUserFrom to provide
            complete bidirectional audit trails essential for legal document management compliance.
            
            <para><strong>Key Characteristics:</strong></para>
            <list type="bullet">
            <item><strong>Directional Audit Trail:</strong> Tracks destination side of document transfers between matters</item>
            <item><strong>Composite Primary Key:</strong> Ensures uniqueness while allowing temporal tracking</item>
            <item><strong>User Attribution:</strong> Links document transfers to responsible destination users</item>
            <item><strong>Temporal Tracking:</strong> Maintains precise timestamps for all transfer operations</item>
            <item><strong>Legal Compliance:</strong> Supports comprehensive audit requirements for document custody</item>
            </list>
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Composite primary key: MatterId + DocumentId + MatterDocumentActivityId + UserId + CreatedAt</item>
            <item>All foreign key relationships are required</item>
            <item>NoAction cascade delete to preserve audit trail integrity</item>
            <item>Indexed on CreatedAt for temporal queries</item>
            </list>
            
            <para><strong>Transfer Operations Supported:</strong></para>
            <list type="bullet">
            <item><strong>MOVED:</strong> Document moved from source matter to this destination matter</item>
            <item><strong>COPIED:</strong> Document copied from source matter to this destination matter</item>
            </list>
            
            <para><strong>Audit Trail Functionality:</strong></para>
            This entity enables comprehensive tracking of document transfer destinations:
            <list type="bullet">
            <item><strong>Who:</strong> Which user received the transferred document</item>
            <item><strong>What:</strong> What type of transfer operation occurred (MOVED/COPIED)</item>
            <item><strong>Where:</strong> Which matter and document were involved in the transfer</item>
            <item><strong>When:</strong> Precise timestamp of the transfer operation</item>
            </list>
            
            <para><strong>Legal Compliance Support:</strong></para>
            <list type="bullet">
            <item>Complete document custody chains for legal discovery</item>
            <item>Bidirectional audit trails for document provenance</item>
            <item>User accountability for document receipt and handling</item>
            <item>Temporal tracking for legal timeline reconstruction</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Every document transfer must be attributed to both source and destination users</item>
            <item>Multiple transfers of the same document can occur with different timestamps</item>
            <item>CreatedAt timestamp must be within reasonable bounds</item>
            <item>All foreign key relationships must reference valid entities</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            The entity is configured in AdmsContext.ConfigureMatterDocumentActivityUserTo with:
            <list type="bullet">
            <item>Composite key including all five core properties</item>
            <item>Required relationships to Matter, Document, MatterDocumentActivity, and User</item>
            <item>NoAction cascade behaviors to maintain audit trail integrity</item>
            <item>Performance indexes on commonly queried fields</item>
            </list>
            </remarks>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserTo.MatterId">
            <summary>
            Gets or sets the unique identifier of the destination matter.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the destination matter where the
            document was transferred to. It forms part of the composite primary key and is required
            for all matter document activity user associations.
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to Matter entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>NoAction cascade delete to preserve audit trail integrity</item>
            </list>
            
            <para><strong>Business Context:</strong></para>
            <list type="bullet">
            <item>Represents the destination matter in document transfer operations</item>
            <item>Links transfer activity to specific legal case or project</item>
            <item>Enables matter-scoped document transfer queries</item>
            <item>Supports matter-level audit trail aggregation</item>
            </list>
            
            <para><strong>Legal Significance:</strong></para>
            The destination matter ID is crucial for legal document management as it establishes
            where documents were transferred to, supporting case management and legal compliance
            requirements for document custody and access control.
            </remarks>
            <example>
            <code>
            var transferTo = new MatterDocumentActivityUserTo
            {
                MatterId = destinationMatter.Id,  // Must reference valid destination matter
                DocumentId = document.Id,
                MatterDocumentActivityId = activityId,
                UserId = receivingUser.Id,
                CreatedAt = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserTo.DocumentId">
            <summary>
            Gets or sets the unique identifier of the document being transferred.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the document that was transferred
            to the destination matter. It forms part of the composite primary key and identifies the
            specific document involved in the transfer operation.
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to Document entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>NoAction cascade delete to preserve audit trail integrity</item>
            </list>
            
            <para><strong>Transfer Context:</strong></para>
            <list type="bullet">
            <item>Identifies the specific document being transferred</item>
            <item>Links transfer activity to document metadata and content</item>
            <item>Enables document-scoped transfer history queries</item>
            <item>Supports document provenance and custody tracking</item>
            </list>
            
            <para><strong>Audit Trail Integration:</strong></para>
            The document association enables comprehensive tracking of document movements
            across matters, supporting legal discovery, compliance audits, and case management
            requirements for maintaining accurate document custody records.
            </remarks>
            <example>
            <code>
            var transferTo = new MatterDocumentActivityUserTo
            {
                DocumentId = legalDocument.Id,  // Must reference valid document
                MatterId = destinationMatter.Id,
                MatterDocumentActivityId = activityId,
                UserId = receivingUser.Id,
                CreatedAt = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserTo.MatterDocumentActivityId">
            <summary>
            Gets or sets the unique identifier of the matter document activity.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the matter document activity type
            that was performed. It forms part of the composite primary key and must reference a valid
            matter document activity from the seeded data (MOVED or COPIED).
            
            <para><strong>Activity Types:</strong></para>
            Must reference one of the seeded matter document activities:
            <list type="bullet">
            <item><strong>MOVED:</strong> Document moved from source matter to destination matter</item>
            <item><strong>COPIED:</strong> Document copied from source matter to destination matter</item>
            </list>
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to MatterDocumentActivity entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>NoAction cascade delete to preserve audit integrity</item>
            </list>
            
            <para><strong>Validation Integration:</strong></para>
            The MatterDocumentActivityId is validated using MatterDocumentActivityValidationHelper
            to ensure it references a valid, allowed transfer activity type.
            </remarks>
            <example>
            <code>
            // Linking to a MOVED activity (seeded ID: 40000000-0000-0000-0000-000000000002)
            var movedActivityId = Guid.Parse("40000000-0000-0000-0000-000000000002");
            var transferTo = new MatterDocumentActivityUserTo
            {
                MatterDocumentActivityId = movedActivityId,  // Must be valid activity
                // ... other properties
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserTo.UserId">
            <summary>
            Gets or sets the unique identifier of the user who received the document.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the user who received the
            document at the destination matter. It forms part of the composite primary key and provides
            essential user attribution for audit trail purposes in document transfer operations.
            
            <para><strong>User Attribution:</strong></para>
            <list type="bullet">
            <item>Links transfer to responsible destination user for accountability</item>
            <item>Enables user-scoped document receipt reporting</item>
            <item>Supports legal compliance and audit requirements</item>
            <item>Facilitates user activity analytics and monitoring</item>
            </list>
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to User entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>NoAction cascade delete to preserve audit integrity</item>
            </list>
            
            <para><strong>Legal Significance:</strong></para>
            Destination user attribution is critical for:
            <list type="bullet">
            <item>Document custody chains and legal discovery</item>
            <item>Professional responsibility tracking for document receipt</item>
            <item>Accountability in legal document management</item>
            <item>Evidence of document transfer completion and acceptance</item>
            </list>
            </remarks>
            <example>
            <code>
            // Attributing document receipt to a specific user
            var transferTo = new MatterDocumentActivityUserTo
            {
                UserId = receivingUser.Id,  // Must reference valid destination user
                MatterId = destinationMatter.Id,
                DocumentId = document.Id,
                MatterDocumentActivityId = activityId,
                CreatedAt = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserTo.CreatedAt">
            <summary>
            Gets or sets the date and time when this transfer entry was created (in UTC).
            </summary>
            <remarks>
            This property maintains the precise timestamp of when the document transfer to the destination
            matter occurred. It forms part of the composite primary key, enabling multiple transfers of
            the same document with different timestamps while maintaining uniqueness.
            
            <para><strong>Temporal Tracking:</strong></para>
            <list type="bullet">
            <item>Provides precise timing for document transfer audit trails</item>
            <item>Enables temporal analysis of document movement patterns</item>
            <item>Supports legal timeline reconstruction for case management</item>
            <item>Facilitates workflow and process analysis</item>
            </list>
            
            <para><strong>Date Requirements:</strong></para>
            <list type="bullet">
            <item>Must be stored in UTC format for consistency</item>
            <item>Cannot be earlier than system minimum date</item>
            <item>Cannot be in the future (with tolerance for clock skew)</item>
            <item>Forms part of composite primary key for uniqueness</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Automatically set to current UTC time when not specified</item>
            <item>Should reflect the actual time the document transfer occurred</item>
            <item>Used for chronological ordering in audit reports</item>
            <item>Critical for legal compliance and document custody tracking</item>
            </list>
            
            <para><strong>Validation:</strong></para>
            The CreatedAt timestamp is validated using RevisionValidationHelper date validation
            methods to ensure it falls within acceptable ranges for legal document management.
            </remarks>
            <example>
            <code>
            var transferTo = new MatterDocumentActivityUserTo
            {
                CreatedAt = DateTime.UtcNow,  // Always use UTC
                // ... other properties
            };
            
            // For historical data import
            var historicalTransfer = new MatterDocumentActivityUserTo
            {
                CreatedAt = specificUtcDateTime,  // Specific historical timestamp
                // ... other properties
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserTo.Matter">
            <summary>
            Gets or sets the destination matter associated with this transfer activity.
            </summary>
            <remarks>
            This navigation property provides access to the destination matter where the document
            was transferred to. The relationship is established through the MatterId foreign key
            and enables rich querying and navigation within Entity Framework for destination
            matter information and analysis.
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses MatterId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>NoAction cascade delete behavior preserves audit trail integrity</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Accessing destination matter metadata from transfer context</item>
            <item>Matter-level document transfer operations and reporting</item>
            <item>Audit trail reporting including destination matter information</item>
            <item>Cross-matter document movement analysis</item>
            </list>
            
            <para><strong>Performance Considerations:</strong></para>
            The virtual modifier enables lazy loading, but consider explicit loading or
            projections when working with multiple transfers to avoid N+1 query issues.
            </remarks>
            <example>
            <code>
            // Accessing destination matter information through transfer
            var destinationMatterName = transferTo.Matter?.Description;
            var matterCreationDate = transferTo.Matter?.CreationDate;
            
            // Using explicit loading to avoid N+1 queries
            await context.Entry(transferTo)
                .Reference(t => t.Matter)
                .LoadAsync();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserTo.Document">
            <summary>
            Gets or sets the document associated with this transfer activity.
            </summary>
            <remarks>
            This navigation property provides access to the document that was transferred to the
            destination matter. The relationship is established through the DocumentId foreign key
            and enables access to document metadata, content, and related information for audit
            trail and document management operations.
            
            <para><strong>Document Information Access:</strong></para>
            Provides access to:
            <list type="bullet">
            <item>Document metadata including filename, size, and content type</item>
            <item>Document content and version information</item>
            <item>Related document operations and audit trails</item>
            <item>Cross-document transfer analysis and reporting</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses DocumentId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>NoAction cascade delete behavior preserves audit trail integrity</item>
            </list>
            
            <para><strong>Audit Trail Integration:</strong></para>
            <list type="bullet">
            <item>Document-centric audit trail analysis and reporting</item>
            <item>Document provenance and custody chain tracking</item>
            <item>Legal discovery and compliance support</item>
            <item>Cross-document transfer pattern analysis</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing document information through transfer
            var documentName = transferTo.Document?.FileName;
            var documentSize = transferTo.Document?.FileSize;
            
            // Document transfer history analysis
            var allTransfers = transferTo.Document?.MatterDocumentActivityUsersTo
                .OrderBy(t => t.CreatedAt);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserTo.MatterDocumentActivity">
            <summary>
            Gets or sets the matter document activity associated with this transfer operation.
            </summary>
            <remarks>
            This navigation property provides access to the matter document activity type that was
            performed (MOVED or COPIED). The relationship is established through the
            MatterDocumentActivityId foreign key and enables access to activity metadata and
            classification for audit trail and business logic operations.
            
            <para><strong>Activity Information Access:</strong></para>
            Provides access to:
            <list type="bullet">
            <item>Activity type name (MOVED, COPIED)</item>
            <item>Activity metadata and configuration</item>
            <item>Activity validation rules and constraints</item>
            <item>Cross-activity analysis and reporting</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses MatterDocumentActivityId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>NoAction cascade delete behavior preserves audit integrity</item>
            </list>
            
            <para><strong>Business Logic Integration:</strong></para>
            <list type="bullet">
            <item>Activity-specific business rule enforcement</item>
            <item>Transfer operation categorization and reporting</item>
            <item>Workflow and process analysis</item>
            <item>Activity-based authorization and permissions</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing activity type information
            var activityType = transferTo.MatterDocumentActivity?.Activity;
            var isMoveOperation = activityType == "MOVED";
            
            // Activity-based filtering
            var copyOperations = transfers
                .Where(t => t.MatterDocumentActivity?.Activity == "COPIED");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserTo.User">
            <summary>
            Gets or sets the user associated with this document transfer operation.
            </summary>
            <remarks>
            This navigation property provides access to the user who received the document at the
            destination matter. The relationship is established through the UserId foreign key and
            enables comprehensive user-based reporting and analysis of document transfer operations.
            
            <para><strong>User Information Access:</strong></para>
            Provides access to:
            <list type="bullet">
            <item>User identification and contact information</item>
            <item>User document transfer patterns and behavior</item>
            <item>Professional attribution for legal compliance</item>
            <item>User-based reporting and analytics</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses UserId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>NoAction cascade delete behavior preserves audit integrity</item>
            </list>
            
            <para><strong>Legal and Compliance Support:</strong></para>
            <list type="bullet">
            <item>User accountability for document receipt and handling</item>
            <item>Professional responsibility tracking for document transfers</item>
            <item>Legal discovery and audit trail support</item>
            <item>Compliance reporting and analysis</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing user information through transfer
            var recipientName = transferTo.User?.Name;
            var userTransfers = transferTo.User?.MatterDocumentActivityUsersTo;
            
            // User-based transfer analysis
            var userReceiptCount = user.MatterDocumentActivityUsersTo
                .Count(t => t.MatterDocumentActivity?.Activity == "MOVED");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserTo.HasValidReferences">
            <summary>
            Gets a value indicating whether this transfer record has valid foreign key references.
            </summary>
            <remarks>
            This computed property validates that all required foreign key properties contain
            valid (non-empty) GUID values, ensuring referential integrity for document transfer
            operations.
            
            <para><strong>Validation Checks:</strong></para>
            <list type="bullet">
            <item>MatterId is not Guid.Empty</item>
            <item>DocumentId is not Guid.Empty</item>
            <item>MatterDocumentActivityId is not Guid.Empty</item>
            <item>UserId is not Guid.Empty</item>
            </list>
            </remarks>
            <example>
            <code>
            if (!transferTo.HasValidReferences)
            {
                throw new InvalidOperationException("Transfer record has invalid foreign key references");
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserTo.HasValidTimestamp">
            <summary>
            Gets a value indicating whether the CreatedAt timestamp is within reasonable bounds.
            </summary>
            <remarks>
            This computed property uses the RevisionValidationHelper to validate that the
            CreatedAt timestamp falls within acceptable date ranges for the legal document
            management system.
            </remarks>
            <example>
            <code>
            if (!transferTo.HasValidTimestamp)
            {
                logger.LogWarning($"Transfer record {transferTo} has invalid timestamp: {transferTo.CreatedAt}");
            }
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ADMS.API.Entities.MatterDocumentActivityUserTo.AgeDays" -->
        <member name="P:ADMS.API.Entities.MatterDocumentActivityUserTo.TransferDescription">
            <summary>
            Gets the formatted transfer description for display purposes.
            </summary>
            <remarks>
            This computed property provides a human-readable description of the document transfer
            including user attribution, activity type, and timestamp information for audit trail
            display and reporting purposes.
            </remarks>
            <example>
            <code>
            Console.WriteLine(transferTo.TransferDescription);
            // Output: "Document 'contract.pdf' MOVED to 'Corporate Matter' by rbrown at 2024-01-15 10:30 UTC"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserTo.Equals(ADMS.API.Entities.MatterDocumentActivityUserTo)">
            <summary>
            Determines whether the specified MatterDocumentActivityUserTo is equal to the current MatterDocumentActivityUserTo.
            </summary>
            <param name="other">The MatterDocumentActivityUserTo to compare with the current MatterDocumentActivityUserTo.</param>
            <returns>true if the specified MatterDocumentActivityUserTo is equal to the current MatterDocumentActivityUserTo; otherwise, false.</returns>
            <remarks>
            Equality is determined by comparing all five components of the composite primary key:
            MatterId, DocumentId, MatterDocumentActivityId, UserId, and CreatedAt. This follows
            Entity Framework best practices for entities with composite keys.
            </remarks>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserTo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current MatterDocumentActivityUserTo.
            </summary>
            <param name="obj">The object to compare with the current MatterDocumentActivityUserTo.</param>
            <returns>true if the specified object is equal to the current MatterDocumentActivityUserTo; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserTo.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current MatterDocumentActivityUserTo.</returns>
            <remarks>
            The hash code is computed from all five components of the composite primary key
            to ensure consistent hashing behavior that aligns with the equality implementation.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ADMS.API.Entities.MatterDocumentActivityUserTo.CompareTo(ADMS.API.Entities.MatterDocumentActivityUserTo)" -->
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserTo.op_Equality(ADMS.API.Entities.MatterDocumentActivityUserTo,ADMS.API.Entities.MatterDocumentActivityUserTo)">
            <summary>
            Determines whether two MatterDocumentActivityUserTo instances are equal.
            </summary>
            <param name="left">The first MatterDocumentActivityUserTo to compare.</param>
            <param name="right">The second MatterDocumentActivityUserTo to compare.</param>
            <returns>true if the MatterDocumentActivityUserTos are equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserTo.op_Inequality(ADMS.API.Entities.MatterDocumentActivityUserTo,ADMS.API.Entities.MatterDocumentActivityUserTo)">
            <summary>
            Determines whether two MatterDocumentActivityUserTo instances are not equal.
            </summary>
            <param name="left">The first MatterDocumentActivityUserTo to compare.</param>
            <param name="right">The second MatterDocumentActivityUserTo to compare.</param>
            <returns>true if the MatterDocumentActivityUserTos are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserTo.op_LessThan(ADMS.API.Entities.MatterDocumentActivityUserTo,ADMS.API.Entities.MatterDocumentActivityUserTo)">
            <summary>
            Determines whether one MatterDocumentActivityUserTo precedes another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivityUserTo to compare.</param>
            <param name="right">The second MatterDocumentActivityUserTo to compare.</param>
            <returns>true if the left MatterDocumentActivityUserTo precedes the right MatterDocumentActivityUserTo; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserTo.op_LessThanOrEqual(ADMS.API.Entities.MatterDocumentActivityUserTo,ADMS.API.Entities.MatterDocumentActivityUserTo)">
            <summary>
            Determines whether one MatterDocumentActivityUserTo precedes or is equal to another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivityUserTo to compare.</param>
            <param name="right">The second MatterDocumentActivityUserTo to compare.</param>
            <returns>true if the left MatterDocumentActivityUserTo precedes or equals the right MatterDocumentActivityUserTo; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserTo.op_GreaterThan(ADMS.API.Entities.MatterDocumentActivityUserTo,ADMS.API.Entities.MatterDocumentActivityUserTo)">
            <summary>
            Determines whether one MatterDocumentActivityUserTo follows another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivityUserTo to compare.</param>
            <param name="right">The second MatterDocumentActivityUserTo to compare.</param>
            <returns>true if the left MatterDocumentActivityUserTo follows the right MatterDocumentActivityUserTo; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserTo.op_GreaterThanOrEqual(ADMS.API.Entities.MatterDocumentActivityUserTo,ADMS.API.Entities.MatterDocumentActivityUserTo)">
            <summary>
            Determines whether one MatterDocumentActivityUserTo follows or is equal to another in the ordering.
            </summary>
            <param name="left">The first MatterDocumentActivityUserTo to compare.</param>
            <param name="right">The second MatterDocumentActivityUserTo to compare.</param>
            <returns>true if the left MatterDocumentActivityUserTo follows or equals the right MatterDocumentActivityUserTo; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserTo.ToString">
            <summary>
            Returns a string representation of the MatterDocumentActivityUserTo.
            </summary>
            <returns>A string that represents the current MatterDocumentActivityUserTo.</returns>
            <remarks>
            The string representation includes key identifying information about the document transfer,
            which is useful for debugging, logging, and audit trail display purposes.
            </remarks>
            <example>
            <code>
            var transferTo = new MatterDocumentActivityUserTo
            {
                MatterId = matterGuid,
                DocumentId = documentGuid,
                MatterDocumentActivityId = activityGuid,
                UserId = userGuid,
                CreatedAt = DateTime.UtcNow
            };
            
            Console.WriteLine(transferTo);
            // Output: "Document MOVED to Matter 'Corporate Case' by rbrown at 2024-01-15 10:30:00 UTC"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserTo.IsMoveOperation">
            <summary>
            Determines whether this transfer record represents a move operation.
            </summary>
            <returns>true if this is a move operation; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify move operations without
            directly accessing the navigation property, which can help avoid lazy loading
            in performance-sensitive scenarios.
            </remarks>
            <example>
            <code>
            if (transferTo.IsMoveOperation())
            {
                // Handle move-specific logic
                Console.WriteLine("Document was moved to: " + transferTo.Matter?.Description);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserTo.IsCopyOperation">
            <summary>
            Determines whether this transfer record represents a copy operation.
            </summary>
            <returns>true if this is a copy operation; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify copy operations for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (transferTo.IsCopyOperation())
            {
                // Handle copy-specific logic
                auditLogger.LogDocumentCopy(transferTo);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserTo.IsRecent(System.Double)">
            <summary>
            Determines whether this transfer occurred recently within the specified timeframe.
            </summary>
            <param name="withinHours">The number of hours to consider as "recent".</param>
            <returns>true if the transfer occurred within the specified timeframe; otherwise, false.</returns>
            <remarks>
            This method is useful for identifying recent document transfers for notifications,
            reporting, and real-time monitoring purposes.
            </remarks>
            <example>
            <code>
            // Check for transfers in the last 24 hours
            if (transferTo.IsRecent(24))
            {
                notificationService.NotifyRecentTransfer(transferTo);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserTo.GetSeededActivityId(System.String)">
            <summary>
            Gets the seeded GUID for a specific matter document activity name.
            </summary>
            <param name="activityName">The activity name to get the GUID for.</param>
            <returns>The seeded GUID if found; otherwise, Guid.Empty.</returns>
            <remarks>
            This method returns the specific GUIDs used in database seeding for standard
            matter document activities, useful for business logic that needs to reference
            specific activity types.
            </remarks>
            <example>
            <code>
            var movedActivityId = MatterDocumentActivityUserTo.GetSeededActivityId("MOVED");
            // Returns: 40000000-0000-0000-0000-000000000002
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.MatterDocumentActivityUserTo.Validate">
            <summary>
            Validates the current MatterDocumentActivityUserTo instance against business rules.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <remarks>
            This method performs comprehensive validation using MatterDocumentActivityValidationHelper
            and additional entity-specific business rules including foreign key validation,
            timestamp validation, and directional transfer requirements.
            </remarks>
            <example>
            <code>
            var validationResults = transferTo.Validate();
            if (validationResults.Any())
            {
                foreach (var error in validationResults)
                {
                    Console.WriteLine($"Validation Error: {error.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Entities.RevisionActivity">
            <summary>
            Represents a revision activity, which describes an action or event related to a document revision in the ADMS legal document management system.
            </summary>
            <remarks>
            The RevisionActivity entity serves as a lookup table for the standardized activities that can be performed
            on document revisions within the legal document management system. This entity is critical for maintaining
            comprehensive audit trails and ensuring consistent activity classification across all revision operations.
            
            <para><strong>Key Characteristics:</strong></para>
            <list type="bullet">
            <item><strong>Static Reference Data:</strong> Contains predefined activity types seeded from database</item>
            <item><strong>Audit Trail Foundation:</strong> Central classification system for revision activities</item>
            <item><strong>Business Rule Enforcement:</strong> Ensures only valid activities are recorded</item>
            <item><strong>Legal Compliance:</strong> Supports comprehensive audit requirements</item>
            <item><strong>Immutable Activities:</strong> Activity types are system-defined and rarely change</item>
            </list>
            
            <para><strong>Seeded Activities:</strong></para>
            The following activities are seeded in AdmsContext.SeedRevisionActivities:
            <list type="bullet">
            <item><strong>CREATED:</strong> Initial creation of a document revision</item>
            <item><strong>SAVED:</strong> Saving changes to an existing revision</item>
            <item><strong>DELETED:</strong> Soft deletion of a revision (can be restored)</item>
            <item><strong>RESTORED:</strong> Restoration of a previously deleted revision</item>
            </list>
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key: GUID with identity generation</item>
            <item>Activity constraint: StringLength(50) with required validation</item>
            <item>Seeded data: Four standard revision activities</item>
            <item>Relationships: One-to-many with RevisionActivityUser for audit trails</item>
            </list>
            
            <para><strong>Legal Compliance Support:</strong></para>
            <list type="bullet">
            <item>Standardized activity classification for legal audit requirements</item>
            <item>Immutable reference data preserving audit trail integrity</item>
            <item>Complete user attribution through RevisionActivityUser associations</item>
            <item>Support for regulatory reporting and compliance audits</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Activity names must match RevisionActivityValidationHelper.AllowedActivities</item>
            <item>Activities are standardized and system-defined (not user-created)</item>
            <item>Each activity can be associated with multiple users and revisions</item>
            <item>Activity names are case-insensitive but stored in uppercase</item>
            </list>
            
            <para><strong>Entity Framework Integration:</strong></para>
            The entity is configured in AdmsContext with:
            <list type="bullet">
            <item>Seeded data for all standard revision activities</item>
            <item>Required relationships to RevisionActivityUser junction entity</item>
            <item>Restricted cascade delete to preserve audit trail integrity</item>
            <item>Performance optimization for frequent lookup operations</item>
            </list>
            </remarks>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivity.Id">
            <summary>
            Gets or sets the unique identifier for the revision activity.
            </summary>
            <remarks>
            This GUID serves as the primary key and is automatically generated when the activity is created.
            For seeded activities, specific GUIDs are used to ensure consistency across deployments and
            enable reliable reference in business logic and reporting.
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key with identity generation</item>
            <item>Non-nullable and required for all operations</item>
            <item>Used as foreign key in RevisionActivityUser relationship table</item>
            <item>Seeded with specific GUIDs for standard activities</item>
            </list>
            
            <para><strong>Seeded Activity IDs:</strong></para>
            <list type="bullet">
            <item>CREATED: 10000000-0000-0000-0000-000000000001</item>
            <item>DELETED: 10000000-0000-0000-0000-000000000002</item>
            <item>RESTORED: 10000000-0000-0000-0000-000000000003</item>
            <item>SAVED: 10000000-0000-0000-0000-000000000004</item>
            </list>
            
            <para><strong>Usage Considerations:</strong></para>
            The ID remains constant throughout the activity's lifecycle and is used for all
            audit trail associations, business logic references, and reporting operations.
            </remarks>
            <example>
            <code>
            var activity = new RevisionActivity 
            { 
                Activity = "CUSTOM_ACTIVITY"
            };
            // ID will be automatically generated when saved to database
            
            // Accessing seeded activity
            var createdActivityId = Guid.Parse("10000000-0000-0000-0000-000000000001");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivity.Activity">
            <summary>
            Gets or sets the description of the revision activity.
            </summary>
            <remarks>
            The activity name serves as the primary identifier and classifier for revision operations.
            This field must conform to the standardized activity names defined in 
            RevisionActivityValidationHelper.AllowedActivities to ensure consistency across the system.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Required field - cannot be null or empty</item>
            <item>Maximum length: 50 characters (database constraint)</item>
            <item>Minimum length: 1 character (business rule)</item>
            <item>Must be one of the allowed activities from RevisionActivityValidationHelper</item>
            <item>Must contain only letters, numbers, and underscores</item>
            <item>Must contain at least one letter</item>
            <item>Cannot use reserved activity names</item>
            </list>
            
            <para><strong>Standard Activities:</strong></para>
            <list type="bullet">
            <item><strong>CREATED:</strong> Initial creation of a document revision</item>
            <item><strong>SAVED:</strong> Saving changes to an existing revision</item>
            <item><strong>DELETED:</strong> Soft deletion of a revision</item>
            <item><strong>RESTORED:</strong> Restoration of a deleted revision</item>
            </list>
            
            <para><strong>Business Context:</strong></para>
            Activity names are used throughout the system for:
            <list type="bullet">
            <item>Audit trail classification and reporting</item>
            <item>Business rule enforcement and workflow control</item>
            <item>User interface display and activity filtering</item>
            <item>Legal compliance reporting and analysis</item>
            </list>
            
            <para><strong>Validation Integration:</strong></para>
            Activity names are validated using RevisionActivityValidationHelper to ensure
            they conform to business rules and legal compliance requirements.
            </remarks>
            <example>
            <code>
            // Standard seeded activities
            var createdActivity = new RevisionActivity { Activity = "CREATED" };
            var savedActivity = new RevisionActivity { Activity = "SAVED" };
            var deletedActivity = new RevisionActivity { Activity = "DELETED" };
            var restoredActivity = new RevisionActivity { Activity = "RESTORED" };
            
            // Validation example
            bool isValid = Common.RevisionActivityValidationHelper.IsActivityAllowed(createdActivity.Activity);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivity.RevisionActivityUsers">
            <summary>
            Gets or sets the collection of revision activity user associations for this activity.
            </summary>
            <remarks>
            This collection maintains the many-to-many relationship between revision activities, users,
            and revisions through the RevisionActivityUser junction entity. Each association represents
            a specific instance of this activity being performed by a user on a revision.
            
            <para><strong>Audit Trail Functionality:</strong></para>
            Each association in this collection provides:
            <list type="bullet">
            <item>User attribution - which user performed this activity</item>
            <item>Revision context - which revision the activity was performed on</item>
            <item>Temporal tracking - when the activity occurred</item>
            <item>Unique identification - composite key preventing duplicates</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured in AdmsContext.ConfigureRevisionActivityUser</item>
            <item>Many-to-many relationship through junction entity</item>
            <item>Composite primary key includes ActivityId, RevisionId, UserId, CreatedAt</item>
            <item>Cascade behavior: Restricted to preserve audit trail integrity</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Activity-based audit trail analysis</item>
            <item>User activity reporting and monitoring</item>
            <item>Revision lifecycle tracking</item>
            <item>Legal compliance and discovery support</item>
            </list>
            
            <para><strong>Performance Considerations:</strong></para>
            The virtual modifier enables lazy loading, but consider explicit loading or
            projections when working with multiple activities to avoid N+1 query issues.
            For frequently accessed audit data, consider including related entities in queries.
            </remarks>
            <example>
            <code>
            // Accessing users who performed this activity
            foreach (var activityUser in revisionActivity.RevisionActivityUsers)
            {
                Console.WriteLine($"User {activityUser.User.Name} performed {revisionActivity.Activity} " +
                                 $"on revision {activityUser.Revision.RevisionNumber} at {activityUser.CreatedAt}");
            }
            
            // Finding all users who performed CREATED activity
            var createdActivity = activities.FirstOrDefault(a => a.Activity == "CREATED");
            var creators = createdActivity?.RevisionActivityUsers
                .Select(au => au.User)
                .Distinct();
            
            // Activity usage statistics
            var usageCount = revisionActivity.RevisionActivityUsers.Count;
            var uniqueUsers = revisionActivity.RevisionActivityUsers
                .Select(au => au.UserId)
                .Distinct()
                .Count();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivity.HasUserAssociations">
            <summary>
            Gets a value indicating whether this activity has any recorded user associations.
            </summary>
            <remarks>
            This property is useful for determining activity usage and ensuring that
            activities are actually being used in the system. Activities without associations
            may indicate unused system features or configuration issues.
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Activity usage analysis and reporting</item>
            <item>System configuration validation</item>
            <item>Feature utilization monitoring</item>
            <item>Data cleanup and maintenance operations</item>
            </list>
            
            <para><strong>Performance Note:</strong></para>
            This property triggers a database query to count related entities. Consider using
            explicit loading or projections when working with multiple activities to avoid N+1 queries.
            </remarks>
            <example>
            <code>
            if (!revisionActivity.HasUserAssociations)
            {
                logger.LogInformation($"Activity {revisionActivity.Activity} has no user associations");
            }
            
            // Finding unused activities
            var unusedActivities = activities.Where(a => !a.HasUserAssociations).ToList();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivity.UsageCount">
            <summary>
            Gets the total count of user associations for this activity.
            </summary>
            <remarks>
            This computed property provides insight into the frequency of use for this activity
            type, useful for activity monitoring, usage analytics, and system optimization.
            
            <para><strong>Performance Note:</strong></para>
            This property triggers database queries to count related entities. Consider using
            explicit loading or projections when working with multiple activities to avoid N+1 queries.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Activity {revisionActivity.Activity} has been used {revisionActivity.UsageCount} times");
            
            // Finding most used activities
            var mostUsedActivities = activities
                .OrderByDescending(a => a.UsageCount)
                .Take(10);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivity.UniqueUserCount">
            <summary>
            Gets the count of unique users who have performed this activity.
            </summary>
            <remarks>
            This computed property provides insight into the breadth of user engagement
            with this activity type, useful for user adoption analysis and training needs assessment.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Activity {revisionActivity.Activity} has been performed by {revisionActivity.UniqueUserCount} different users");
            
            // Analyzing user engagement
            var engagementMetric = revisionActivity.UniqueUserCount / (double)revisionActivity.UsageCount;
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivity.IsStandardActivity">
            <summary>
            Gets a value indicating whether this activity is one of the standard seeded activities.
            </summary>
            <remarks>
            This property identifies whether the activity is one of the standard system-defined
            activities or a custom activity. Standard activities are those seeded in the database
            and validated by RevisionActivityValidationHelper.
            </remarks>
            <example>
            <code>
            if (revisionActivity.IsStandardActivity)
            {
                // Apply standard business rules
            }
            else
            {
                // Handle custom activity logic
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivity.NormalizedActivity">
            <summary>
            Gets the normalized version of the activity name.
            </summary>
            <remarks>
            This property provides a normalized version of the activity name following
            the normalization rules from RevisionActivityValidationHelper for consistent
            comparison and storage operations.
            </remarks>
            <example>
            <code>
            var normalized = revisionActivity.NormalizedActivity; // Always uppercase, trimmed
            bool areEqual = revisionActivity.NormalizedActivity == other.NormalizedActivity;
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.Equals(ADMS.API.Entities.RevisionActivity)">
            <summary>
            Determines whether the specified RevisionActivity is equal to the current RevisionActivity.
            </summary>
            <param name="other">The RevisionActivity to compare with the current RevisionActivity.</param>
            <returns>true if the specified RevisionActivity is equal to the current RevisionActivity; otherwise, false.</returns>
            <remarks>
            Equality is determined by comparing the Id property, as each activity has a unique identifier.
            This follows Entity Framework best practices for entity equality comparison.
            </remarks>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current RevisionActivity.
            </summary>
            <param name="obj">The object to compare with the current RevisionActivity.</param>
            <returns>true if the specified object is equal to the current RevisionActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current RevisionActivity.</returns>
            <remarks>
            The hash code is based on the Id property to ensure consistent hashing behavior
            that aligns with the equality implementation.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ADMS.API.Entities.RevisionActivity.CompareTo(ADMS.API.Entities.RevisionActivity)" -->
        <member name="M:ADMS.API.Entities.RevisionActivity.op_Equality(ADMS.API.Entities.RevisionActivity,ADMS.API.Entities.RevisionActivity)">
            <summary>
            Determines whether two RevisionActivity instances are equal.
            </summary>
            <param name="left">The first RevisionActivity to compare.</param>
            <param name="right">The second RevisionActivity to compare.</param>
            <returns>true if the RevisionActivities are equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.op_Inequality(ADMS.API.Entities.RevisionActivity,ADMS.API.Entities.RevisionActivity)">
            <summary>
            Determines whether two RevisionActivity instances are not equal.
            </summary>
            <param name="left">The first RevisionActivity to compare.</param>
            <param name="right">The second RevisionActivity to compare.</param>
            <returns>true if the RevisionActivities are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.op_LessThan(ADMS.API.Entities.RevisionActivity,ADMS.API.Entities.RevisionActivity)">
            <summary>
            Determines whether one RevisionActivity precedes another in the ordering.
            </summary>
            <param name="left">The first RevisionActivity to compare.</param>
            <param name="right">The second RevisionActivity to compare.</param>
            <returns>true if the left RevisionActivity precedes the right RevisionActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.op_LessThanOrEqual(ADMS.API.Entities.RevisionActivity,ADMS.API.Entities.RevisionActivity)">
            <summary>
            Determines whether one RevisionActivity precedes or is equal to another in the ordering.
            </summary>
            <param name="left">The first RevisionActivity to compare.</param>
            <param name="right">The second RevisionActivity to compare.</param>
            <returns>true if the left RevisionActivity precedes or equals the right RevisionActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.op_GreaterThan(ADMS.API.Entities.RevisionActivity,ADMS.API.Entities.RevisionActivity)">
            <summary>
            Determines whether one RevisionActivity follows another in the ordering.
            </summary>
            <param name="left">The first RevisionActivity to compare.</param>
            <param name="right">The second RevisionActivity to compare.</param>
            <returns>true if the left RevisionActivity follows the right RevisionActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.op_GreaterThanOrEqual(ADMS.API.Entities.RevisionActivity,ADMS.API.Entities.RevisionActivity)">
            <summary>
            Determines whether one RevisionActivity follows or is equal to another in the ordering.
            </summary>
            <param name="left">The first RevisionActivity to compare.</param>
            <param name="right">The second RevisionActivity to compare.</param>
            <returns>true if the left RevisionActivity follows or equals the right RevisionActivity; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.ToString">
            <summary>
            Returns a string representation of the RevisionActivity.
            </summary>
            <returns>A string that represents the current RevisionActivity.</returns>
            <remarks>
            The string representation includes key identifying information about the activity,
            which is useful for debugging, logging, and display purposes.
            </remarks>
            <example>
            <code>
            var activity = new RevisionActivity 
            { 
                Id = Guid.Parse("10000000-0000-0000-0000-000000000001"), 
                Activity = "CREATED"
            };
            
            Console.WriteLine(activity);
            // Output: "RevisionActivity: CREATED (10000000-0000-0000-0000-000000000001)"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.IsCreationActivity">
            <summary>
            Determines whether this activity represents a lifecycle creation operation.
            </summary>
            <returns>true if this is a creation activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify creation activities for
            business rule enforcement and audit trail analysis.
            </remarks>
            <example>
            <code>
            if (revisionActivity.IsCreationActivity())
            {
                // Apply creation-specific business rules
                Console.WriteLine("This is a revision creation activity");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.IsDeletionActivity">
            <summary>
            Determines whether this activity represents a deletion operation.
            </summary>
            <returns>true if this is a deletion activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify deletion activities for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (revisionActivity.IsDeletionActivity())
            {
                // Apply deletion-specific business rules
                auditLogger.LogDeletion(revisionActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.IsRestorationActivity">
            <summary>
            Determines whether this activity represents a restoration operation.
            </summary>
            <returns>true if this is a restoration activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify restoration activities for
            audit trail analysis and recovery operations.
            </remarks>
            <example>
            <code>
            if (revisionActivity.IsRestorationActivity())
            {
                // Apply restoration-specific business rules
                recoveryLogger.LogRestoration(revisionActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.IsSaveActivity">
            <summary>
            Determines whether this activity represents a save operation.
            </summary>
            <returns>true if this is a save activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify save activities for
            business rule enforcement and workflow analysis.
            </remarks>
            <example>
            <code>
            if (revisionActivity.IsSaveActivity())
            {
                // Apply save-specific business rules
                versionControl.ProcessSave(revisionActivity);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.IsAppropriateForContext(System.Boolean,System.Boolean)">
            <summary>
            Determines whether this activity is appropriate for the given revision context.
            </summary>
            <param name="revisionExists">Whether the revision already exists.</param>
            <param name="isDeleted">Whether the revision is currently deleted.</param>
            <returns>true if the activity is appropriate for the context; otherwise, false.</returns>
            <remarks>
            This method uses the RevisionActivityValidationHelper to validate business rules
            for activity context appropriateness.
            </remarks>
            <example>
            <code>
            bool canApply = createdActivity.IsAppropriateForContext(false, false);  // true for new revision
            bool cannotApply = createdActivity.IsAppropriateForContext(true, false); // false for existing revision
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.GetSeededActivityId(System.String)">
            <summary>
            Gets the seeded GUID for a specific activity name.
            </summary>
            <param name="activityName">The activity name to get the GUID for.</param>
            <returns>The seeded GUID if found; otherwise, Guid.Empty.</returns>
            <remarks>
            This method returns the specific GUIDs used in database seeding for standard activities,
            useful for business logic that needs to reference specific activity types.
            </remarks>
            <example>
            <code>
            var createdActivityId = RevisionActivity.GetSeededActivityId("CREATED");
            // Returns: 10000000-0000-0000-0000-000000000001
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivity.Validate">
            <summary>
            Validates the current RevisionActivity instance against business rules.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <remarks>
            This method performs comprehensive validation using RevisionActivityValidationHelper
            including activity name validation, length constraints, and business rule compliance.
            </remarks>
            <example>
            <code>
            var validationResults = revisionActivity.Validate();
            if (validationResults.Any())
            {
                foreach (var error in validationResults)
                {
                    Console.WriteLine($"Validation Error: {error.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Entities.RevisionActivityUser">
            <summary>
            Represents the association between a revision, a revision activity, and a user in the ADMS legal document management system.
            </summary>
            <remarks>
            The RevisionActivityUser entity serves as a junction table implementing the many-to-many relationship
            between revisions, revision activities, and users. This entity is critical for maintaining comprehensive
            audit trails of all revision-related operations within the legal document management system.
            
            <para><strong>Key Characteristics:</strong></para>
            <list type="bullet">
            <item><strong>Audit Trail Foundation:</strong> Central component of revision activity tracking</item>
            <item><strong>Composite Primary Key:</strong> Ensures uniqueness while allowing temporal tracking</item>
            <item><strong>User Attribution:</strong> Links every revision activity to a responsible user</item>
            <item><strong>Temporal Tracking:</strong> Maintains precise timestamps for all activities</item>
            <item><strong>Legal Compliance:</strong> Supports comprehensive audit requirements</item>
            </list>
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Composite primary key: RevisionId + RevisionActivityId + UserId + CreatedAt</item>
            <item>All foreign key relationships are required</item>
            <item>Cascade behavior: Cascade from Revision, Restrict from Activity and User</item>
            <item>Indexed on CreatedAt for temporal queries</item>
            </list>
            
            <para><strong>Audit Trail Functionality:</strong></para>
            This entity enables comprehensive tracking of:
            <list type="bullet">
            <item><strong>Who:</strong> Which user performed the activity</item>
            <item><strong>What:</strong> What revision activity was performed</item>
            <item><strong>Where:</strong> On which revision the activity occurred</item>
            <item><strong>When:</strong> Precise timestamp of the activity</item>
            </list>
            
            <para><strong>Legal Compliance Support:</strong></para>
            <list type="bullet">
            <item>Complete user attribution for all revision operations</item>
            <item>Temporal audit trails for legal discovery and compliance</item>
            <item>Immutable record of document version control activities</item>
            <item>Support for regulatory reporting and audit requirements</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Every revision activity must be attributed to a user</item>
            <item>Multiple activities of the same type can occur with different timestamps</item>
            <item>CreatedAt timestamp must be within reasonable bounds</item>
            <item>All foreign key relationships must reference valid entities</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            The entity is configured in AdmsContext.ConfigureRevisionActivityUser with:
            <list type="bullet">
            <item>Composite key including all four core properties</item>
            <item>Required relationships to Revision, RevisionActivity, and User</item>
            <item>Proper cascade behaviors to maintain audit trail integrity</item>
            <item>Performance indexes on commonly queried fields</item>
            </list>
            </remarks>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivityUser.RevisionId">
            <summary>
            Gets or sets the unique identifier of the revision.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the revision that this activity
            is associated with. It forms part of the composite primary key and is required for all
            revision activity user associations.
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to Revision entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>Supports cascade delete from parent revision</item>
            </list>
            
            <para><strong>Usage Context:</strong></para>
            <list type="bullet">
            <item>Links activity to specific document revision</item>
            <item>Enables revision-scoped activity queries</item>
            <item>Supports version control audit trails</item>
            <item>Facilitates revision lifecycle tracking</item>
            </list>
            
            <para><strong>Validation:</strong></para>
            The RevisionId is validated to ensure it references a valid revision using
            RevisionValidationHelper.IsValidRevisionId method.
            </remarks>
            <example>
            <code>
            var revisionActivity = new RevisionActivityUser
            {
                RevisionId = revision.Id,  // Must reference valid revision
                RevisionActivityId = activityId,
                UserId = user.Id,
                CreatedAt = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivityUser.RevisionActivityId">
            <summary>
            Gets or sets the unique identifier of the revision activity.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the revision activity type
            that was performed. It forms part of the composite primary key and must reference
            a valid revision activity from the seeded data.
            
            <para><strong>Activity Types:</strong></para>
            Must reference one of the seeded revision activities:
            <list type="bullet">
            <item><strong>CREATED:</strong> Revision creation activity</item>
            <item><strong>SAVED:</strong> Revision save activity</item>
            <item><strong>DELETED:</strong> Revision deletion activity</item>
            <item><strong>RESTORED:</strong> Revision restoration activity</item>
            </list>
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to RevisionActivity entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>Restricted cascade delete to preserve audit integrity</item>
            </list>
            
            <para><strong>Validation:</strong></para>
            The RevisionActivityId is validated using RevisionActivityValidationHelper
            to ensure it references a valid, allowed activity type.
            </remarks>
            <example>
            <code>
            // Linking to a CREATED activity
            var createdActivityId = Guid.Parse("10000000-0000-0000-0000-000000000001");
            var activityUser = new RevisionActivityUser
            {
                RevisionActivityId = createdActivityId,  // Must be valid activity
                // ... other properties
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivityUser.UserId">
            <summary>
            Gets or sets the unique identifier of the user.
            </summary>
            <remarks>
            This property establishes the foreign key relationship to the user who performed
            the revision activity. It forms part of the composite primary key and provides
            the essential user attribution for audit trail purposes.
            
            <para><strong>User Attribution:</strong></para>
            <list type="bullet">
            <item>Links activity to responsible user for accountability</item>
            <item>Enables user-scoped activity reporting</item>
            <item>Supports legal compliance and audit requirements</item>
            <item>Facilitates user activity analytics and monitoring</item>
            </list>
            
            <para><strong>Relationship Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key to User entity</item>
            <item>Part of composite primary key</item>
            <item>Required field - cannot be Guid.Empty</item>
            <item>Restricted cascade delete to preserve audit integrity</item>
            </list>
            
            <para><strong>Legal Significance:</strong></para>
            User attribution is critical for:
            <list type="bullet">
            <item>Legal discovery and compliance audits</item>
            <item>Professional responsibility tracking</item>
            <item>Accountability in document management</item>
            <item>Evidence of who performed specific actions</item>
            </list>
            </remarks>
            <example>
            <code>
            // Attributing activity to a specific user
            var activityUser = new RevisionActivityUser
            {
                UserId = currentUser.Id,  // Must reference valid user
                RevisionId = revision.Id,
                RevisionActivityId = activityId,
                CreatedAt = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivityUser.CreatedAt">
            <summary>
            Gets or sets the date and time when this entry was created (in UTC).
            </summary>
            <remarks>
            This property maintains the precise timestamp of when the revision activity occurred.
            It forms part of the composite primary key, enabling multiple activities of the same
            type to be recorded with different timestamps while maintaining uniqueness.
            
            <para><strong>Temporal Tracking:</strong></para>
            <list type="bullet">
            <item>Provides precise timing for audit trail chronology</item>
            <item>Enables temporal analysis of revision activities</item>
            <item>Supports legal timeline reconstruction</item>
            <item>Facilitates performance and workflow analysis</item>
            </list>
            
            <para><strong>Date Requirements:</strong></para>
            <list type="bullet">
            <item>Must be stored in UTC format for consistency</item>
            <item>Cannot be earlier than system minimum date</item>
            <item>Cannot be in the future (with tolerance for clock skew)</item>
            <item>Forms part of composite primary key for uniqueness</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Automatically set to current UTC time when not specified</item>
            <item>Should reflect the actual time the activity occurred</item>
            <item>Used for chronological ordering in audit reports</item>
            <item>Critical for legal compliance and audit trails</item>
            </list>
            
            <para><strong>Validation:</strong></para>
            The CreatedAt timestamp is validated using RevisionValidationHelper
            to ensure it falls within acceptable date ranges.
            </remarks>
            <example>
            <code>
            var activityUser = new RevisionActivityUser
            {
                CreatedAt = DateTime.UtcNow,  // Always use UTC
                // ... other properties
            };
            
            // For historical data import
            var historicalActivity = new RevisionActivityUser
            {
                CreatedAt = specificUtcDateTime,  // Specific historical timestamp
                // ... other properties
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivityUser.Revision">
            <summary>
            Gets or sets the revision associated with this activity.
            </summary>
            <remarks>
            This navigation property provides access to the revision that this activity was performed on.
            The relationship is established through the RevisionId foreign key and enables rich
            querying and navigation within Entity Framework.
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses RevisionId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>Cascade delete behavior preserves audit trail integrity</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Accessing revision details from activity context</item>
            <item>Document version control operations</item>
            <item>Audit trail reporting with revision information</item>
            <item>Cross-entity queries and projections</item>
            </list>
            
            <para><strong>Performance Considerations:</strong></para>
            The virtual modifier enables lazy loading, but consider explicit loading or
            projections when working with multiple activities to avoid N+1 query issues.
            </remarks>
            <example>
            <code>
            // Accessing revision information through activity
            var documentName = activityUser.Revision.Document.FileName;
            var revisionNumber = activityUser.Revision.RevisionNumber;
            
            // Using explicit loading to avoid N+1 queries
            await context.Entry(activityUser)
                .Reference(au => au.Revision)
                .LoadAsync();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivityUser.RevisionActivity">
            <summary>
            Gets or sets the revision activity associated with this user.
            </summary>
            <remarks>
            This navigation property provides access to the revision activity type that was performed.
            The relationship is established through the RevisionActivityId foreign key and enables
            access to activity metadata such as the activity name and description.
            
            <para><strong>Activity Information:</strong></para>
            Provides access to:
            <list type="bullet">
            <item>Activity name (CREATED, SAVED, DELETED, RESTORED)</item>
            <item>Activity metadata and configuration</item>
            <item>Activity validation rules and constraints</item>
            <item>Cross-activity analysis and reporting</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses RevisionActivityId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>Restricted cascade delete to preserve audit integrity</item>
            </list>
            
            <para><strong>Business Logic Integration:</strong></para>
            <list type="bullet">
            <item>Activity-specific business rule enforcement</item>
            <item>Activity categorization and reporting</item>
            <item>Workflow and process analysis</item>
            <item>Activity-based authorization and permissions</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing activity type information
            var activityName = activityUser.RevisionActivity.Activity;
            var isCreationActivity = activityName == "CREATED";
            
            // Activity-based filtering
            var creationActivities = activities
                .Where(a => a.RevisionActivity.Activity == "CREATED");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivityUser.User">
            <summary>
            Gets or sets the user associated with this revision activity.
            </summary>
            <remarks>
            This navigation property provides access to the user who performed the revision activity.
            The relationship is established through the UserId foreign key and enables comprehensive
            user-based reporting and analysis of revision activities.
            
            <para><strong>User Information Access:</strong></para>
            Provides access to:
            <list type="bullet">
            <item>User identification and contact information</item>
            <item>User activity patterns and behavior</item>
            <item>Professional attribution for legal compliance</item>
            <item>User-based reporting and analytics</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses UserId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>Restricted cascade delete to preserve audit integrity</item>
            </list>
            
            <para><strong>Legal and Compliance Support:</strong></para>
            <list type="bullet">
            <item>User accountability for revision activities</item>
            <item>Professional responsibility tracking</item>
            <item>Legal discovery and audit trail support</item>
            <item>Compliance reporting and analysis</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing user information through activity
            var userName = activityUser.User.Name;
            var userActivities = activityUser.User.RevisionActivityUsers;
            
            // User-based activity analysis
            var userCreationCount = user.RevisionActivityUsers
                .Count(au => au.RevisionActivity.Activity == "CREATED");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivityUser.HasValidReferences">
            <summary>
            Gets a value indicating whether this activity record has valid foreign key references.
            </summary>
            <remarks>
            This computed property validates that all required foreign key properties contain
            valid (non-empty) GUID values, ensuring referential integrity.
            
            <para><strong>Validation Checks:</strong></para>
            <list type="bullet">
            <item>RevisionId is not Guid.Empty</item>
            <item>RevisionActivityId is not Guid.Empty</item>
            <item>UserId is not Guid.Empty</item>
            </list>
            </remarks>
            <example>
            <code>
            if (!activityUser.HasValidReferences)
            {
                throw new InvalidOperationException("Activity user has invalid foreign key references");
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.RevisionActivityUser.HasValidTimestamp">
            <summary>
            Gets a value indicating whether the CreatedAt timestamp is within reasonable bounds.
            </summary>
            <remarks>
            This computed property uses the RevisionValidationHelper to validate that the
            CreatedAt timestamp falls within acceptable date ranges for the system.
            </remarks>
            <example>
            <code>
            if (!activityUser.HasValidTimestamp)
            {
                logger.LogWarning($"Activity user {activityUser} has invalid timestamp: {activityUser.CreatedAt}");
            }
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ADMS.API.Entities.RevisionActivityUser.AgeDays" -->
        <member name="P:ADMS.API.Entities.RevisionActivityUser.ActivityDescription">
            <summary>
            Gets the formatted activity description for display purposes.
            </summary>
            <remarks>
            This computed property provides a human-readable description of the activity
            including user attribution, activity type, and timestamp information.
            </remarks>
            <example>
            <code>
            Console.WriteLine(activityUser.ActivityDescription);
            // Output: "rbrown performed CREATED on revision 1 at 2024-01-15 10:30 UTC"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivityUser.Equals(ADMS.API.Entities.RevisionActivityUser)">
            <summary>
            Determines whether the specified RevisionActivityUser is equal to the current RevisionActivityUser.
            </summary>
            <param name="other">The RevisionActivityUser to compare with the current RevisionActivityUser.</param>
            <returns>true if the specified RevisionActivityUser is equal to the current RevisionActivityUser; otherwise, false.</returns>
            <remarks>
            Equality is determined by comparing all four components of the composite primary key:
            RevisionId, RevisionActivityId, UserId, and CreatedAt. This follows Entity Framework
            best practices for entities with composite keys.
            </remarks>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivityUser.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current RevisionActivityUser.
            </summary>
            <param name="obj">The object to compare with the current RevisionActivityUser.</param>
            <returns>true if the specified object is equal to the current RevisionActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivityUser.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current RevisionActivityUser.</returns>
            <remarks>
            The hash code is computed from all four components of the composite primary key
            to ensure consistent hashing behavior that aligns with the equality implementation.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ADMS.API.Entities.RevisionActivityUser.CompareTo(ADMS.API.Entities.RevisionActivityUser)" -->
        <member name="M:ADMS.API.Entities.RevisionActivityUser.op_Equality(ADMS.API.Entities.RevisionActivityUser,ADMS.API.Entities.RevisionActivityUser)">
            <summary>
            Determines whether two RevisionActivityUser instances are equal.
            </summary>
            <param name="left">The first RevisionActivityUser to compare.</param>
            <param name="right">The second RevisionActivityUser to compare.</param>
            <returns>true if the RevisionActivityUsers are equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivityUser.op_Inequality(ADMS.API.Entities.RevisionActivityUser,ADMS.API.Entities.RevisionActivityUser)">
            <summary>
            Determines whether two RevisionActivityUser instances are not equal.
            </summary>
            <param name="left">The first RevisionActivityUser to compare.</param>
            <param name="right">The second RevisionActivityUser to compare.</param>
            <returns>true if the RevisionActivityUsers are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivityUser.op_LessThan(ADMS.API.Entities.RevisionActivityUser,ADMS.API.Entities.RevisionActivityUser)">
            <summary>
            Determines whether one RevisionActivityUser precedes another in the ordering.
            </summary>
            <param name="left">The first RevisionActivityUser to compare.</param>
            <param name="right">The second RevisionActivityUser to compare.</param>
            <returns>true if the left RevisionActivityUser precedes the right RevisionActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivityUser.op_LessThanOrEqual(ADMS.API.Entities.RevisionActivityUser,ADMS.API.Entities.RevisionActivityUser)">
            <summary>
            Determines whether one RevisionActivityUser precedes or is equal to another in the ordering.
            </summary>
            <param name="left">The first RevisionActivityUser to compare.</param>
            <param name="right">The second RevisionActivityUser to compare.</param>
            <returns>true if the left RevisionActivityUser precedes or equals the right RevisionActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivityUser.op_GreaterThan(ADMS.API.Entities.RevisionActivityUser,ADMS.API.Entities.RevisionActivityUser)">
            <summary>
            Determines whether one RevisionActivityUser follows another in the ordering.
            </summary>
            <param name="left">The first RevisionActivityUser to compare.</param>
            <param name="right">The second RevisionActivityUser to compare.</param>
            <returns>true if the left RevisionActivityUser follows the right RevisionActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivityUser.op_GreaterThanOrEqual(ADMS.API.Entities.RevisionActivityUser,ADMS.API.Entities.RevisionActivityUser)">
            <summary>
            Determines whether one RevisionActivityUser follows or is equal to another in the ordering.
            </summary>
            <param name="left">The first RevisionActivityUser to compare.</param>
            <param name="right">The second RevisionActivityUser to compare.</param>
            <returns>true if the left RevisionActivityUser follows or equals the right RevisionActivityUser; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivityUser.ToString">
            <summary>
            Returns a string representation of the RevisionActivityUser.
            </summary>
            <returns>A string that represents the current RevisionActivityUser.</returns>
            <remarks>
            The string representation includes key identifying information about the activity,
            which is useful for debugging, logging, and audit trail display purposes.
            </remarks>
            <example>
            <code>
            var activityUser = new RevisionActivityUser
            {
                RevisionId = revisionGuid,
                RevisionActivityId = activityGuid,
                UserId = userGuid,
                CreatedAt = DateTime.UtcNow
            };
            
            Console.WriteLine(activityUser);
            // Output: "User rbrown performed CREATED on Revision 1 at 2024-01-15 10:30:00 UTC"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivityUser.IsCreationActivity">
            <summary>
            Determines whether this activity record represents a creation activity.
            </summary>
            <returns>true if this is a creation activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify creation activities without
            directly accessing the navigation property, which can help avoid lazy loading
            in performance-sensitive scenarios.
            </remarks>
            <example>
            <code>
            if (activityUser.IsCreationActivity())
            {
                // Handle creation-specific logic
                Console.WriteLine("This revision was created by: " + activityUser.User?.Name);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivityUser.IsDeletionActivity">
            <summary>
            Determines whether this activity record represents a deletion activity.
            </summary>
            <returns>true if this is a deletion activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify deletion activities for
            audit trail analysis and business rule enforcement.
            </remarks>
            <example>
            <code>
            if (activityUser.IsDeletionActivity())
            {
                // Handle deletion-specific logic
                auditLogger.LogDeletion(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivityUser.IsRestorationActivity">
            <summary>
            Determines whether this activity record represents a restoration activity.
            </summary>
            <returns>true if this is a restoration activity; otherwise, false.</returns>
            <remarks>
            This method provides a convenient way to identify restoration activities for
            audit trail analysis and recovery operations.
            </remarks>
            <example>
            <code>
            if (activityUser.IsRestorationActivity())
            {
                // Handle restoration-specific logic
                recoveryLogger.LogRestoration(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivityUser.IsRecent(System.Double)">
            <summary>
            Determines whether this activity occurred recently within the specified timeframe.
            </summary>
            <param name="withinHours">The number of hours to consider as "recent".</param>
            <returns>true if the activity occurred within the specified timeframe; otherwise, false.</returns>
            <remarks>
            This method is useful for identifying recent activities for notifications,
            reporting, and real-time monitoring purposes.
            </remarks>
            <example>
            <code>
            // Check for activities in the last 24 hours
            if (activityUser.IsRecent(24))
            {
                notificationService.NotifyRecentActivity(activityUser);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.RevisionActivityUser.Validate">
            <summary>
            Validates the current RevisionActivityUser instance against business rules.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <remarks>
            This method performs comprehensive validation including:
            <list type="bullet">
            <item>Foreign key reference validation</item>
            <item>Timestamp validation using RevisionValidationHelper</item>
            <item>Business rule compliance checking</item>
            </list>
            </remarks>
            <example>
            <code>
            var validationResults = activityUser.Validate();
            if (validationResults.Any())
            {
                foreach (var error in validationResults)
                {
                    Console.WriteLine($"Validation Error: {error.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Entities.Revision">
            <summary>
            Represents a document revision in the ADMS legal document management system.
            </summary>
            <remarks>
            The Revision entity serves as the core component of the document versioning system within ADMS,
            maintaining comprehensive version control and audit trails for legal documents. Each revision
            represents a specific version of a document with sequential numbering and temporal tracking.
            
            <para><strong>Key Characteristics:</strong></para>
            <list type="bullet">
            <item><strong>Version Control:</strong> Sequential revision numbering starting from 1</item>
            <item><strong>Temporal Tracking:</strong> Creation and modification dates with UTC storage</item>
            <item><strong>Document Association:</strong> Strong relationship with parent document</item>
            <item><strong>Activity Tracking:</strong> Comprehensive audit trail through revision activities</item>
            <item><strong>Soft Deletion:</strong> Deletion tracking without data loss for audit preservation</item>
            </list>
            
            <para><strong>Version Control System:</strong></para>
            <list type="bullet">
            <item><strong>Sequential Numbering:</strong> Revision numbers are sequential starting from 1</item>
            <item><strong>No Gaps:</strong> Version control maintains continuous numbering without gaps</item>
            <item><strong>Chronological Order:</strong> Creation and modification dates ensure temporal consistency</item>
            <item><strong>Audit Trail:</strong> Every revision change is tracked through RevisionActivityUser associations</item>
            </list>
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key: GUID with identity generation</item>
            <item>Document relationship: Required foreign key with cascade restrictions</item>
            <item>Activity tracking: One-to-many relationship with RevisionActivityUser</item>
            <item>No explicit seeded data - revisions are created through document operations</item>
            </list>
            
            <para><strong>Legal Compliance:</strong></para>
            Revisions are critical for legal document management, providing:
            <list type="bullet">
            <item>Complete version history for legal documents</item>
            <item>Audit trails showing who made changes and when</item>
            <item>Temporal consistency for document evolution tracking</item>
            <item>Soft deletion capabilities preserving historical data</item>
            <item>Integration with legal document retention requirements</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Revision numbers must be sequential within each document</item>
            <item>Creation date must precede or equal modification date</item>
            <item>Deleted revisions are preserved for audit trail integrity</item>
            <item>Each revision must be associated with at least one activity for accountability</item>
            </list>
            
            <para><strong>Professional Usage:</strong></para>
            The Revision entity supports professional legal practice requirements including proper
            document versioning, change tracking, and compliance with legal practice standards for
            maintaining accurate records of document development and modification history.
            </remarks>
        </member>
        <member name="P:ADMS.API.Entities.Revision.Id">
            <summary>
            Gets or sets the unique identifier for the revision.
            </summary>
            <remarks>
            This GUID serves as the primary key and is automatically generated when the revision is created.
            The ID is used throughout the system to establish relationships and maintain referential integrity
            across all revision-related operations and audit trails.
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key with identity generation</item>
            <item>Non-nullable and required for all operations</item>
            <item>Used as foreign key in RevisionActivityUser relationship table</item>
            </list>
            
            <para><strong>Usage Considerations:</strong></para>
            The ID remains constant throughout the revision's lifecycle and is used for all
            audit trail associations, activity tracking, and system references.
            </remarks>
            <example>
            <code>
            var revision = new Revision 
            { 
                RevisionNumber = 1, 
                DocumentId = documentGuid,
                CreationDate = DateTime.UtcNow 
            };
            // ID will be automatically generated when saved to database
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Revision.RevisionNumber">
            <summary>
            Gets or sets the revision number for the specified document.
            </summary>
            <remarks>
            The revision number represents the sequential version of the document, starting from 1 for
            the first revision and incrementing by 1 for each subsequent revision. This numbering
            system ensures clear version identification and maintains chronological order.
            
            <para><strong>Versioning Rules:</strong></para>
            <list type="bullet">
            <item>First revision of any document must be number 1</item>
            <item>Subsequent revisions must be sequential (no gaps allowed)</item>
            <item>Maximum revision number is 999,999 (as defined in RevisionValidationHelper)</item>
            <item>Revision numbers are unique within each document scope</item>
            </list>
            
            <para><strong>Business Logic:</strong></para>
            The revision number is used for:
            <list type="bullet">
            <item>Version identification in user interfaces</item>
            <item>Sorting and ordering revision history</item>
            <item>Version comparison and rollback operations</item>
            <item>Audit trail reporting and compliance documentation</item>
            </list>
            
            <para><strong>Validation:</strong></para>
            Revision numbers are validated using RevisionValidationHelper to ensure they follow
            proper sequencing rules and remain within acceptable bounds.
            </remarks>
            <example>
            <code>
            // Creating sequential revisions for a document
            var revision1 = new Revision { RevisionNumber = 1, DocumentId = docId };  // First revision
            var revision2 = new Revision { RevisionNumber = 2, DocumentId = docId };  // Second revision
            var revision3 = new Revision { RevisionNumber = 3, DocumentId = docId };  // Third revision
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Revision.CreationDate">
            <summary>
            Gets or sets the creation date for the revision (in UTC).
            </summary>
            <remarks>
            The creation date represents when the revision was initially created in the system.
            All dates are stored in UTC to ensure consistency across different time zones and
            to support accurate temporal tracking for legal compliance.
            
            <para><strong>Date Requirements:</strong></para>
            <list type="bullet">
            <item>Must be stored in UTC format</item>
            <item>Cannot be earlier than January 1, 1980 (system minimum)</item>
            <item>Cannot be in the future (with 1-minute tolerance for clock skew)</item>
            <item>Must precede or equal the ModificationDate</item>
            </list>
            
            <para><strong>Legal Significance:</strong></para>
            The creation date is critical for legal document management as it establishes:
            <list type="bullet">
            <item>When document versions were created for legal timelines</item>
            <item>Chronological order for version control and audit trails</item>
            <item>Evidence for document development and modification history</item>
            <item>Compliance with legal practice standards for record keeping</item>
            </list>
            
            <para><strong>Validation:</strong></para>
            Creation dates are validated using RevisionValidationHelper to ensure they meet
            business rules and legal compliance requirements.
            </remarks>
            <example>
            <code>
            var revision = new Revision
            {
                CreationDate = DateTime.UtcNow,  // Always use UTC
                ModificationDate = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Revision.ModificationDate">
            <summary>
            Gets or sets the modification date for the revision (in UTC).
            </summary>
            <remarks>
            The modification date represents when the revision was last modified or updated.
            This date must be greater than or equal to the creation date and follows the same
            UTC storage requirements for consistency and legal compliance.
            
            <para><strong>Date Requirements:</strong></para>
            <list type="bullet">
            <item>Must be stored in UTC format</item>
            <item>Must be greater than or equal to CreationDate</item>
            <item>Cannot be earlier than January 1, 1980 (system minimum)</item>
            <item>Cannot be in the future (with 1-minute tolerance for clock skew)</item>
            </list>
            
            <para><strong>Business Logic:</strong></para>
            The modification date serves several purposes:
            <list type="bullet">
            <item>Tracking when changes were made to revision content</item>
            <item>Establishing chronological order for audit purposes</item>
            <item>Supporting version comparison and change analysis</item>
            <item>Providing timestamps for legal document modification tracking</item>
            </list>
            
            <para><strong>Update Scenarios:</strong></para>
            <list type="bullet">
            <item>Initially set to same value as CreationDate</item>
            <item>Updated whenever revision content or metadata changes</item>
            <item>Preserved during soft deletion for audit trail integrity</item>
            </list>
            </remarks>
            <example>
            <code>
            // Creating a revision with initial dates
            var revision = new Revision
            {
                CreationDate = DateTime.UtcNow,
                ModificationDate = DateTime.UtcNow  // Initially same as creation
            };
            
            // Later updating the revision
            revision.ModificationDate = DateTime.UtcNow;  // Update to current time
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Revision.DocumentId">
            <summary>
            Gets or sets the document ID linked to this revision.
            </summary>
            <remarks>
            This property establishes the foreign key relationship between the revision and its
            parent document. Every revision must be associated with exactly one document, and
            this relationship is enforced at the database level.
            
            <para><strong>Relationship Requirements:</strong></para>
            <list type="bullet">
            <item>Must reference a valid, existing document</item>
            <item>Cannot be Guid.Empty (validated by RevisionValidationHelper)</item>
            <item>Establishes one-to-many relationship (Document -> Revisions)</item>
            <item>Required field - every revision must have a parent document</item>
            </list>
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Foreign key constraint with required relationship</item>
            <item>Used in Entity Framework navigation property configuration</item>
            <item>Part of document version control integrity</item>
            </list>
            
            <para><strong>Business Logic:</strong></para>
            The document association enables:
            <list type="bullet">
            <item>Grouping revisions by parent document</item>
            <item>Version control operations within document scope</item>
            <item>Document-level audit trail aggregation</item>
            <item>Cascade operations and referential integrity</item>
            </list>
            </remarks>
            <example>
            <code>
            var document = new Document { /* document properties */ };
            var revision = new Revision
            {
                DocumentId = document.Id,  // Establish relationship
                RevisionNumber = 1,
                CreationDate = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Revision.IsDeleted">
            <summary>
            Gets or sets a value indicating whether the revision is deleted.
            </summary>
            <remarks>
            This property implements soft deletion for the revision, allowing the revision to be
            marked as deleted while preserving all data for audit trail and legal compliance
            purposes. Soft deletion is critical in legal document management where complete
            audit trails must be maintained.
            
            <para><strong>Soft Deletion Benefits:</strong></para>
            <list type="bullet">
            <item>Preserves complete audit trail for legal compliance</item>
            <item>Maintains referential integrity across related entities</item>
            <item>Enables recovery operations if deletion was accidental</item>
            <item>Supports historical reporting and analysis</item>
            </list>
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Deleted revisions cannot be deleted if they have active references</item>
            <item>Deletion status is tracked through RevisionActivityUser audit entries</item>
            <item>Deleted revisions are typically filtered from normal operations</item>
            <item>Restoration operations can reverse soft deletion</item>
            </list>
            
            <para><strong>Legal Compliance:</strong></para>
            Soft deletion supports legal document management requirements by:
            <list type="bullet">
            <item>Maintaining complete document version history</item>
            <item>Preserving evidence of document lifecycle events</item>
            <item>Supporting legal discovery and compliance audits</item>
            <item>Enabling rollback operations when legally required</item>
            </list>
            </remarks>
            <example>
            <code>
            // Soft delete a revision
            revision.IsDeleted = true;
            
            // Query for active (non-deleted) revisions
            var activeRevisions = revisions.Where(r => !r.IsDeleted);
            
            // Restore a deleted revision
            revision.IsDeleted = false;
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Revision.Document">
            <summary>
            Gets or sets the document linked to this revision.
            </summary>
            <remarks>
            This navigation property provides access to the parent document associated with this
            revision. The relationship is established through the DocumentId foreign key and
            enables navigation from revision to document in Entity Framework queries.
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured as required relationship in AdmsContext</item>
            <item>Uses DocumentId as foreign key</item>
            <item>Supports lazy loading with virtual modifier</item>
            <item>Part of one-to-many relationship (Document has many Revisions)</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Accessing document metadata from revision context</item>
            <item>Document-level operations initiated from revision</item>
            <item>Audit trail reporting including document information</item>
            <item>Version control operations requiring document context</item>
            </list>
            
            <para><strong>Performance Considerations:</strong></para>
            The virtual modifier enables lazy loading, but consider explicit loading or
            projections when working with multiple revisions to avoid N+1 query issues.
            </remarks>
            <example>
            <code>
            // Accessing document through revision
            string documentName = revision.Document.FileName;
            string matterDescription = revision.Document.Matter.Description;
            
            // Using explicit loading to avoid N+1 queries
            context.Entry(revision)
                .Reference(r => r.Document)
                .Load();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Revision.RevisionActivityUsers">
            <summary>
            Gets or sets the collection of revision activity users associated with this revision.
            </summary>
            <remarks>
            This collection maintains the many-to-many relationship between revisions, activities,
            and users, providing a comprehensive audit trail of all actions performed on this revision.
            Each entry includes timestamps and tracks specific activities like creation, modification,
            deletion, and restoration.
            
            <para><strong>Activity Types Tracked:</strong></para>
            <list type="bullet">
            <item><strong>CREATED:</strong> User created this revision</item>
            <item><strong>SAVED:</strong> User saved changes to this revision</item>
            <item><strong>DELETED:</strong> User deleted this revision</item>
            <item><strong>RESTORED:</strong> User restored this deleted revision</item>
            </list>
            
            <para><strong>Audit Trail Significance:</strong></para>
            Each association provides:
            <list type="bullet">
            <item>User attribution for revision operations</item>
            <item>Timestamp tracking for temporal analysis</item>
            <item>Activity classification for operation categorization</item>
            <item>Complete audit trail for legal compliance</item>
            </list>
            
            <para><strong>Entity Framework Configuration:</strong></para>
            <list type="bullet">
            <item>Configured in AdmsContext.ConfigureRevisionActivityUser</item>
            <item>Composite primary key includes RevisionId, RevisionActivityId, UserId, CreatedAt</item>
            <item>Required relationships to all associated entities</item>
            <item>Supports multiple activities of same type with different timestamps</item>
            </list>
            
            <para><strong>Legal Compliance:</strong></para>
            The activity tracking supports legal document management by:
            <list type="bullet">
            <item>Providing complete user attribution for revision changes</item>
            <item>Maintaining chronological audit trails</item>
            <item>Supporting legal discovery and compliance requirements</item>
            <item>Enabling detailed reporting on document revision history</item>
            </list>
            </remarks>
            <example>
            <code>
            // Accessing revision activities
            foreach (var activity in revision.RevisionActivityUsers)
            {
                Console.WriteLine($"User {activity.User?.Name} performed {activity.RevisionActivity?.Activity} " +
                                 $"on revision {revision.RevisionNumber} at {activity.CreatedAt}");
            }
            
            // Finding who created this revision
            var creator = revision.RevisionActivityUsers
                .FirstOrDefault(ra => ra.RevisionActivity?.Activity == "CREATED")?.User;
            
            // Getting revision activity timeline
            var timeline = revision.RevisionActivityUsers
                .OrderBy(ra => ra.CreatedAt)
                .Select(ra => new { ra.CreatedAt, ra.RevisionActivity?.Activity, ra.User?.Name });
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Revision.HasActivities">
            <summary>
            Gets a value indicating whether this revision has any recorded activities.
            </summary>
            <remarks>
            This property is useful for determining audit trail completeness and ensuring that
            revisions have proper activity tracking. Revisions without activities may indicate
            incomplete audit trail data or system issues.
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Audit trail validation and completeness checking</item>
            <item>Data integrity verification during system operations</item>
            <item>Reporting on revision activity coverage</item>
            <item>Identifying revisions requiring activity backfill</item>
            </list>
            
            <para><strong>Performance Note:</strong></para>
            This property triggers a database query to count related entities. Consider using
            explicit loading or projections when working with multiple revisions to avoid N+1 queries.
            </remarks>
            <example>
            <code>
            if (!revision.HasActivities)
            {
                // Log potential audit trail gap
                logger.LogWarning($"Revision {revision.Id} has no activity records");
            }
            
            // Bulk check for revisions without activities
            var revisionsWithoutActivities = revisions.Where(r => !r.HasActivities).ToList();
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Revision.ActivityCount">
            <summary>
            Gets the total count of activities recorded for this revision.
            </summary>
            <remarks>
            This computed property provides insight into the level of activity associated with
            this revision, useful for activity monitoring, audit analysis, and understanding
            revision lifecycle complexity.
            
            <para><strong>Performance Note:</strong></para>
            This property triggers database queries to count related entities. Consider using
            explicit loading or projections when working with multiple revisions to avoid N+1 queries.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"Revision {revision.RevisionNumber} has {revision.ActivityCount} recorded activities");
            
            // Finding most active revisions
            var mostActiveRevisions = revisions
                .OrderByDescending(r => r.ActivityCount)
                .Take(10);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Revision.ModificationTimeSpan">
            <summary>
            Gets the time span between creation and modification dates.
            </summary>
            <remarks>
            This computed property calculates the duration between when the revision was created
            and when it was last modified, providing insight into revision development time and
            modification patterns.
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>Analyzing revision development time patterns</item>
            <item>Identifying long-running revision modifications</item>
            <item>Supporting time-based audit analysis</item>
            <item>Generating revision lifecycle reports</item>
            </list>
            </remarks>
            <example>
            <code>
            if (revision.ModificationTimeSpan.TotalHours > 24)
            {
                Console.WriteLine($"Revision {revision.RevisionNumber} was modified over " +
                                 $"{revision.ModificationTimeSpan.TotalDays:F1} days");
            }
            
            // Finding revisions with long modification periods
            var longRunningRevisions = revisions
                .Where(r => r.ModificationTimeSpan.TotalDays > 30);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Revision.HasReasonableTimeSpan">
            <summary>
            Gets a value indicating whether the modification time span is reasonable.
            </summary>
            <remarks>
            This property uses the RevisionValidationHelper to determine if the time span between
            creation and modification dates is within reasonable bounds, helping identify potential
            data corruption or incorrect timestamp values.
            </remarks>
            <example>
            <code>
            if (!revision.HasReasonableTimeSpan)
            {
                logger.LogWarning($"Revision {revision.Id} has unreasonable time span: {revision.ModificationTimeSpan}");
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.Revision.HasValidDates">
            <summary>
            Gets a value indicating whether both creation and modification dates are valid.
            </summary>
            <remarks>
            This property validates both dates using the RevisionValidationHelper to ensure
            they meet business rules and legal compliance requirements.
            </remarks>
            <example>
            <code>
            if (!revision.HasValidDates)
            {
                var errors = new List&lt;string&gt;();
                if (!Common.RevisionValidationHelper.IsValidCreationDate(revision.CreationDate))
                    errors.Add("Invalid creation date");
                if (!Common.RevisionValidationHelper.IsValidModificationDate(revision.ModificationDate))
                    errors.Add("Invalid modification date");
                
                logger.LogError($"Revision {revision.Id} date validation failed: {string.Join(", ", errors)}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Revision.Equals(ADMS.API.Entities.Revision)">
            <summary>
            Determines whether the specified Revision is equal to the current Revision.
            </summary>
            <param name="other">The Revision to compare with the current Revision.</param>
            <returns>true if the specified Revision is equal to the current Revision; otherwise, false.</returns>
            <remarks>
            Equality is determined by comparing the Id property, as each revision has a unique identifier.
            This follows Entity Framework best practices for entity equality comparison.
            </remarks>
        </member>
        <member name="M:ADMS.API.Entities.Revision.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current Revision.
            </summary>
            <param name="obj">The object to compare with the current Revision.</param>
            <returns>true if the specified object is equal to the current Revision; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Revision.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current Revision.</returns>
            <remarks>
            The hash code is based on the Id property to ensure consistent hashing behavior
            that aligns with the equality implementation.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ADMS.API.Entities.Revision.CompareTo(ADMS.API.Entities.Revision)" -->
        <member name="M:ADMS.API.Entities.Revision.op_Equality(ADMS.API.Entities.Revision,ADMS.API.Entities.Revision)">
            <summary>
            Determines whether two Revision instances are equal.
            </summary>
            <param name="left">The first Revision to compare.</param>
            <param name="right">The second Revision to compare.</param>
            <returns>true if the Revisions are equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Revision.op_Inequality(ADMS.API.Entities.Revision,ADMS.API.Entities.Revision)">
            <summary>
            Determines whether two Revision instances are not equal.
            </summary>
            <param name="left">The first Revision to compare.</param>
            <param name="right">The second Revision to compare.</param>
            <returns>true if the Revisions are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Revision.op_LessThan(ADMS.API.Entities.Revision,ADMS.API.Entities.Revision)">
            <summary>
            Determines whether one Revision precedes another in the ordering.
            </summary>
            <param name="left">The first Revision to compare.</param>
            <param name="right">The second Revision to compare.</param>
            <returns>true if the left Revision precedes the right Revision; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Revision.op_LessThanOrEqual(ADMS.API.Entities.Revision,ADMS.API.Entities.Revision)">
            <summary>
            Determines whether one Revision precedes or is equal to another in the ordering.
            </summary>
            <param name="left">The first Revision to compare.</param>
            <param name="right">The second Revision to compare.</param>
            <returns>true if the left Revision precedes or equals the right Revision; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Revision.op_GreaterThan(ADMS.API.Entities.Revision,ADMS.API.Entities.Revision)">
            <summary>
            Determines whether one Revision follows another in the ordering.
            </summary>
            <param name="left">The first Revision to compare.</param>
            <param name="right">The second Revision to compare.</param>
            <returns>true if the left Revision follows the right Revision; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Revision.op_GreaterThanOrEqual(ADMS.API.Entities.Revision,ADMS.API.Entities.Revision)">
            <summary>
            Determines whether one Revision follows or is equal to another in the ordering.
            </summary>
            <param name="left">The first Revision to compare.</param>
            <param name="right">The second Revision to compare.</param>
            <returns>true if the left Revision follows or equals the right Revision; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.Revision.ToString">
            <summary>
            Returns a string representation of the Revision.
            </summary>
            <returns>A string that represents the current Revision.</returns>
            <remarks>
            The string representation includes key identifying information about the revision,
            which is useful for debugging, logging, and display purposes.
            </remarks>
            <example>
            <code>
            var revision = new Revision 
            { 
                Id = Guid.Parse("12345678-1234-5678-9012-123456789012"), 
                RevisionNumber = 3,
                DocumentId = Guid.Parse("87654321-4321-8765-2109-876543210987"),
                CreationDate = new DateTime(2024, 1, 15, 10, 30, 0, DateTimeKind.Utc)
            };
            
            Console.WriteLine(revision);
            // Output: "Revision 3 (12345678-1234-5678-9012-123456789012) - Created: 2024-01-15 10:30:00 UTC"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Revision.CanBeDeleted">
            <summary>
            Determines whether this revision can be safely deleted based on business rules.
            </summary>
            <returns>true if the revision can be deleted; otherwise, false.</returns>
            <remarks>
            This method checks various business rules to determine if soft deletion is allowed.
            It considers factors such as active references, audit trail requirements, and
            system integrity constraints.
            
            <para><strong>Deletion Rules:</strong></para>
            <list type="bullet">
            <item>Cannot delete if already deleted</item>
            <item>Cannot delete if there are active references (checked via validation helper)</item>
            <item>Must preserve audit trail integrity</item>
            </list>
            </remarks>
            <example>
            <code>
            if (revision.CanBeDeleted())
            {
                revision.IsDeleted = true;
                // Log deletion activity...
            }
            else
            {
                throw new InvalidOperationException("Revision cannot be deleted due to active references");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Revision.CanBeRestored">
            <summary>
            Determines whether this revision can be restored from deleted state.
            </summary>
            <returns>true if the revision can be restored; otherwise, false.</returns>
            <remarks>
            This method checks if a deleted revision can be restored to active state,
            considering business rules and data integrity requirements.
            </remarks>
            <example>
            <code>
            if (revision.CanBeRestored())
            {
                revision.IsDeleted = false;
                // Log restoration activity...
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.Revision.GetNextRevisionNumber">
            <summary>
            Gets the next logical revision number for the same document.
            </summary>
            <returns>The next revision number in sequence.</returns>
            <remarks>
            This method provides the next sequential revision number, useful for
            creating new revisions of the same document.
            </remarks>
            <example>
            <code>
            var nextRevisionNumber = currentRevision.GetNextRevisionNumber();
            var newRevision = new Revision
            {
                RevisionNumber = nextRevisionNumber,
                DocumentId = currentRevision.DocumentId,
                CreationDate = DateTime.UtcNow,
                ModificationDate = DateTime.UtcNow
            };
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Entities.User">
            <summary>
            Represents a user in the ADMS legal document management system.
            </summary>
            <remarks>
            The User entity serves as the central identity for all user-related operations within the ADMS system.
            Users are associated with various activities across documents, matters, and revisions to maintain 
            comprehensive audit trails and ensure proper attribution of all actions within the legal document 
            management workflow.
            
            <para><strong>Key Characteristics:</strong></para>
            <list type="bullet">
            <item><strong>Identity Management:</strong> Each user has a unique GUID identifier and display name</item>
            <item><strong>Professional Names:</strong> Supports full professional names with proper formatting</item>
            <item><strong>Activity Tracking:</strong> Central point for all user-related audit trail associations</item>
            <item><strong>Legal Compliance:</strong> Maintains user attribution for legal document management</item>
            </list>
            
            <para><strong>Relationship Overview:</strong></para>
            <list type="bullet">
            <item><strong>Matter Activities:</strong> Tracks user involvement in matter lifecycle events</item>
            <item><strong>Document Activities:</strong> Records user actions on documents (create, modify, delete)</item>
            <item><strong>Revision Activities:</strong> Maintains user attribution for document version control</item>
            <item><strong>Matter Document Activities:</strong> Tracks directional document transfers between matters</item>
            </list>
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key: GUID with identity generation</item>
            <item>Name constraint: StringLength(50) with required validation</item>
            <item>Relationships: Multiple one-to-many associations for activity tracking</item>
            <item>Seeded data: Initial user "rbrown" for system operations</item>
            </list>
            
            <para><strong>Audit Trail Integration:</strong></para>
            Users are central to the ADMS audit trail system, with relationships to all major activity types
            ensuring comprehensive tracking of who performed what actions when within the legal document
            management system. This supports legal compliance and operational transparency requirements.
            
            <para><strong>Professional Usage:</strong></para>
            The User entity supports professional legal practice requirements including proper name handling,
            professional attribution, and comprehensive activity tracking necessary for legal document
            management and compliance with legal practice standards.
            </remarks>
        </member>
        <member name="P:ADMS.API.Entities.User.Id">
            <summary>
            Gets or sets the unique identifier for the user.
            </summary>
            <remarks>
            This GUID serves as the primary key and is automatically generated when the user is created.
            The ID is used throughout the system to establish relationships and maintain referential integrity
            across all user-related operations and audit trails.
            
            <para><strong>Database Configuration:</strong></para>
            <list type="bullet">
            <item>Primary key with identity generation</item>
            <item>Non-nullable and required for all operations</item>
            <item>Used as foreign key in all user relationship tables</item>
            </list>
            </remarks>
            <example>
            <code>
            var user = new User { Name = "John Doe" };
            // ID will be automatically generated when saved to database
            // Example: "12345678-1234-5678-9012-123456789012"
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.User.Name">
            <summary>
            Gets or sets the user's display name.
            </summary>
            <remarks>
            The user's name serves as the primary display identifier throughout the ADMS system.
            This field supports professional naming conventions and is used for user identification
            in audit trails, activity records, and system displays.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Required field - cannot be null or empty</item>
            <item>Maximum length: 50 characters (database constraint)</item>
            <item>Minimum length: 2 characters (business rule)</item>
            <item>Supports professional names with spaces, periods, hyphens</item>
            <item>Must not conflict with reserved system names</item>
            </list>
            
            <para><strong>Professional Support:</strong></para>
            <list type="bullet">
            <item>Full names: "John Doe", "Dr. Smith", "Mary Johnson-Brown"</item>
            <item>Professional titles: "J. Smith", "M.D. Johnson"</item>
            <item>International names: Supports various naming conventions</item>
            <item>Case preservation: Maintains professional formatting</item>
            </list>
            
            <para><strong>Usage in System:</strong></para>
            The name appears in audit logs, activity records, user interfaces, and reports throughout
            the ADMS system. It should be professional, clearly identifiable, and appropriate for
            legal document management contexts.
            </remarks>
            <example>
            <code>
            // Professional name examples
            user.Name = "John Doe";              // Standard full name
            user.Name = "Dr. Jane Smith";        // With professional title
            user.Name = "M. Johnson-Brown";      // Abbreviated with hyphen
            user.Name = "Robert Brown III";      // With suffix
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.User.MatterActivityUsers">
            <summary>
            Gets or sets the collection of matter activity user associations for this user.
            </summary>
            <remarks>
            This collection maintains the many-to-many relationship between users and matter activities,
            providing a complete audit trail of user involvement in matter lifecycle events.
            
            <para><strong>Activity Types Tracked:</strong></para>
            <list type="bullet">
            <item><strong>CREATED:</strong> User created a new matter</item>
            <item><strong>ARCHIVED:</strong> User archived a matter</item>
            <item><strong>DELETED:</strong> User deleted a matter</item>
            <item><strong>RESTORED:</strong> User restored a deleted matter</item>
            <item><strong>UNARCHIVED:</strong> User unarchived a matter</item>
            <item><strong>VIEWED:</strong> User viewed a matter</item>
            </list>
            
            <para><strong>Audit Trail Significance:</strong></para>
            Each association includes a timestamp (CreatedAt) providing chronological tracking of
            user activities on matters, essential for legal compliance and operational oversight.
            
            <para><strong>Entity Framework Configuration:</strong></para>
            Configured in AdmsContext with composite primary key including MatterId, MatterActivityId,
            UserId, and CreatedAt to ensure unique activity records while allowing multiple activities
            of the same type over time.
            </remarks>
            <example>
            <code>
            // Accessing user's matter activities
            foreach (var activity in user.MatterActivityUsers)
            {
                Console.WriteLine($"User performed {activity.MatterActivity?.Activity} on matter {activity.Matter?.Description} at {activity.CreatedAt}");
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.User.DocumentActivityUsers">
            <summary>
            Gets or sets the collection of document activity user associations for this user.
            </summary>
            <remarks>
            This collection tracks all document-related activities performed by the user, maintaining
            a comprehensive audit trail of document operations essential for legal document management.
            
            <para><strong>Activity Types Tracked:</strong></para>
            <list type="bullet">
            <item><strong>CREATED:</strong> User created a new document</item>
            <item><strong>SAVED:</strong> User saved changes to a document</item>
            <item><strong>DELETED:</strong> User deleted a document</item>
            <item><strong>RESTORED:</strong> User restored a deleted document</item>
            <item><strong>CHECKED IN:</strong> User checked in a document</item>
            <item><strong>CHECKED OUT:</strong> User checked out a document</item>
            </list>
            
            <para><strong>Legal Compliance:</strong></para>
            Document activities are critical for legal compliance, providing evidence of who
            performed what actions on legal documents and when, supporting audit requirements
            and professional responsibility standards.
            
            <para><strong>Entity Framework Configuration:</strong></para>
            Configured with composite primary key including DocumentId, DocumentActivityId,
            UserId, and CreatedAt, ensuring precise tracking of all document operations.
            </remarks>
            <example>
            <code>
            // Finding user's recent document activities
            var recentDocumentActivities = user.DocumentActivityUsers
                .Where(da => da.CreatedAt >= DateTime.UtcNow.AddDays(-30))
                .OrderByDescending(da => da.CreatedAt);
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.User.RevisionActivityUsers">
            <summary>
            Gets or sets the collection of revision activity user associations for this user.
            </summary>
            <remarks>
            This collection maintains the relationship between users and document revision activities,
            providing detailed version control audit trails essential for legal document management
            and compliance with professional standards.
            
            <para><strong>Activity Types Tracked:</strong></para>
            <list type="bullet">
            <item><strong>CREATED:</strong> User created a new document revision</item>
            <item><strong>SAVED:</strong> User saved changes to a revision</item>
            <item><strong>DELETED:</strong> User deleted a revision</item>
            <item><strong>RESTORED:</strong> User restored a deleted revision</item>
            </list>
            
            <para><strong>Version Control Integration:</strong></para>
            Revision activities provide granular tracking of document version changes, enabling
            comprehensive version control and change management for legal documents where
            maintaining accurate revision histories is critical.
            
            <para><strong>Professional Practice Support:</strong></para>
            The detailed revision tracking supports professional practice requirements for
            maintaining accurate records of document changes, author attribution, and
            chronological development of legal documents.
            </remarks>
            <example>
            <code>
            // Tracking user's revision activities for audit
            var userRevisionWork = user.RevisionActivityUsers
                .GroupBy(ra => ra.Revision?.Document?.FileName)
                .Select(g => new { Document = g.Key, RevisionCount = g.Count() });
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.User.MatterDocumentActivityUsersFrom">
            <summary>
            Gets or sets the collection of "from" matter document activity user associations for this user.
            </summary>
            <remarks>
            This collection tracks instances where this user was the source (initiator) of document
            transfer operations between matters, such as moves or copies. This directional tracking
            is essential for maintaining comprehensive audit trails of document provenance.
            
            <para><strong>Transfer Operations Tracked:</strong></para>
            <list type="bullet">
            <item><strong>MOVED:</strong> User moved document from one matter to another</item>
            <item><strong>COPIED:</strong> User copied document from one matter to another</item>
            </list>
            
            <para><strong>Audit Trail Significance:</strong></para>
            The "from" association identifies the user who initiated the transfer, providing
            accountability and traceability for document movements between matters, which is
            critical for legal document management and compliance.
            
            <para><strong>Directional Relationships:</strong></para>
            Works in conjunction with MatterDocumentActivityUsersTo to provide complete
            bidirectional tracking of document transfers, ensuring full audit trail coverage
            of document movement operations.
            
            <para><strong>Entity Framework Configuration:</strong></para>
            Configured with NoAction cascade delete to prevent cascading deletions that could
            compromise audit trail integrity. Uses composite primary key for precise tracking.
            </remarks>
            <example>
            <code>
            // Finding documents this user has moved or copied from matters
            var documentsMovedByUser = user.MatterDocumentActivityUsersFrom
                .Where(mdau => mdau.MatterDocumentActivity?.Activity == "MOVED")
                .Select(mdau => new { 
                    Document = mdau.Document?.FileName, 
                    FromMatter = mdau.Matter?.Description,
                    When = mdau.CreatedAt 
                });
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.User.MatterDocumentActivityUsersTo">
            <summary>
            Gets or sets the collection of "to" matter document activity user associations for this user.
            </summary>
            <remarks>
            This collection tracks instances where this user was the recipient (destination) of document
            transfer operations between matters. This complements the "from" tracking to provide
            complete bidirectional audit trails for document transfers.
            
            <para><strong>Transfer Operations Tracked:</strong></para>
            <list type="bullet">
            <item><strong>MOVED:</strong> User received document moved from another matter</item>
            <item><strong>COPIED:</strong> User received document copied from another matter</item>
            </list>
            
            <para><strong>Bidirectional Tracking:</strong></para>
            While MatterDocumentActivityUsersFrom tracks who initiated transfers, this collection
            tracks who received them, providing complete visibility into document transfer chains
            and supporting comprehensive audit requirements.
            
            <para><strong>Legal Compliance:</strong></para>
            The bidirectional tracking ensures complete accountability for document transfers,
            supporting legal practice requirements for maintaining accurate records of document
            custody and access chains.
            
            <para><strong>Entity Framework Configuration:</strong></para>
            Mirrors the "from" configuration with NoAction cascade delete and composite primary key
            to maintain audit trail integrity while providing precise transfer tracking.
            </remarks>
            <example>
            <code>
            // Finding documents received by this user from other matters
            var documentsReceivedByUser = user.MatterDocumentActivityUsersTo
                .Where(mdau => mdau.MatterDocumentActivity?.Activity == "COPIED")
                .Select(mdau => new { 
                    Document = mdau.Document?.FileName, 
                    ToMatter = mdau.Matter?.Description,
                    When = mdau.CreatedAt 
                });
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.User.TotalActivityCount">
            <summary>
            Gets the total count of activities performed by this user across all activity types.
            </summary>
            <remarks>
            This computed property provides a quick overview of user activity levels within the system,
            useful for activity monitoring, user engagement tracking, and system usage analytics.
            
            <para><strong>Activity Types Included:</strong></para>
            <list type="bullet">
            <item>Matter activities (create, archive, delete, etc.)</item>
            <item>Document activities (create, save, check in/out, etc.)</item>
            <item>Revision activities (create, save, delete, restore)</item>
            <item>Matter document transfer activities (move, copy)</item>
            </list>
            
            <para><strong>Performance Note:</strong></para>
            This property triggers database queries to count related entities. Consider using
            explicit loading or projections when working with multiple users to avoid N+1 queries.
            </remarks>
            <example>
            <code>
            Console.WriteLine($"User {user.Name} has performed {user.TotalActivityCount} activities");
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.User.HasActivities">
            <summary>
            Gets a value indicating whether this user has any recorded activities.
            </summary>
            <remarks>
            This property is useful for determining if a user can be safely removed from the system
            or if doing so would compromise audit trail integrity. Users with activities should
            typically be deactivated rather than deleted to preserve audit trails.
            
            <para><strong>Audit Trail Preservation:</strong></para>
            Users with activities represent important audit trail data that should be preserved
            for legal compliance and operational transparency requirements.
            </remarks>
            <example>
            <code>
            if (user.HasActivities)
            {
                // Deactivate user rather than delete to preserve audit trail
                user.IsActive = false;
            }
            else
            {
                // Safe to delete - no audit trail impact
                context.Users.Remove(user);
            }
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Entities.User.NormalizedName">
            <summary>
            Gets the normalized version of the user's name for comparison and search operations.
            </summary>
            <remarks>
            This property provides a normalized version of the user name suitable for case-insensitive
            comparisons, search operations, and uniqueness validation. The normalization follows
            the patterns established in UserValidationHelper.
            
            <para><strong>Normalization Rules:</strong></para>
            <list type="bullet">
            <item>Trims leading and trailing whitespace</item>
            <item>Collapses multiple consecutive spaces to single spaces</item>
            <item>Preserves case for professional appearance</item>
            <item>Returns null for invalid or empty names</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item>User search and filtering operations</item>
            <item>Uniqueness validation during user creation</item>
            <item>Name comparison operations</item>
            <item>Data cleanup and migration operations</item>
            </list>
            </remarks>
            <example>
            <code>
            var user1 = new User { Name = "  John   Doe  " };
            var user2 = new User { Name = "John Doe" };
            
            // Both will have the same normalized name: "John Doe"
            bool areEquivalent = user1.NormalizedName == user2.NormalizedName; // true
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Entities.User.Equals(ADMS.API.Entities.User)">
            <summary>
            Determines whether the specified User is equal to the current User.
            </summary>
            <param name="other">The User to compare with the current User.</param>
            <returns>true if the specified User is equal to the current User; otherwise, false.</returns>
            <remarks>
            Equality is determined by comparing the Id property, as each user has a unique identifier.
            This follows Entity Framework best practices for entity equality comparison.
            </remarks>
        </member>
        <member name="M:ADMS.API.Entities.User.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current User.
            </summary>
            <param name="obj">The object to compare with the current User.</param>
            <returns>true if the specified object is equal to the current User; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.User.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current User.</returns>
            <remarks>
            The hash code is based on the Id property to ensure consistent hashing behavior
            that aligns with the equality implementation.
            </remarks>
        </member>
        <member name="M:ADMS.API.Entities.User.op_Equality(ADMS.API.Entities.User,ADMS.API.Entities.User)">
            <summary>
            Determines whether two User instances are equal.
            </summary>
            <param name="left">The first User to compare.</param>
            <param name="right">The second User to compare.</param>
            <returns>true if the Users are equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.User.op_Inequality(ADMS.API.Entities.User,ADMS.API.Entities.User)">
            <summary>
            Determines whether two User instances are not equal.
            </summary>
            <param name="left">The first User to compare.</param>
            <param name="right">The second User to compare.</param>
            <returns>true if the Users are not equal; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Entities.User.ToString">
            <summary>
            Returns a string representation of the User.
            </summary>
            <returns>A string that represents the current User.</returns>
            <remarks>
            The string representation includes both the user's name and ID for identification
            purposes, which is useful for debugging and logging operations.
            </remarks>
            <example>
            <code>
            var user = new User { Id = Guid.Parse("12345678-1234-5678-9012-123456789012"), Name = "John Doe" };
            Console.WriteLine(user); // Output: "John Doe (12345678-1234-5678-9012-123456789012)"
            </code>
            </example>
        </member>
    </members>
</doc>
