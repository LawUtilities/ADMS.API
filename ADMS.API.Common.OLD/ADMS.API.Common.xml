<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ADMS.API.Common</name>
    </assembly>
    <members>
        <member name="T:ADMS.API.Common.DocumentActivityValidationHelper">
            <summary>
            Provides comprehensive helper methods and constants for validating document activity types within the ADMS system.
            </summary>
            <remarks>
            This static helper class provides robust document activity validation functionality for the ADMS legal document 
            management system, supporting DocumentActivityDto and DocumentActivityMinimalDto validation. The validation methods 
            ensure data integrity, business rule compliance, and consistent validation logic across the application.
            
            <para><strong>Key Features:</strong></para>
            <list type="bullet">
            <item>Activity name validation against predefined allowed activities from database seed data</item>
            <item>GUID validation for activity IDs with proper empty value checking</item>
            <item>Length validation consistent with database constraints (StringLength(50))</item>
            <item>Case-insensitive validation with normalization support</item>
            <item>High-performance validation using frozen collections for O(1) lookup performance</item>
            <item>Thread-safe operations optimized for concurrent access scenarios</item>
            <item>Integration with standard .NET validation infrastructure</item>
            </list>
            
            <para><strong>Document Activity Categories:</strong></para>
            <list type="bullet">
            <item><strong>Lifecycle Operations:</strong> CREATED, DELETED, RESTORED, SAVED</item>
            <item><strong>Check-in/Check-out Operations:</strong> CHECKED IN, CHECKED OUT</item>
            </list>
            
            <para><strong>Validation Process:</strong></para>
            <list type="number">
            <item>Validates activity name format and length constraints</item>
            <item>Normalizes activity names to uppercase with trimming</item>
            <item>Validates against approved activity list from database seed data</item>
            <item>Performs GUID validation for activity identifiers</item>
            <item>Returns detailed validation results for comprehensive error reporting</item>
            </list>
            
            The helper follows established ADMS validation patterns and integrates seamlessly with
            the existing validation infrastructure, including centralized validation services and
            standardized error reporting mechanisms.
            
            <para><strong>Database Integration:</strong></para>
            The allowed activities list is synchronized with the DocumentActivity seed data in AdmsContext.cs,
            ensuring consistency between validation logic and database constraints.
            
            <para><strong>Thread Safety:</strong></para>
            All methods in this class are thread-safe and use immutable frozen collections for optimal
            performance in concurrent scenarios without external synchronization.
            
            <para><strong>Performance Considerations:</strong></para>
            Uses FrozenSet for O(1) average lookup performance and minimal memory allocation.
            All validation operations are optimized for high-frequency usage in API scenarios.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.DocumentActivityValidationHelper.MaxActivityLength">
            <summary>
            The maximum allowed length for a document activity name.
            </summary>
            <remarks>
            This value matches the StringLength(50) constraint on the DocumentActivity.Activity property 
            in the ADMS.API.Entities.DocumentActivity entity to ensure consistency between validation 
            logic and database constraints.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.DocumentActivityValidationHelper.MinActivityLength">
            <summary>
            The minimum allowed length for a document activity name.
            </summary>
            <remarks>
            Minimum length ensures activity names are meaningful and not just single characters
            or empty strings after trimming.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.DocumentActivityValidationHelper._allowedActivitiesArray">
            <summary>
            The list of allowed document activity names synchronized with database seed data.
            All values are uppercase and unique, corresponding to the DocumentActivity seed data in AdmsContext.cs.
            </summary>
            <remarks>
            These activity types represent the standard document operations in the ADMS legal document 
            management system. Activities describe actions taken on documents throughout their lifecycle.
            
            <para><strong>Activity Categories:</strong></para>
            <list type="bullet">
            <item><strong>Lifecycle Operations:</strong> CREATED, DELETED, RESTORED, SAVED</item>
            <item><strong>Version Control Operations:</strong> CHECKED IN, CHECKED OUT</item>
            </list>
            
            <para><strong>Database Synchronization:</strong></para>
            This list must be kept in sync with the DocumentActivity seed data in 
            DbContexts/AdmsContext.SeedDocumentActivities() method to ensure validation consistency.
            
            <para><strong>Modification Guidelines:</strong></para>
            When adding new activities:
            <list type="number">
            <item>Add the activity to the database seed data first</item>
            <item>Update this list to match the seed data</item>
            <item>Ensure activity names are uppercase and descriptive</item>
            <item>Follow existing naming conventions for consistency</item>
            <item>Update documentation and tests accordingly</item>
            </list>
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.DocumentActivityValidationHelper._allowedActivitiesSet">
            <summary>
            High-performance frozen set of allowed activities for O(1) lookup performance.
            </summary>
            <remarks>
            Uses FrozenSet for optimal read performance in validation scenarios.
            Thread-safe and immutable for concurrent access without locking.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.DocumentActivityValidationHelper.AllowedActivities">
            <summary>
            Gets the read-only list of allowed document activity names.
            All values are uppercase and unique.
            </summary>
            <remarks>
            Returns a read-only view of the allowed activities for external consumption.
            This property provides thread-safe access to the activities list.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.DocumentActivityValidationHelper.ReservedActivityNames">
            <summary>
            The list of reserved activity names that should not be used for standard document operations.
            These names are reserved for system operations and error conditions.
            </summary>
            <remarks>
            Reserved names prevent conflicts with system-generated activities and ensure
            clear separation between user-initiated activities and system operations.
            
            <para><strong>Reserved Categories:</strong></para>
            <list type="bullet">
            <item><strong>System Operations:</strong> SYSTEM, ADMIN, AUTO, BATCH</item>
            <item><strong>Data Operations:</strong> MIGRATION, IMPORT, EXPORT</item>
            <item><strong>Error Conditions:</strong> CORRUPT, ERROR, FAILED</item>
            <item><strong>Cleanup Operations:</strong> PURGE, DELETE (system-level)</item>
            </list>
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.DocumentActivityValidationHelper.IsActivityAllowed(System.String)">
            <summary>
            Determines whether the specified activity is allowed.
            The comparison is case-insensitive and ignores leading/trailing whitespace.
            </summary>
            <param name="activity">The activity name to validate. Can be null or whitespace.</param>
            <returns>
            <c>true</c> if the activity is non-empty and exists in <see cref="P:ADMS.API.Common.DocumentActivityValidationHelper.AllowedActivities"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates that activity names conform to the predefined list of allowed activities,
            ensuring consistency across the ADMS system and preventing invalid activity types that could
            compromise business logic or reporting.
            
            <para><strong>Performance:</strong></para>
            Uses FrozenSet for O(1) average lookup performance, optimized for high-frequency validation.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Null or whitespace strings return false</item>
            <item>Leading/trailing whitespace is ignored</item>
            <item>Case-insensitive comparison</item>
            <item>Must match exactly one of the predefined allowed activities</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid1 = DocumentActivityValidationHelper.IsActivityAllowed("CREATED");        // true
            bool isValid2 = DocumentActivityValidationHelper.IsActivityAllowed("created");        // true (case insensitive)
            bool isValid3 = DocumentActivityValidationHelper.IsActivityAllowed(" SAVED ");        // true (ignores whitespace)
            bool isInvalid1 = DocumentActivityValidationHelper.IsActivityAllowed("INVALID");      // false
            bool isInvalid2 = DocumentActivityValidationHelper.IsActivityAllowed("");             // false
            bool isInvalid3 = DocumentActivityValidationHelper.IsActivityAllowed(null);           // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.DocumentActivityValidationHelper.IsValidActivityId(System.Guid)">
            <summary>
            Determines whether the specified activity ID is valid.
            A valid activity ID is a non-empty GUID.
            </summary>
            <param name="activityId">The activity ID to validate.</param>
            <returns>
            <c>true</c> if the activity ID is not empty; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method follows the same pattern as other entity validation helpers in the ADMS system,
            ensuring consistency across validation logic.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>GUID must not be Guid.Empty</item>
            <item>GUID must represent a valid identifier structure</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid = DocumentActivityValidationHelper.IsValidActivityId(Guid.NewGuid());  // true
            bool isInvalid = DocumentActivityValidationHelper.IsValidActivityId(Guid.Empty);    // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.DocumentActivityValidationHelper.IsValidActivityLength(System.String)">
            <summary>
            Determines whether the specified activity name has valid length.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <returns>
            <c>true</c> if the activity length is within valid bounds; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates activity name length against the database constraints to prevent
            data truncation or invalid data storage.
            
            <para><strong>Length Constraints:</strong></para>
            <list type="bullet">
            <item>Minimum length: {MinActivityLength} characters (after trimming)</item>
            <item>Maximum length: {MaxActivityLength} characters (matches database constraint)</item>
            <item>Null or whitespace strings return false</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid = DocumentActivityValidationHelper.IsValidActivityLength("CREATED");     // true
            bool isTooShort = DocumentActivityValidationHelper.IsValidActivityLength("A");        // false (too short)
            bool isTooLong = DocumentActivityValidationHelper.IsValidActivityLength(new string('A', 51)); // false (too long)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.DocumentActivityValidationHelper.IsReservedActivity(System.String)">
            <summary>
            Determines whether the specified activity name is reserved for system use.
            </summary>
            <param name="activity">The activity name to check. Can be null.</param>
            <returns>
            <c>true</c> if the activity name is reserved; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Reserved activity names should not be used for standard user-initiated document operations
            as they are reserved for system operations and error conditions.
            </remarks>
            <example>
            <code>
            bool isReserved1 = DocumentActivityValidationHelper.IsReservedActivity("SYSTEM");     // true
            bool isReserved2 = DocumentActivityValidationHelper.IsReservedActivity("ERROR");      // true
            bool isNotReserved = DocumentActivityValidationHelper.IsReservedActivity("CREATED");  // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.DocumentActivityValidationHelper.NormalizeActivity(System.String)">
            <summary>
            Returns the normalized (uppercase, trimmed) version of an activity name.
            </summary>
            <param name="activity">The activity name to normalize. Can be null.</param>
            <returns>
            The normalized activity name, or <c>null</c> if input is null or consists only of whitespace.
            </returns>
            <remarks>
            Normalization ensures consistent activity name format across the system for storage,
            comparison, and display purposes.
            
            <para><strong>Normalization Rules:</strong></para>
            <list type="bullet">
            <item>Trims leading and trailing whitespace</item>
            <item>Converts to uppercase using invariant culture</item>
            <item>Returns null for null or whitespace-only input</item>
            </list>
            </remarks>
            <example>
            <code>
            string? normalized1 = DocumentActivityValidationHelper.NormalizeActivity("  created  ");  // "CREATED"
            string? normalized2 = DocumentActivityValidationHelper.NormalizeActivity("Saved");         // "SAVED"
            string? normalized3 = DocumentActivityValidationHelper.NormalizeActivity("");              // null
            string? normalized4 = DocumentActivityValidationHelper.NormalizeActivity(null);            // null
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Common.DocumentActivityValidationHelper.AllowedActivitiesList">
            <summary>
            Gets the list of allowed activities as a formatted, comma-separated string.
            </summary>
            <returns>
            A string containing all allowed activities separated by commas and spaces.
            </returns>
            <remarks>
            This property is useful for error messages and documentation where a human-readable
            list of allowed activities is needed.
            </remarks>
            <example>
            Returns: "CHECKED IN, CHECKED OUT, CREATED, DELETED, RESTORED, SAVED"
            </example>
        </member>
        <member name="P:ADMS.API.Common.DocumentActivityValidationHelper.ReservedActivitiesList">
            <summary>
            Gets the list of reserved activities as a formatted, comma-separated string.
            </summary>
            <returns>
            A string containing all reserved activities separated by commas and spaces.
            </returns>
            <remarks>
            This property is useful for error messages and documentation where a human-readable
            list of reserved activities is needed.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.DocumentActivityValidationHelper.ValidateActivity(System.String,System.String)">
            <summary>
            Performs comprehensive validation of a document activity name including all validation rules.
            </summary>
            <param name="activity">The activity name to validate comprehensively. Can be null.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method performs all validation checks in a single call:
            <list type="bullet">
            <item>Null/whitespace validation</item>
            <item>Length validation (min/max bounds)</item>
            <item>Allowed activity validation</item>
            <item>Reserved name validation</item>
            </list>
            
            <para><strong>Validation Order:</strong></para>
            Validations are performed in order of severity, with early termination for null values.
            Reserved name validation is performed as a warning, not an error.
            </remarks>
            <example>
            <code>
            var results = DocumentActivityValidationHelper.ValidateActivity("INVALID_ACTIVITY", nameof(MyDto.Activity));
            if (results.Any())
            {
                foreach (var result in results)
                {
                    Console.WriteLine($"Error: {result.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.DocumentActivityValidationHelper.ValidateActivityId(System.Guid,System.String)">
            <summary>
            Performs comprehensive validation of a document activity ID.
            </summary>
            <param name="activityId">The activity ID to validate.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method validates that the activity ID represents a valid, non-empty GUID suitable
            for use as a database identifier.
            </remarks>
            <example>
            <code>
            var results = DocumentActivityValidationHelper.ValidateActivityId(Guid.Empty, nameof(MyDto.ActivityId));
            if (results.Any())
            {
                Console.WriteLine($"Activity ID validation failed: {string.Join(", ", results.Select(r => r.ErrorMessage))}");
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Common.Extensions.InterfaceExtensions">
            <summary>
            Extension methods for working with ADMS marker interfaces.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.Extensions.InterfaceExtensions.WhereActive``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters a collection to only include active entities.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.Extensions.InterfaceExtensions.WithAuditTrails``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters a collection to only include entities with audit trails.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.Extensions.InterfaceExtensions.WithDocuments``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets all documents from containers that meet specified criteria.
            </summary>
        </member>
        <member name="T:ADMS.API.Common.Interfaces.IAdmsEntity">
            <summary>
            Marker interface for core ADMS entity DTOs providing unified entity identification and behavior.
            </summary>
            <remarks>
            This interface serves as the base marker for all primary entity DTOs in the ADMS system,
            providing consistent identification patterns and enabling polymorphic operations across
            different entity types.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IAdmsEntity.Id">
            <summary>
            Gets the unique identifier for the entity.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IAdmsEntity.DisplayText">
            <summary>
            Gets the display text suitable for UI presentation.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IAdmsEntity.IsValid">
            <summary>
            Gets a value indicating whether this entity is in a valid state for operations.
            </summary>
        </member>
        <member name="T:ADMS.API.Common.Interfaces.IArchivable">
            <summary>
            Marker interface for entities that support archival operations for inactive state management.
            </summary>
            <remarks>
            Archival functionality supports matter lifecycle management by moving completed
            or inactive entities to an archived state while preserving accessibility.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IArchivable.IsArchived">
            <summary>
            Gets a value indicating whether the entity is archived.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IArchivable.IsActive">
            <summary>
            Gets a value indicating whether the entity is currently active.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.Interfaces.IArchivable.CanBeArchived">
            <summary>
            Determines whether the entity can be archived.
            </summary>
        </member>
        <member name="T:ADMS.API.Common.Interfaces.IAuditable">
            <summary>
            Marker interface for entities that maintain comprehensive audit trails for legal compliance.
            </summary>
            <remarks>
            Audit trail functionality is essential for legal document management systems,
            providing accountability, compliance tracking, and professional responsibility support.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IAuditable.HasActivities">
            <summary>
            Gets a value indicating whether the entity has recorded activities.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IAuditable.TotalActivityCount">
            <summary>
            Gets the total count of all activities associated with the entity.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IAuditable.HasActivityHistory">
            <summary>
            Gets a value indicating whether the entity has a comprehensive audit trail.
            </summary>
        </member>
        <member name="T:ADMS.API.Common.Interfaces.IDocumentContainer">
            <summary>
            Marker interface for entities that contain and manage document collections.
            </summary>
            <remarks>
            Document container functionality provides consistent document management capabilities
            across different entity types that organize and manage document collections.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IDocumentContainer.HasDocuments">
            <summary>
            Gets a value indicating whether the container has any documents.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IDocumentContainer.DocumentCount">
            <summary>
            Gets the total number of documents in the container.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IDocumentContainer.ActiveDocumentCount">
            <summary>
            Gets the number of active (non-deleted) documents in the container.
            </summary>
        </member>
        <member name="T:ADMS.API.Common.Interfaces.IDocumentWithCreationDate">
            <summary>
            Interface for documents that include creation date information.
            </summary>
            <remarks>
            This interface provides a contract for document types that include creation date tracking,
            enabling consistent temporal operations across different document representations in the
            ADMS legal document management system.
            
            <para><strong>Implementation Guidelines:</strong></para>
            <list type="bullet">
            <item><strong>UTC Storage:</strong> All creation dates should be stored in UTC format</item>
            <item><strong>Immutability:</strong> Creation dates should be set once and not modified</item>
            <item><strong>Validation:</strong> Implementations should validate creation dates using common validation helpers</item>
            <item><strong>Audit Trail:</strong> Creation dates form the foundation of audit trail temporal tracking</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item><strong>Temporal Queries:</strong> Finding recent documents within specific time ranges</item>
            <item><strong>Audit Operations:</strong> Chronological analysis of document creation patterns</item>
            <item><strong>Reporting:</strong> Document creation statistics and timeline analysis</item>
            <item><strong>Filtering:</strong> Date-based document filtering in collections and queries</item>
            </list>
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IDocumentWithCreationDate.CreationDate">
            <summary>
            Gets the creation date of the document (in UTC).
            </summary>
            <remarks>
            The creation date represents when the document was initially created in the system,
            stored in UTC format for consistency across different time zones and supporting
            accurate temporal tracking for legal compliance and audit requirements.
            </remarks>
        </member>
        <member name="T:ADMS.API.Common.Interfaces.IDocumentWithModificationDate">
            <summary>
            Interface for documents that include modification date information.
            </summary>
            <remarks>
            This interface provides a contract for document types that include modification date tracking,
            enabling consistent temporal operations across different document representations in the
            ADMS legal document management system.
            
            <para><strong>Implementation Guidelines:</strong></para>
            <list type="bullet">
            <item><strong>UTC Storage:</strong> All modification dates should be stored in UTC format</item>
            <item><strong>Update Tracking:</strong> Modification dates should be updated whenever document content changes</item>
            <item><strong>Validation:</strong> Implementations should validate modification dates using common validation helpers</item>
            <item><strong>Audit Trail:</strong> Modification dates support audit trail temporal tracking and document lifecycle management</item>
            </list>
            
            <para><strong>Usage Scenarios:</strong></para>
            <list type="bullet">
            <item><strong>Change Tracking:</strong> Identifying recently modified documents within specific time ranges</item>
            <item><strong>Audit Operations:</strong> Chronological analysis of document modification patterns</item>
            <item><strong>Reporting:</strong> Document modification statistics and timeline analysis</item>
            <item><strong>Filtering:</strong> Date-based document filtering for recent changes and updates</item>
            </list>
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IDocumentWithModificationDate.ModificationDate">
            <summary>
            Gets the modification date of the document (in UTC).
            </summary>
            <remarks>
            The modification date represents when the document was last modified in the system,
            stored in UTC format for consistency across different time zones and supporting
            accurate temporal tracking for legal compliance and audit requirements.
            </remarks>
        </member>
        <member name="T:ADMS.API.Common.Interfaces.IFileSystemEntity">
            <summary>
            Marker interface for entities that represent file system resources with metadata.
            </summary>
            <remarks>
            File system integration provides consistent file metadata handling and validation
            for entities that represent physical or logical file system resources.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IFileSystemEntity.FileName">
            <summary>
            Gets the file name without extension.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IFileSystemEntity.Extension">
            <summary>
            Gets the file extension including the dot.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IFileSystemEntity.FullFileName">
            <summary>
            Gets the complete file name including extension.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IFileSystemEntity.FileSize">
            <summary>
            Gets the file size in bytes.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IFileSystemEntity.FormattedFileSize">
            <summary>
            Gets the formatted file size for display.
            </summary>
        </member>
        <member name="T:ADMS.API.Common.Interfaces.IProfessionalEntity">
            <summary>
            Marker interface for entities that support professional legal practice standards.
            </summary>
            <remarks>
            Professional entity functionality ensures compliance with legal practice standards,
            professional responsibility requirements, and business process integration.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IProfessionalEntity.Status">
            <summary>
            Gets the professional status of the entity.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.Interfaces.IProfessionalEntity.GetComprehensiveStatistics">
            <summary>
            Gets professional metrics for reporting and analysis.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.Interfaces.IProfessionalEntity.GetAuditInformation">
            <summary>
            Gets audit information suitable for professional compliance reporting.
            </summary>
        </member>
        <member name="T:ADMS.API.Common.Interfaces.ISecureEntity">
            <summary>
            Marker interface for entities that include security validation and integrity verification.
            </summary>
            <remarks>
            Security functionality provides cryptographic integrity verification and security
            compliance features essential for legal document management systems.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.ISecureEntity.Checksum">
            <summary>
            Gets the cryptographic checksum for integrity verification.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.ISecureEntity.HasValidChecksum">
            <summary>
            Gets a value indicating whether the entity has a valid checksum.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.ISecureEntity.MimeType">
            <summary>
            Gets the MIME type for content identification.
            </summary>
        </member>
        <member name="T:ADMS.API.Common.Interfaces.ISoftDeletable">
            <summary>
            Marker interface for entities that support soft deletion with audit trail preservation.
            </summary>
            <remarks>
            Soft deletion preserves audit trails and referential integrity while marking entities
            as deleted for business operations and user interface filtering.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.ISoftDeletable.IsDeleted">
            <summary>
            Gets a value indicating whether the entity is soft-deleted.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.Interfaces.ISoftDeletable.CanBeDeleted">
            <summary>
            Determines whether the entity can be safely deleted.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.Interfaces.ISoftDeletable.CanBeRestored">
            <summary>
            Determines whether the entity can be restored from deleted state.
            </summary>
        </member>
        <member name="T:ADMS.API.Common.Interfaces.IValidatedDto">
            <summary>
            Marker interface for DTOs that implement standardized ADMS validation patterns.
            </summary>
            <remarks>
            This interface identifies DTOs that follow the standardized BaseValidationDto pattern,
            enabling validation framework operations and ensuring consistent validation behavior.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IValidatedDto.IsValid">
            <summary>
            Gets a value indicating whether the DTO has valid data for operations.
            </summary>
        </member>
        <member name="T:ADMS.API.Common.Interfaces.IVersionControlled">
            <summary>
            Marker interface for entities that support version control with check-in/check-out operations.
            </summary>
            <remarks>
            Version control functionality supports professional document management practices
            by providing exclusive editing control and revision tracking capabilities.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IVersionControlled.IsCheckedOut">
            <summary>
            Gets a value indicating whether the entity is currently checked out for editing.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.Interfaces.IVersionControlled.IsAvailableForEdit">
            <summary>
            Gets a value indicating whether the entity is available for editing.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.Interfaces.IVersionControlled.CanBeCheckedOut">
            <summary>
            Determines whether the entity can be checked out for editing.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.Interfaces.IVersionControlled.CanBeCheckedIn">
            <summary>
            Determines whether the entity can be checked in from its current state.
            </summary>
        </member>
        <member name="T:ADMS.API.Common.MatterActivityValidationHelper">
            <summary>
            Provides comprehensive helper methods and constants for validating matter activity-related data within the ADMS system.
            </summary>
            <remarks>
            This static helper class provides robust matter activity validation functionality for the ADMS legal 
            document management system, supporting MatterActivityDto and MatterActivityMinimalDto validation. 
            The validation methods ensure data integrity, business rule compliance, and consistent validation logic across the application.
            
            <para><strong>Key Features:</strong></para>
            <list type="bullet">
            <item>Activity name validation against predefined allowed activities from database seed data</item>
            <item>GUID validation for activity IDs with proper empty value checking</item>
            <item>Length validation consistent with database constraints (StringLength(50))</item>
            <item>Format validation for activity names with pattern matching</item>
            <item>Business rule validation for matter operations and state transitions</item>
            <item>User association validation requirements for audit trail integrity</item>
            <item>High-performance validation using frozen collections for O(1) lookup performance</item>
            <item>Thread-safe operations optimized for concurrent access scenarios</item>
            </list>
            
            <para><strong>Matter Activity Categories:</strong></para>
            <list type="bullet">
            <item><strong>Lifecycle Operations:</strong> CREATED, DELETED, RESTORED</item>
            <item><strong>Archive Operations:</strong> ARCHIVED, UNARCHIVED</item>
            <item><strong>Access Operations:</strong> VIEWED</item>
            </list>
            
            <para><strong>Database Synchronization:</strong></para>
            The allowed activities list is synchronized with the MatterActivity seed data in AdmsContext.cs,
            ensuring consistency between validation logic and database constraints.
            
            <para><strong>Thread Safety:</strong></para>
            All methods in this class are thread-safe and use immutable frozen collections for optimal
            performance in concurrent scenarios without external synchronization.
            
            <para><strong>Performance Considerations:</strong></para>
            Uses FrozenSet for O(1) average lookup performance and minimal memory allocation.
            All validation operations are optimized for high-frequency usage in API scenarios.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterActivityValidationHelper.MaxActivityLength">
            <summary>
            The maximum allowed length for a matter activity name.
            </summary>
            <remarks>
            This value matches the StringLength(50) constraint on the MatterActivity.Activity property 
            in the ADMS.API.Entities.MatterActivity entity to ensure consistency between validation 
            logic and database constraints.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterActivityValidationHelper.MinActivityLength">
            <summary>
            The minimum allowed length for a matter activity name.
            </summary>
            <remarks>
            Minimum length ensures activity names are meaningful and not just single characters
            or empty strings after trimming. This prevents issues with data integrity and user experience.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterActivityValidationHelper.MaxActivitySuggestions">
            <summary>
            Maximum number of activity suggestions to generate for user assistance.
            </summary>
            <remarks>
            Limits the number of suggestions to prevent excessive processing while
            providing sufficient alternatives for user selection.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterActivityValidationHelper._allowedActivitiesArray">
            <summary>
            The list of allowed matter activity names synchronized with database seed data.
            All values are uppercase and unique, corresponding to the MatterActivity seed data in AdmsContext.cs.
            </summary>
            <remarks>
            These activity types represent the standard matter lifecycle events and operations
            in the ADMS legal document management system. Activities describe actions taken
            on matters throughout their lifecycle.
            
            <para><strong>Activity Categories:</strong></para>
            <list type="bullet">
            <item><strong>Lifecycle Operations:</strong> CREATED, DELETED, RESTORED</item>
            <item><strong>Archive Operations:</strong> ARCHIVED, UNARCHIVED</item>
            <item><strong>Access Operations:</strong> VIEWED</item>
            </list>
            
            <para><strong>Database Synchronization:</strong></para>
            This list must be kept in sync with the MatterActivity seed data in 
            DbContexts/AdmsContext.SeedMatterActivities() method to ensure validation consistency.
            
            <para><strong>Modification Guidelines:</strong></para>
            When adding new activities:
            <list type="number">
            <item>Add the activity to the database seed data first</item>
            <item>Update this list to match the seed data</item>
            <item>Ensure activity names are uppercase and descriptive</item>
            <item>Follow existing naming conventions for consistency</item>
            <item>Update documentation and tests accordingly</item>
            </list>
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterActivityValidationHelper._reservedActivityNamesArray">
            <summary>
            The list of reserved activity names that cannot be used for standard matter operations.
            These names are reserved for system operations and error conditions.
            </summary>
            <remarks>
            Reserved names prevent conflicts with system-generated activities and ensure
            clear separation between user-initiated activities and system operations.
            
            <para><strong>Reserved Categories:</strong></para>
            <list type="bullet">
            <item><strong>System Operations:</strong> SYSTEM, ADMIN, AUTO, BATCH</item>
            <item><strong>Data Operations:</strong> MIGRATION, IMPORT, EXPORT</item>
            <item><strong>Error Conditions:</strong> CORRUPT, ERROR, FAILED</item>
            <item><strong>Cleanup Operations:</strong> PURGE, DELETE (system-level)</item>
            </list>
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterActivityValidationHelper._allowedActivitiesSet">
            <summary>
            High-performance frozen set of allowed activities for O(1) lookup performance.
            </summary>
            <remarks>
            Uses FrozenSet for optimal read performance in validation scenarios.
            Thread-safe and immutable for concurrent access without locking.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterActivityValidationHelper._reservedActivityNamesSet">
            <summary>
            High-performance frozen set of reserved activity names for O(1) lookup performance.
            </summary>
            <remarks>
            Uses FrozenSet for optimal read performance in validation scenarios.
            Case-insensitive comparison for cross-platform compatibility.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.MatterActivityValidationHelper.AllowedActivities">
            <summary>
            Gets the read-only list of allowed matter activity names.
            All values are uppercase and unique.
            </summary>
            <remarks>
            Returns an immutable view of the allowed activities for external consumption.
            This property provides thread-safe access to the activities list.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.MatterActivityValidationHelper.ReservedActivityNames">
            <summary>
            Gets the read-only list of reserved activity names.
            These names cannot be used for custom activities.
            </summary>
            <remarks>
            Returns an immutable view of the reserved activity names for external consumption.
            This property provides thread-safe access to the reserved names list.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.IsActivityAllowed(System.String)">
            <summary>
            Determines whether the specified activity is allowed.
            The comparison is case-insensitive and ignores leading/trailing whitespace.
            </summary>
            <param name="activity">The activity name to validate. Can be null or whitespace.</param>
            <returns>
            <c>true</c> if the activity is non-empty and exists in <see cref="P:ADMS.API.Common.MatterActivityValidationHelper.AllowedActivities"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates that activity names conform to the predefined list of allowed activities,
            ensuring consistency across the ADMS system and preventing invalid activity types that could
            compromise business logic or reporting.
            
            <para><strong>Performance:</strong></para>
            Uses FrozenSet for O(1) average lookup performance, optimized for high-frequency validation.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Null or whitespace strings return false</item>
            <item>Leading/trailing whitespace is ignored</item>
            <item>Case-insensitive comparison</item>
            <item>Must match exactly one of the predefined allowed activities</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid1 = MatterActivityValidationHelper.IsActivityAllowed("CREATED");        // true
            bool isValid2 = MatterActivityValidationHelper.IsActivityAllowed("created");        // true (case insensitive)
            bool isValid3 = MatterActivityValidationHelper.IsActivityAllowed(" VIEWED ");       // true (ignores whitespace)
            bool isInvalid1 = MatterActivityValidationHelper.IsActivityAllowed("INVALID");      // false
            bool isInvalid2 = MatterActivityValidationHelper.IsActivityAllowed("");             // false
            bool isInvalid3 = MatterActivityValidationHelper.IsActivityAllowed(null);           // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.IsValidActivityId(System.Guid)">
            <summary>
            Determines whether the specified activity ID is valid.
            A valid activity ID is a non-empty GUID.
            </summary>
            <param name="activityId">The activity ID to validate.</param>
            <returns>
            <c>true</c> if the activity ID is not empty; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method follows the same pattern as other entity validation helpers in the ADMS system,
            ensuring consistency across validation logic.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>GUID must not be Guid.Empty</item>
            <item>GUID must represent a valid identifier structure</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid = MatterActivityValidationHelper.IsValidActivityId(Guid.NewGuid());  // true
            bool isInvalid = MatterActivityValidationHelper.IsValidActivityId(Guid.Empty);    // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.IsValidActivityLength(System.String)">
            <summary>
            Determines whether the specified activity name has valid length.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <returns>
            <c>true</c> if the activity length is within valid bounds; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates activity name length against the database constraints to prevent
            data truncation or invalid data storage.
            
            <para><strong>Length Constraints:</strong></para>
            <list type="bullet">
            <item>Minimum length: {MinActivityLength} characters (after trimming)</item>
            <item>Maximum length: {MaxActivityLength} characters (matches database constraint)</item>
            <item>Null or whitespace strings return false</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid = MatterActivityValidationHelper.IsValidActivityLength("CREATED");         // true
            bool isTooShort = MatterActivityValidationHelper.IsValidActivityLength("A");            // false
            bool isTooLong = MatterActivityValidationHelper.IsValidActivityLength(new string('A', 51)); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.IsValidActivityFormat(System.String)">
            <summary>
            Determines whether the specified activity name contains only valid characters.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <returns>
            <c>true</c> if the activity contains only valid characters; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Valid activity names should contain only letters, numbers, and underscores,
            following standard naming conventions for activity types in legal matter management.
            
            <para><strong>Format Rules:</strong></para>
            <list type="bullet">
            <item>Must contain at least one letter</item>
            <item>Can only contain letters, numbers, and underscores</item>
            <item>No spaces or special characters allowed</item>
            <item>Case-insensitive validation</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid1 = MatterActivityValidationHelper.IsValidActivityFormat("CREATED");      // true
            bool isValid2 = MatterActivityValidationHelper.IsValidActivityFormat("STEP_1");       // true
            bool isInvalid1 = MatterActivityValidationHelper.IsValidActivityFormat("CREATED!");   // false
            bool isInvalid2 = MatterActivityValidationHelper.IsValidActivityFormat("CREATED 1");  // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.IsReservedActivity(System.String)">
            <summary>
            Determines whether the specified activity name is reserved for system use.
            </summary>
            <param name="activity">The activity name to check. Can be null.</param>
            <returns>
            <c>true</c> if the activity name is reserved; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Reserved activity names should not be used for standard user-initiated matter operations
            as they are reserved for system operations and error conditions.
            </remarks>
            <example>
            <code>
            bool isReserved1 = MatterActivityValidationHelper.IsReservedActivity("SYSTEM");    // true
            bool isReserved2 = MatterActivityValidationHelper.IsReservedActivity("ERROR");     // true
            bool isNotReserved = MatterActivityValidationHelper.IsReservedActivity("CREATED"); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.HasRequiredUserAssociations(System.Int32,System.Boolean)">
            <summary>
            Validates that a matter activity has the required user associations.
            </summary>
            <param name="userCount">Number of user associations.</param>
            <param name="allowEmptyUsers">Whether to allow activities without users (for system activities).</param>
            <returns>
            <c>true</c> if the user association requirements are met; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method enforces the business rule that most matter activities must have
            at least one user association to maintain audit trail integrity and ensure
            activities are properly attributed.
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Standard activities require at least one user association</item>
            <item>System activities may be allowed without user associations</item>
            <item>User count cannot be negative</item>
            </list>
            </remarks>
            <example>
            <code>
            bool valid1 = MatterActivityValidationHelper.HasRequiredUserAssociations(1, false);  // true
            bool valid2 = MatterActivityValidationHelper.HasRequiredUserAssociations(0, true);   // true (system activity)
            bool invalid = MatterActivityValidationHelper.HasRequiredUserAssociations(0, false); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.IsActivityAppropriateForMatterStatus(System.String,System.Boolean,System.Boolean)">
            <summary>
            Validates that an activity is appropriate for the given matter context.
            </summary>
            <param name="activity">The activity to validate. Can be null.</param>
            <param name="isArchived">Whether the matter is currently archived.</param>
            <param name="isDeleted">Whether the matter is currently deleted.</param>
            <returns>
            <c>true</c> if the activity is appropriate for the matter status; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates that certain activities are only used in appropriate matter contexts.
            For example, archiving activities should not be used on already archived matters.
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Cannot archive an already archived matter</item>
            <item>Cannot unarchive a non-archived matter</item>
            <item>Cannot delete an already deleted matter</item>
            <item>Deleted matters can only be restored or permanently purged</item>
            <item>Most operations are not allowed on deleted matters</item>
            </list>
            </remarks>
            <example>
            <code>
            bool valid1 = MatterActivityValidationHelper.IsActivityAppropriateForMatterStatus("VIEWED", false, false);     // true
            bool valid2 = MatterActivityValidationHelper.IsActivityAppropriateForMatterStatus("RESTORED", false, true);    // true
            bool invalid = MatterActivityValidationHelper.IsActivityAppropriateForMatterStatus("ARCHIVED", true, false);   // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.IsValidActivityDuplication(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Validates that duplicate activities are not being created inappropriately.
            </summary>
            <param name="activity">The activity to validate. Can be null.</param>
            <param name="existingActivities">Collection of existing activity names.</param>
            <param name="allowDuplicates">Whether to allow duplicate activities.</param>
            <returns>
            <c>true</c> if the activity duplication is valid; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="existingActivities"/> is null.</exception>
            <remarks>
            Some activities may be allowed to occur multiple times (e.g., VIEWED),
            while others should typically only happen once per matter (e.g., CREATED, DELETED).
            
            <para><strong>Activity Duplication Rules:</strong></para>
            <list type="bullet">
            <item><strong>Single Occurrence:</strong> CREATED, DELETED</item>
            <item><strong>Multiple Allowed:</strong> VIEWED, ARCHIVED, UNARCHIVED, RESTORED</item>
            <item>Custom rules can be applied via the allowDuplicates parameter</item>
            </list>
            </remarks>
            <example>
            <code>
            var existing = new[] { "CREATED", "VIEWED" };
            bool valid1 = MatterActivityValidationHelper.IsValidActivityDuplication("VIEWED", existing, true);    // true
            bool invalid = MatterActivityValidationHelper.IsValidActivityDuplication("CREATED", existing, false); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.IsValidActivity(System.String)">
            <summary>
            Performs comprehensive validation of an activity name including all validation rules.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <returns>
            <c>true</c> if the activity passes all validation rules; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method combines all individual validation rules into a single comprehensive check,
            providing a complete validation result for activity names.
            
            <para><strong>Validation Checks Performed:</strong></para>
            <list type="bullet">
            <item>Null/empty validation</item>
            <item>Length constraints validation</item>
            <item>Character format validation</item>
            <item>Reserved name validation</item>
            <item>Allowed activity list validation</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid = MatterActivityValidationHelper.IsValidActivity("CREATED");      // true
            bool isInvalid1 = MatterActivityValidationHelper.IsValidActivity("INVALID");   // false
            bool isInvalid2 = MatterActivityValidationHelper.IsValidActivity("");          // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.ValidateActivity(System.String,System.String)">
            <summary>
            Performs comprehensive validation of an activity name and returns detailed validation results.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method performs all validation checks in a single call:
            <list type="bullet">
            <item>Null/whitespace validation</item>
            <item>Length validation (min/max bounds)</item>
            <item>Format validation (character patterns)</item>
            <item>Reserved name validation</item>
            <item>Allowed activity validation</item>
            </list>
            
            <para><strong>Validation Order:</strong></para>
            Validations are performed in order of severity, with early termination for null values.
            Reserved name validation is performed as an error, not a warning.
            </remarks>
            <example>
            <code>
            var results = MatterActivityValidationHelper.ValidateActivity("INVALID_ACTIVITY", nameof(MyDto.Activity));
            if (results.Any())
            {
                foreach (var result in results)
                {
                    Console.WriteLine($"Error: {result.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.ValidateActivityId(System.Guid,System.String)">
            <summary>
            Performs comprehensive validation of an activity ID.
            </summary>
            <param name="activityId">The activity ID to validate.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method validates that the activity ID represents a valid, non-empty GUID suitable
            for use as a database identifier.
            </remarks>
            <example>
            <code>
            var results = MatterActivityValidationHelper.ValidateActivityId(Guid.Empty, nameof(MyDto.ActivityId));
            if (results.Any())
            {
                Console.WriteLine($"Activity ID validation failed: {string.Join(", ", results.Select(r => r.ErrorMessage))}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.NormalizeActivity(System.String)">
            <summary>
            Normalizes an activity name for consistent storage and comparison.
            </summary>
            <param name="activity">The activity name to normalize. Can be null.</param>
            <returns>
            The normalized activity name, or null if the input is invalid.
            </returns>
            <remarks>
            Normalization includes trimming whitespace and converting to uppercase
            for consistent storage and comparison operations.
            
            <para><strong>Normalization Rules:</strong></para>
            <list type="bullet">
            <item>Trims leading and trailing whitespace</item>
            <item>Converts to uppercase using invariant culture</item>
            <item>Returns null for null or whitespace-only input</item>
            </list>
            </remarks>
            <example>
            <code>
            string? normalized1 = MatterActivityValidationHelper.NormalizeActivity("  created  "); // "CREATED"
            string? normalized2 = MatterActivityValidationHelper.NormalizeActivity("Viewed");       // "VIEWED"
            string? normalized3 = MatterActivityValidationHelper.NormalizeActivity("");             // null
            string? normalized4 = MatterActivityValidationHelper.NormalizeActivity(null);           // null
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.AreActivitiesEquivalent(System.String,System.String)">
            <summary>
            Checks if two activity names are equivalent after normalization.
            </summary>
            <param name="activity1">The first activity name. Can be null.</param>
            <param name="activity2">The second activity name. Can be null.</param>
            <returns>
            <c>true</c> if the activity names are equivalent; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method is useful for comparing activity names in a case-insensitive manner
            while handling whitespace differences.
            </remarks>
            <example>
            <code>
            bool same1 = MatterActivityValidationHelper.AreActivitiesEquivalent("CREATED", "created");       // true
            bool same2 = MatterActivityValidationHelper.AreActivitiesEquivalent("  CREATED  ", "CREATED");   // true
            bool different = MatterActivityValidationHelper.AreActivitiesEquivalent("CREATED", "DELETED");   // false
            bool bothNull = MatterActivityValidationHelper.AreActivitiesEquivalent(null, null);              // false
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Common.MatterActivityValidationHelper.AllowedActivitiesList">
            <summary>
            Gets the list of allowed activities as a formatted, comma-separated string.
            </summary>
            <returns>
            A string containing all allowed activities separated by commas and spaces.
            </returns>
            <remarks>
            This property is useful for error messages and documentation where a human-readable
            list of allowed activities is needed.
            </remarks>
            <example>
            Returns: "ARCHIVED, CREATED, DELETED, RESTORED, UNARCHIVED, VIEWED"
            </example>
        </member>
        <member name="P:ADMS.API.Common.MatterActivityValidationHelper.ReservedActivitiesList">
            <summary>
            Gets the list of reserved activities as a formatted, comma-separated string.
            </summary>
            <returns>
            A string containing all reserved activities separated by commas and spaces.
            </returns>
            <remarks>
            This property is useful for error messages and documentation where a human-readable
            list of reserved activities is needed.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.SuggestAlternativeActivities(System.String,System.String,System.Int32)">
            <summary>
            Suggests alternative activity names if the provided activity is not allowed.
            </summary>
            <param name="attemptedActivity">The attempted activity name. Can be null.</param>
            <param name="categoryHint">Optional category hint for better suggestions (lifecycle, archive, access).</param>
            <param name="maxSuggestions">Maximum number of suggestions to return.</param>
            <returns>
            A read-only list of suggested alternative activity names.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="maxSuggestions"/> is less than 1.</exception>
            <remarks>
            This method provides helpful suggestions when an activity name validation fails,
            improving user experience by offering valid alternatives based on the context.
            
            <para><strong>Suggestion Strategies:</strong></para>
            <list type="bullet">
            <item>Find activities containing similar text</item>
            <item>Provide category-specific suggestions</item>
            <item>Offer most common activities as fallback</item>
            <item>Prioritize exact matches and partial matches</item>
            </list>
            </remarks>
            <example>
            <code>
            var suggestions = MatterActivityValidationHelper.SuggestAlternativeActivities("CREATE", "lifecycle", 3);
            // Returns lifecycle-related activities like "CREATED", "DELETED", "RESTORED"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.GetActivitiesByCategory(System.String)">
            <summary>
            Gets activities by category for contextual suggestions.
            </summary>
            <param name="category">The category (lifecycle, archive, access). Can be null.</param>
            <returns>A collection of activities for the specified category.</returns>
            <remarks>
            This method categorizes activities by their purpose to provide
            contextually relevant suggestions.
            
            <para><strong>Available Categories:</strong></para>
            <list type="bullet">
            <item><strong>lifecycle:</strong> CREATED, DELETED, RESTORED</item>
            <item><strong>archive:</strong> ARCHIVED, UNARCHIVED</item>
            <item><strong>access:</strong> VIEWED</item>
            </list>
            </remarks>
            <example>
            <code>
            var lifecycleActivities = MatterActivityValidationHelper.GetActivitiesByCategory("lifecycle");
            // Returns: ["CREATED", "DELETED", "RESTORED"]
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.GetValidationStatistics">
            <summary>
            Gets statistical information about activity validation rules.
            </summary>
            <returns>
            A dictionary containing statistical information about the validation system.
            </returns>
            <remarks>
            This method provides insights into the validation system configuration,
            useful for monitoring and diagnostics.
            </remarks>
            <example>
            <code>
            var stats = MatterActivityValidationHelper.GetValidationStatistics();
            Console.WriteLine($"Total allowed activities: {stats["TotalAllowedActivities"]}");
            Console.WriteLine($"Total reserved activities: {stats["TotalReservedActivities"]}");
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.GenerateValidationReport(System.String)">
            <summary>
            Generates a comprehensive validation report for an activity name.
            </summary>
            <param name="activity">The activity name to analyze. Can be null.</param>
            <returns>
            A formatted string containing detailed validation information.
            </returns>
            <remarks>
            This method provides a human-readable validation report useful for debugging
            and troubleshooting activity validation issues.
            
            <para><strong>Report Contents:</strong></para>
            <list type="bullet">
            <item>Detailed validation results for each rule</item>
            <item>Normalized activity name</item>
            <item>Overall validation result</item>
            <item>Suggestions for invalid activities</item>
            <item>Available activity categories</item>
            <item>Reserved activity names</item>
            </list>
            </remarks>
            <example>
            <code>
            string report = MatterActivityValidationHelper.GenerateValidationReport("INVALID_ACTIVITY");
            Console.WriteLine(report);
            // Outputs detailed validation results and suggestions
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterActivityValidationHelper.GetDetailedValidationResults(System.String)">
            <summary>
            Validates an activity name and returns detailed validation results.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <returns>
            A dictionary containing detailed validation results for each validation rule.
            </returns>
            <remarks>
            This method provides detailed diagnostic information about activity validation,
            useful for troubleshooting validation failures and providing specific error messages.
            
            <para><strong>Validation Rules Checked:</strong></para>
            <list type="bullet">
            <item>IsNotNullOrEmpty: Activity is not null, empty, or whitespace</item>
            <item>HasValidLength: Activity length is within bounds</item>
            <item>HasValidFormat: Activity contains valid characters</item>
            <item>IsNotReserved: Activity is not in reserved names list</item>
            <item>IsInAllowedList: Activity is in the allowed activities list</item>
            <item>PassesAllRules: Overall validation result</item>
            </list>
            </remarks>
            <example>
            <code>
            var results = MatterActivityValidationHelper.GetDetailedValidationResults("CREATED");
            foreach (var result in results)
            {
                Console.WriteLine($"{result.Key}: {result.Value}");
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Common.MatterDocumentActivityValidationHelper">
            <summary>
            Provides comprehensive helper methods and constants for validating matter document activity-related data within the ADMS system.
            </summary>
            <remarks>
            This static helper class provides robust matter document activity validation functionality for the ADMS legal 
            document management system, supporting MatterDocumentActivityDto and MatterDocumentActivityMinimalDto validation. 
            The validation methods ensure data integrity, business rule compliance, and consistent validation logic across the application.
            
            <para><strong>Key Features:</strong></para>
            <list type="bullet">
            <item>Activity name validation against predefined allowed activities from database seed data</item>
            <item>GUID validation for activity IDs with proper empty value checking</item>
            <item>Length validation consistent with database constraints (StringLength(50))</item>
            <item>Business rule validation for matter-document operations and directional transfers</item>
            <item>User association validation requirements for audit trail integrity</item>
            <item>High-performance validation using frozen collections for O(1) lookup performance</item>
            <item>Thread-safe operations optimized for concurrent access scenarios</item>
            </list>
            
            <para><strong>Matter Document Activity Categories:</strong></para>
            <list type="bullet">
            <item><strong>Transfer Operations:</strong> COPIED, MOVED</item>
            </list>
            
            <para><strong>Database Synchronization:</strong></para>
            The allowed activities list is synchronized with the MatterDocumentActivity seed data in AdmsContext.cs,
            ensuring consistency between validation logic and database constraints. These activities represent operations
            that transfer or copy documents between matters in the legal document management system.
            
            <para><strong>Business Context:</strong></para>
            Matter document activities specifically handle the movement and copying of legal documents between different
            matters within the ADMS system. These operations require careful audit trails with both "from" and "to"
            user associations to track document provenance and maintain legal compliance.
            
            <para><strong>Thread Safety:</strong></para>
            All methods in this class are thread-safe and use immutable frozen collections for optimal
            performance in concurrent scenarios without external synchronization.
            
            <para><strong>Performance Considerations:</strong></para>
            Uses FrozenSet for O(1) average lookup performance and minimal memory allocation.
            All validation operations are optimized for high-frequency usage in API scenarios.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterDocumentActivityValidationHelper.MaxActivityLength">
            <summary>
            The maximum allowed length for a matter document activity name.
            </summary>
            <remarks>
            This value matches the StringLength(50) constraint on the MatterDocumentActivity.Activity property 
            in the ADMS.API.Entities.MatterDocumentActivity entity to ensure consistency between validation 
            logic and database constraints.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterDocumentActivityValidationHelper.MinActivityLength">
            <summary>
            The minimum allowed length for a matter document activity name.
            </summary>
            <remarks>
            Minimum length ensures activity names are meaningful and not just single characters
            or empty strings after trimming. This prevents issues with data integrity and user experience.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterDocumentActivityValidationHelper.MaxActivitySuggestions">
            <summary>
            Maximum number of activity suggestions to generate for user assistance.
            </summary>
            <remarks>
            Limits the number of suggestions to prevent excessive processing while
            providing sufficient alternatives for user selection.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterDocumentActivityValidationHelper._allowedActivitiesArray">
            <summary>
            The list of allowed matter document activity names synchronized with database seed data.
            All values are uppercase and unique, corresponding to the MatterDocumentActivity seed data in AdmsContext.cs.
            </summary>
            <remarks>
            These activity types represent the standard document transfer operations between matters
            in the ADMS legal document management system. Activities describe how documents
            are moved or copied between different matters while maintaining audit trails.
            
            <para><strong>Activity Categories:</strong></para>
            <list type="bullet">
            <item><strong>Transfer Operations:</strong> COPIED, MOVED</item>
            </list>
            
            <para><strong>Database Synchronization:</strong></para>
            This list must be kept in sync with the MatterDocumentActivity seed data in 
            DbContexts/AdmsContext.SeedMatterDocumentActivities() method to ensure validation consistency.
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item><strong>COPIED:</strong> Creates a duplicate of the document in the target matter while retaining the original</item>
            <item><strong>MOVED:</strong> Transfers the document from the source matter to the target matter</item>
            </list>
            
            <para><strong>Modification Guidelines:</strong></para>
            When adding new activities:
            <list type="number">
            <item>Add the activity to the database seed data first</item>
            <item>Update this list to match the seed data</item>
            <item>Ensure activity names are uppercase and descriptive</item>
            <item>Follow existing naming conventions for consistency</item>
            <item>Update documentation and tests accordingly</item>
            <item>Consider business implications for audit trails and legal compliance</item>
            </list>
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterDocumentActivityValidationHelper._reservedActivityNamesArray">
            <summary>
            The list of reserved activity names that cannot be used for standard matter document operations.
            These names are reserved for system operations and error conditions.
            </summary>
            <remarks>
            Reserved names prevent conflicts with system-generated activities and ensure
            clear separation between user-initiated activities and system operations.
            
            <para><strong>Reserved Categories:</strong></para>
            <list type="bullet">
            <item><strong>System Operations:</strong> SYSTEM, ADMIN, AUTO, BATCH</item>
            <item><strong>Data Operations:</strong> MIGRATION, IMPORT, EXPORT</item>
            <item><strong>Error Conditions:</strong> CORRUPT, ERROR, FAILED</item>
            <item><strong>Cleanup Operations:</strong> PURGE, DELETE (system-level)</item>
            </list>
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterDocumentActivityValidationHelper._allowedActivitiesSet">
            <summary>
            High-performance frozen set of allowed activities for O(1) lookup performance.
            </summary>
            <remarks>
            Uses FrozenSet for optimal read performance in validation scenarios.
            Thread-safe and immutable for concurrent access without locking.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterDocumentActivityValidationHelper._reservedActivityNamesSet">
            <summary>
            High-performance frozen set of reserved activity names for O(1) lookup performance.
            </summary>
            <remarks>
            Uses FrozenSet for optimal read performance in validation scenarios.
            Case-insensitive comparison for cross-platform compatibility.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.MatterDocumentActivityValidationHelper.AllowedActivities">
            <summary>
            Gets the read-only list of allowed matter document activity names.
            All values are uppercase and unique.
            </summary>
            <remarks>
            Returns an immutable view of the allowed activities for external consumption.
            This property provides thread-safe access to the activities list.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.MatterDocumentActivityValidationHelper.ReservedActivityNames">
            <summary>
            Gets the read-only list of reserved activity names.
            These names cannot be used for custom activities.
            </summary>
            <remarks>
            Returns an immutable view of the reserved activity names for external consumption.
            This property provides thread-safe access to the reserved names list.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.IsActivityAllowed(System.String)">
            <summary>
            Determines whether the specified activity is allowed.
            The comparison is case-insensitive and ignores leading/trailing whitespace.
            </summary>
            <param name="activity">The activity name to validate. Can be null or whitespace.</param>
            <returns>
            <c>true</c> if the activity is non-empty and exists in <see cref="P:ADMS.API.Common.MatterDocumentActivityValidationHelper.AllowedActivities"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates that activity names conform to the predefined list of allowed activities,
            ensuring consistency across the ADMS system and preventing invalid activity types that could
            compromise business logic or reporting.
            
            <para><strong>Performance:</strong></para>
            Uses FrozenSet for O(1) average lookup performance, optimized for high-frequency validation.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Null or whitespace strings return false</item>
            <item>Leading/trailing whitespace is ignored</item>
            <item>Case-insensitive comparison</item>
            <item>Must match exactly one of the predefined allowed activities</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid1 = MatterDocumentActivityValidationHelper.IsActivityAllowed("MOVED");        // true
            bool isValid2 = MatterDocumentActivityValidationHelper.IsActivityAllowed("moved");        // true (case insensitive)
            bool isValid3 = MatterDocumentActivityValidationHelper.IsActivityAllowed(" COPIED ");     // true (ignores whitespace)
            bool isInvalid1 = MatterDocumentActivityValidationHelper.IsActivityAllowed("INVALID");    // false
            bool isInvalid2 = MatterDocumentActivityValidationHelper.IsActivityAllowed("");           // false
            bool isInvalid3 = MatterDocumentActivityValidationHelper.IsActivityAllowed(null);         // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.IsValidActivityId(System.Guid)">
            <summary>
            Determines whether the specified activity ID is valid.
            A valid activity ID is a non-empty GUID.
            </summary>
            <param name="activityId">The activity ID to validate.</param>
            <returns>
            <c>true</c> if the activity ID is not empty; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method follows the same pattern as other entity validation helpers in the ADMS system,
            ensuring consistency across validation logic.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>GUID must not be Guid.Empty</item>
            <item>GUID must represent a valid identifier structure</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid = MatterDocumentActivityValidationHelper.IsValidActivityId(Guid.NewGuid());  // true
            bool isInvalid = MatterDocumentActivityValidationHelper.IsValidActivityId(Guid.Empty);    // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.IsValidActivityLength(System.String)">
            <summary>
            Determines whether the specified activity name has valid length.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <returns>
            <c>true</c> if the activity length is within valid bounds; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates activity name length against the database constraints to prevent
            data truncation or invalid data storage.
            
            <para><strong>Length Constraints:</strong></para>
            <list type="bullet">
            <item>Minimum length: {MinActivityLength} characters (after trimming)</item>
            <item>Maximum length: {MaxActivityLength} characters (matches database constraint)</item>
            <item>Null or whitespace strings return false</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid = MatterDocumentActivityValidationHelper.IsValidActivityLength("MOVED");         // true
            bool isTooShort = MatterDocumentActivityValidationHelper.IsValidActivityLength("A");          // false
            bool isTooLong = MatterDocumentActivityValidationHelper.IsValidActivityLength(new string('A', 51)); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.IsValidActivityFormat(System.String)">
            <summary>
            Determines whether the specified activity name contains only valid characters.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <returns>
            <c>true</c> if the activity contains only valid characters; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Valid activity names should contain only letters, numbers, and underscores,
            following standard naming conventions for activity types in legal document management.
            
            <para><strong>Format Rules:</strong></para>
            <list type="bullet">
            <item>Must contain at least one letter</item>
            <item>Can only contain letters, numbers, and underscores</item>
            <item>No spaces or special characters allowed</item>
            <item>Case-insensitive validation</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid1 = MatterDocumentActivityValidationHelper.IsValidActivityFormat("MOVED");        // true
            bool isValid2 = MatterDocumentActivityValidationHelper.IsValidActivityFormat("STEP_1");       // true
            bool isInvalid1 = MatterDocumentActivityValidationHelper.IsValidActivityFormat("MOVED!");     // false
            bool isInvalid2 = MatterDocumentActivityValidationHelper.IsValidActivityFormat("MOVED 1");    // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.IsReservedActivity(System.String)">
            <summary>
            Determines whether the specified activity name is reserved for system use.
            </summary>
            <param name="activity">The activity name to check. Can be null.</param>
            <returns>
            <c>true</c> if the activity name is reserved; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Reserved activity names should not be used for standard user-initiated matter document operations
            as they are reserved for system operations and error conditions.
            </remarks>
            <example>
            <code>
            bool isReserved1 = MatterDocumentActivityValidationHelper.IsReservedActivity("SYSTEM");    // true
            bool isReserved2 = MatterDocumentActivityValidationHelper.IsReservedActivity("ERROR");     // true
            bool isNotReserved = MatterDocumentActivityValidationHelper.IsReservedActivity("MOVED");   // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.HasRequiredUserAssociations(System.Int32,System.Int32)">
            <summary>
            Validates that at least one user association (from or to) is present for matter document activities.
            </summary>
            <param name="fromUsersCount">Number of "from" user associations.</param>
            <param name="toUsersCount">Number of "to" user associations.</param>
            <returns>
            <c>true</c> if at least one user association exists; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method enforces the business rule that matter document activities must have
            at least one user association to maintain audit trail integrity and ensure
            activities are properly attributed. Both user counts must be non-negative.
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>At least one user association (from or to) is required</item>
            <item>User counts cannot be negative</item>
            <item>Both zero counts indicate invalid state</item>
            </list>
            </remarks>
            <example>
            <code>
            bool valid1 = MatterDocumentActivityValidationHelper.HasRequiredUserAssociations(1, 0);  // true
            bool valid2 = MatterDocumentActivityValidationHelper.HasRequiredUserAssociations(0, 1);  // true  
            bool valid3 = MatterDocumentActivityValidationHelper.HasRequiredUserAssociations(1, 1);  // true
            bool invalid1 = MatterDocumentActivityValidationHelper.HasRequiredUserAssociations(0, 0); // false
            bool invalid2 = MatterDocumentActivityValidationHelper.HasRequiredUserAssociations(-1, 1); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.IsActivityAppropriateForContext(System.String,System.Boolean,System.Boolean)">
            <summary>
            Validates that an activity is appropriate for the given operation context and directional requirements.
            </summary>
            <param name="activity">The activity to validate. Can be null.</param>
            <param name="hasFromUsers">Whether the activity has "from" users.</param>
            <param name="hasToUsers">Whether the activity has "to" users.</param>
            <returns>
            <c>true</c> if the activity is appropriate for the context; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates that certain activities are used in appropriate contexts.
            Matter document activities (MOVED, COPIED) typically require both from and to users
            to properly track the source and destination of document operations.
            
            <para><strong>Business Rules by Activity:</strong></para>
            <list type="bullet">
            <item><strong>MOVED:</strong> Requires both from and to users (source and destination)</item>
            <item><strong>COPIED:</strong> Requires both from and to users (source and destination)</item>
            </list>
            
            <para><strong>Legal Compliance:</strong></para>
            Document transfer operations must maintain complete audit trails showing both
            the source and destination of documents for legal compliance and case management.
            </remarks>
            <example>
            <code>
            bool valid = MatterDocumentActivityValidationHelper.IsActivityAppropriateForContext("MOVED", true, true);    // true
            bool invalid1 = MatterDocumentActivityValidationHelper.IsActivityAppropriateForContext("MOVED", true, false); // false
            bool invalid2 = MatterDocumentActivityValidationHelper.IsActivityAppropriateForContext("COPIED", false, true); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.IsValidActivityDuplication(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Validates that duplicate activities are not being created inappropriately.
            </summary>
            <param name="activity">The activity to validate. Can be null.</param>
            <param name="existingActivities">Collection of existing activity names.</param>
            <param name="allowDuplicates">Whether to allow duplicate activities.</param>
            <returns>
            <c>true</c> if the activity duplication is valid; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="existingActivities"/> is null.</exception>
            <remarks>
            Matter document activities can typically occur multiple times as documents may be 
            moved or copied between matters multiple times during their lifecycle.
            
            <para><strong>Activity Duplication Rules:</strong></para>
            <list type="bullet">
            <item><strong>MOVED:</strong> Multiple moves allowed (documents can be moved between different matters)</item>
            <item><strong>COPIED:</strong> Multiple copies allowed (documents can be copied to multiple matters)</item>
            </list>
            </remarks>
            <example>
            <code>
            var existing = new[] { "MOVED", "COPIED" };
            bool valid1 = MatterDocumentActivityValidationHelper.IsValidActivityDuplication("MOVED", existing, true);    // true
            bool valid2 = MatterDocumentActivityValidationHelper.IsValidActivityDuplication("COPIED", existing, true);   // true
            bool invalid = MatterDocumentActivityValidationHelper.IsValidActivityDuplication("MOVED", existing, false);  // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.IsValidActivity(System.String)">
            <summary>
            Performs comprehensive validation of an activity name including all validation rules.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <returns>
            <c>true</c> if the activity passes all validation rules; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method combines all individual validation rules into a single comprehensive check,
            providing a complete validation result for activity names.
            
            <para><strong>Validation Checks Performed:</strong></para>
            <list type="bullet">
            <item>Null/empty validation</item>
            <item>Length constraints validation</item>
            <item>Character format validation</item>
            <item>Reserved name validation</item>
            <item>Allowed activity list validation</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid = MatterDocumentActivityValidationHelper.IsValidActivity("MOVED");            // true
            bool isInvalid1 = MatterDocumentActivityValidationHelper.IsValidActivity("INVALID");       // false
            bool isInvalid2 = MatterDocumentActivityValidationHelper.IsValidActivity("");              // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.ValidateActivity(System.String,System.String)">
            <summary>
            Performs comprehensive validation of an activity name and returns detailed validation results.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method performs all validation checks in a single call:
            <list type="bullet">
            <item>Null/whitespace validation</item>
            <item>Length validation (min/max bounds)</item>
            <item>Format validation (character patterns)</item>
            <item>Reserved name validation</item>
            <item>Allowed activity validation</item>
            </list>
            
            <para><strong>Validation Order:</strong></para>
            Validations are performed in order of severity, with early termination for null values.
            Reserved name validation is performed as an error, not a warning.
            </remarks>
            <example>
            <code>
            var results = MatterDocumentActivityValidationHelper.ValidateActivity("INVALID_ACTIVITY", nameof(MyDto.Activity));
            if (results.Any())
            {
                foreach (var result in results)
                {
                    Console.WriteLine($"Error: {result.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.ValidateActivityId(System.Guid,System.String)">
            <summary>
            Performs comprehensive validation of an activity ID.
            </summary>
            <param name="activityId">The activity ID to validate.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method validates that the activity ID represents a valid, non-empty GUID suitable
            for use as a database identifier.
            </remarks>
            <example>
            <code>
            var results = MatterDocumentActivityValidationHelper.ValidateActivityId(Guid.Empty, nameof(MyDto.ActivityId));
            if (results.Any())
            {
                Console.WriteLine($"Activity ID validation failed: {string.Join(", ", results.Select(r => r.ErrorMessage))}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.ValidateUserAssociations(System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Validates the directional user associations for matter document activities.
            </summary>
            <param name="fromUsersCount">Number of "from" user associations.</param>
            <param name="toUsersCount">Number of "to" user associations.</param>
            <param name="activity">The activity being validated. Can be null.</param>
            <param name="fromUsersPropertyName">Property name for "from" users (for error messages). Cannot be null or whitespace.</param>
            <param name="toUsersPropertyName">Property name for "to" users (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when property names are null, empty, or consist only of whitespace.</exception>
            <remarks>
            This method validates the business rules specific to matter document activities regarding
            directional user associations required for proper audit trails.
            </remarks>
            <example>
            <code>
            var results = MatterDocumentActivityValidationHelper.ValidateUserAssociations(
                0, 1, "MOVED", nameof(MyDto.FromUsers), nameof(MyDto.ToUsers));
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.NormalizeActivity(System.String)">
            <summary>
            Normalizes an activity name for consistent storage and comparison.
            </summary>
            <param name="activity">The activity name to normalize. Can be null.</param>
            <returns>
            The normalized activity name, or null if the input is invalid.
            </returns>
            <remarks>
            Normalization includes trimming whitespace and converting to uppercase
            for consistent storage and comparison operations.
            
            <para><strong>Normalization Rules:</strong></para>
            <list type="bullet">
            <item>Trims leading and trailing whitespace</item>
            <item>Converts to uppercase using invariant culture</item>
            <item>Returns null for null or whitespace-only input</item>
            </list>
            </remarks>
            <example>
            <code>
            string? normalized1 = MatterDocumentActivityValidationHelper.NormalizeActivity("  moved  "); // "MOVED"
            string? normalized2 = MatterDocumentActivityValidationHelper.NormalizeActivity("Copied");     // "COPIED"
            string? normalized3 = MatterDocumentActivityValidationHelper.NormalizeActivity("");          // null
            string? normalized4 = MatterDocumentActivityValidationHelper.NormalizeActivity(null);        // null
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.AreActivitiesEquivalent(System.String,System.String)">
            <summary>
            Checks if two activity names are equivalent after normalization.
            </summary>
            <param name="activity1">The first activity name. Can be null.</param>
            <param name="activity2">The second activity name. Can be null.</param>
            <returns>
            <c>true</c> if the activity names are equivalent; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method is useful for comparing activity names in a case-insensitive manner
            while handling whitespace differences.
            </remarks>
            <example>
            <code>
            bool same1 = MatterDocumentActivityValidationHelper.AreActivitiesEquivalent("MOVED", "moved");       // true
            bool same2 = MatterDocumentActivityValidationHelper.AreActivitiesEquivalent("  MOVED  ", "MOVED");   // true
            bool different = MatterDocumentActivityValidationHelper.AreActivitiesEquivalent("MOVED", "COPIED");  // false
            bool bothNull = MatterDocumentActivityValidationHelper.AreActivitiesEquivalent(null, null);          // false
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Common.MatterDocumentActivityValidationHelper.AllowedActivitiesList">
            <summary>
            Gets the list of allowed activities as a formatted, comma-separated string.
            </summary>
            <returns>
            A string containing all allowed activities separated by commas and spaces.
            </returns>
            <remarks>
            This property is useful for error messages and documentation where a human-readable
            list of allowed activities is needed.
            </remarks>
            <example>
            Returns: "COPIED, MOVED"
            </example>
        </member>
        <member name="P:ADMS.API.Common.MatterDocumentActivityValidationHelper.ReservedActivitiesList">
            <summary>
            Gets the list of reserved activities as a formatted, comma-separated string.
            </summary>
            <returns>
            A string containing all reserved activities separated by commas and spaces.
            </returns>
            <remarks>
            This property is useful for error messages and documentation where a human-readable
            list of reserved activities is needed.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.SuggestAlternativeActivities(System.String,System.String,System.Int32)">
            <summary>
            Suggests alternative activity names if the provided activity is not allowed.
            </summary>
            <param name="attemptedActivity">The attempted activity name. Can be null.</param>
            <param name="operationType">Optional operation type hint for better suggestions (transfer).</param>
            <param name="maxSuggestions">Maximum number of suggestions to return.</param>
            <returns>
            A read-only list of suggested alternative activity names.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="maxSuggestions"/> is less than 1.</exception>
            <remarks>
            This method provides helpful suggestions when an activity name validation fails,
            improving user experience by offering valid alternatives based on the context.
            
            <para><strong>Suggestion Strategies:</strong></para>
            <list type="bullet">
            <item>Find activities containing similar text</item>
            <item>Provide operation-type specific suggestions</item>
            <item>Offer all available activities for the limited set</item>
            <item>Prioritize exact matches and partial matches</item>
            </list>
            </remarks>
            <example>
            <code>
            var suggestions = MatterDocumentActivityValidationHelper.SuggestAlternativeActivities("MOVE", "transfer", 2);
            // Returns transfer-related activities like "MOVED", "COPIED"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.GetActivitiesByOperationType(System.String)">
            <summary>
            Gets activities by operation type category.
            </summary>
            <param name="operationType">The operation type (transfer). Can be null.</param>
            <returns>A collection of activities for the specified type.</returns>
            <remarks>
            This method categorizes activities by their operational purpose to provide
            contextually relevant suggestions.
            
            <para><strong>Available Operation Types:</strong></para>
            <list type="bullet">
            <item><strong>transfer:</strong> COPIED, MOVED</item>
            </list>
            </remarks>
            <example>
            <code>
            var transferActivities = MatterDocumentActivityValidationHelper.GetActivitiesByOperationType("transfer");
            // Returns: ["COPIED", "MOVED"]
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.GetValidationStatistics">
            <summary>
            Gets statistical information about activity validation rules.
            </summary>
            <returns>
            A dictionary containing statistical information about the validation system.
            </returns>
            <remarks>
            This method provides insights into the validation system configuration,
            useful for monitoring and diagnostics.
            </remarks>
            <example>
            <code>
            var stats = MatterDocumentActivityValidationHelper.GetValidationStatistics();
            Console.WriteLine($"Total allowed activities: {stats["TotalAllowedActivities"]}");
            Console.WriteLine($"Total reserved activities: {stats["TotalReservedActivities"]}");
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.GenerateValidationReport(System.String)">
            <summary>
            Generates a comprehensive validation report for an activity name.
            </summary>
            <param name="activity">The activity name to analyze. Can be null.</param>
            <returns>
            A formatted string containing detailed validation information.
            </returns>
            <remarks>
            This method provides a human-readable validation report useful for debugging
            and troubleshooting activity validation issues.
            
            <para><strong>Report Contents:</strong></para>
            <list type="bullet">
            <item>Detailed validation results for each rule</item>
            <item>Normalized activity name</item>
            <item>Overall validation result</item>
            <item>Suggestions for invalid activities</item>
            <item>Available activity categories</item>
            <item>Reserved activity names</item>
            </list>
            </remarks>
            <example>
            <code>
            string report = MatterDocumentActivityValidationHelper.GenerateValidationReport("INVALID_ACTIVITY");
            Console.WriteLine(report);
            // Outputs detailed validation results and suggestions
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterDocumentActivityValidationHelper.GetDetailedValidationResults(System.String)">
            <summary>
            Validates an activity name and returns detailed validation results.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <returns>
            A dictionary containing detailed validation results for each validation rule.
            </returns>
            <remarks>
            This method provides detailed diagnostic information about activity validation,
            useful for troubleshooting validation failures and providing specific error messages.
            
            <para><strong>Validation Rules Checked:</strong></para>
            <list type="bullet">
            <item>IsNotNullOrEmpty: Activity is not null, empty, or whitespace</item>
            <item>HasValidLength: Activity length is within bounds</item>
            <item>HasValidFormat: Activity contains valid characters</item>
            <item>IsNotReserved: Activity is not in reserved names list</item>
            <item>IsInAllowedList: Activity is in the allowed activities list</item>
            <item>PassesAllRules: Overall validation result</item>
            </list>
            </remarks>
            <example>
            <code>
            var results = MatterDocumentActivityValidationHelper.GetDetailedValidationResults("MOVED");
            foreach (var result in results)
            {
                Console.WriteLine($"{result.Key}: {result.Value}");
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Common.MatterValidationHelper">
            <summary>
            Provides comprehensive helper methods and constants for validating matter-related data within the ADMS system.
            </summary>
            <remarks>
            This static helper class provides robust matter validation functionality for the ADMS legal 
            document management system, supporting all matter-related DTOs including MatterDto, MatterMinimalDto, 
            MatterForCreationDto, and MatterForUpdateDto. The validation methods ensure data integrity, 
            business rule compliance, and consistent validation logic across the application.
            
            <para><strong>Key Features:</strong></para>
            <list type="bullet">
            <item>Matter description validation with database constraint alignment</item>
            <item>GUID validation for matter IDs with proper empty value checking</item>
            <item>Date validation with timezone normalization and future date protection</item>
            <item>Business rule validation for matter lifecycle state transitions</item>
            <item>Uniqueness validation for matter descriptions within contexts</item>
            <item>Reserved word protection to prevent system conflicts</item>
            <item>High-performance validation using frozen collections for O(1) lookup performance</item>
            <item>Thread-safe operations optimized for concurrent access scenarios</item>
            </list>
            
            <para><strong>Matter Lifecycle States:</strong></para>
            <list type="bullet">
            <item><strong>Active:</strong> IsArchived = false, IsDeleted = false</item>
            <item><strong>Archived:</strong> IsArchived = true, IsDeleted = false</item>
            <item><strong>Deleted:</strong> IsArchived = true, IsDeleted = true (must be archived first)</item>
            </list>
            
            <para><strong>Database Synchronization:</strong></para>
            All validation constraints are synchronized with the Matter entity constraints:
            <list type="bullet">
            <item>Description: StringLength(128) - matches Matter.Description constraint</item>
            <item>CreationDate: DateTime with UTC normalization</item>
            <item>Business rules: Archive and delete state validation</item>
            </list>
            
            <para><strong>Legal Compliance:</strong></para>
            Matter validation enforces legal document management best practices including:
            <list type="bullet">
            <item>Audit trail preservation through proper state transitions</item>
            <item>Data integrity through comprehensive validation rules</item>
            <item>Unique identification for proper matter management</item>
            <item>Temporal consistency through date validation</item>
            </list>
            
            <para><strong>Thread Safety:</strong></para>
            All methods in this class are thread-safe and use immutable frozen collections for optimal
            performance in concurrent scenarios without external synchronization.
            
            <para><strong>Performance Considerations:</strong></para>
            Uses FrozenSet for O(1) average lookup performance and minimal memory allocation.
            All validation operations are optimized for high-frequency usage in API scenarios.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterValidationHelper.MaxDescriptionLength">
            <summary>
            The maximum allowed length for a matter description.
            </summary>
            <remarks>
            This value matches the StringLength(128) constraint on the Matter.Description property 
            in the ADMS.API.Entities.Matter entity to ensure consistency between validation 
            logic and database constraints.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterValidationHelper.MinDescriptionLength">
            <summary>
            The minimum allowed length for a matter description.
            </summary>
            <remarks>
            Minimum length ensures matter descriptions are meaningful and not just 
            single characters or empty strings after trimming. This prevents issues 
            with data integrity and user experience.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterValidationHelper.MinAllowedMatterDate">
            <summary>
            The earliest allowed date for matter operations.
            </summary>
            <remarks>
            This date represents a reasonable lower bound for matter creation dates in the ADMS system,
            preventing unrealistic historical dates that might indicate data corruption or system errors.
            Set to January 1, 1980, as a practical minimum for legal document management systems.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.MatterValidationHelper.MaxAllowedMatterDate">
            <summary>
            The maximum allowed date for matter operations (current UTC time plus tolerance).
            </summary>
            <remarks>
            This represents a reasonable upper bound that accounts for system clock differences
            while preventing future dates that could cause issues with business logic.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterValidationHelper.FutureDateToleranceMinutes">
            <summary>
            The tolerance in minutes for future dates.
            </summary>
            <remarks>
            This tolerance accounts for clock skew between client and server systems,
            allowing for small time differences while preventing actual future dates.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterValidationHelper.MaxDescriptionSuggestions">
            <summary>
            Maximum number of description suggestions to generate for user assistance.
            </summary>
            <remarks>
            Limits the number of suggestions to prevent excessive processing while
            providing sufficient alternatives for user selection.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterValidationHelper._reservedDescriptionWordsArray">
            <summary>
            List of reserved words that cannot be used in matter descriptions.
            These terms are reserved to prevent conflicts with system functionality.
            </summary>
            <remarks>
            These terms are reserved to prevent conflicts with system functionality 
            and maintain data integrity. Reserved words are checked case-insensitively
            and can appear anywhere in the description.
            
            <para><strong>Reserved Categories:</strong></para>
            <list type="bullet">
            <item><strong>System Operations:</strong> SYSTEM, ADMIN</item>
            <item><strong>Testing:</strong> TEST, SAMPLE, DEMO</item>
            <item><strong>Data States:</strong> NULL, UNDEFINED, EMPTY</item>
            <item><strong>Operations:</strong> DELETE, REMOVED, PURGED</item>
            </list>
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.MatterValidationHelper._reservedDescriptionWordsSet">
            <summary>
            High-performance frozen set of reserved description words for O(1) lookup performance.
            </summary>
            <remarks>
            Uses FrozenSet for optimal read performance in validation scenarios.
            Case-insensitive comparison for user-friendly validation.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.MatterValidationHelper.ReservedDescriptionWords">
            <summary>
            Gets the read-only list of reserved description words.
            These words cannot be used in matter descriptions.
            </summary>
            <remarks>
            Returns an immutable view of the reserved description words for external consumption.
            This property provides thread-safe access to the reserved words list.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.IsValidDescription(System.String)">
            <summary>
            Determines whether the specified description is valid for a matter.
            A valid description meets length, format, and content requirements.
            </summary>
            <param name="description">The description to validate. Can be null or whitespace.</param>
            <returns>
            <c>true</c> if the description is valid; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates that matter descriptions meet all requirements including:
            <list type="bullet">
            <item>Length constraints (between {MinDescriptionLength} and {MaxDescriptionLength} characters)</item>
            <item>Content requirements (must contain letters, proper start/end characters)</item>
            <item>Format validation (no reserved words, proper character usage)</item>
            <item>Normalization compatibility (can be properly normalized)</item>
            </list>
            
            <para><strong>Performance:</strong></para>
            Uses optimized validation checks with early termination for better performance.
            </remarks>
            <example>
            <code>
            bool isValid1 = MatterValidationHelper.IsValidDescription("Contract Review - Client ABC");    // true
            bool isValid2 = MatterValidationHelper.IsValidDescription("Legal Matter 2024");              // true
            bool isInvalid1 = MatterValidationHelper.IsValidDescription("");                              // false (too short)
            bool isInvalid2 = MatterValidationHelper.IsValidDescription("A");                             // false (too short)
            bool isInvalid3 = MatterValidationHelper.IsValidDescription(new string('A', 129));           // false (too long)
            bool isInvalid4 = MatterValidationHelper.IsValidDescription("SYSTEM Matter");                 // false (reserved word)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.IsValidDate(System.DateTime)">
            <summary>
            Determines whether the specified date is valid for a matter.
            A valid date is within reasonable bounds and not in the future.
            </summary>
            <param name="date">The date to validate.</param>
            <returns>
            <c>true</c> if the date is valid; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method ensures matter dates are realistic and comply with business rules:
            <list type="bullet">
            <item>Must be after the minimum allowed date ({MinAllowedMatterDate:yyyy-MM-dd})</item>
            <item>Cannot be in the future (with {FutureDateToleranceMinutes} minute tolerance)</item>
            <item>Must not be DateTime.MinValue or other sentinel values</item>
            </list>
            
            <para><strong>Timezone Handling:</strong></para>
            The method works with any DateTime kind but normalizes to UTC for comparison.
            </remarks>
            <example>
            <code>
            bool isValid1 = MatterValidationHelper.IsValidDate(DateTime.UtcNow);                    // true
            bool isValid2 = MatterValidationHelper.IsValidDate(new DateTime(2020, 1, 1));          // true
            bool isInvalid1 = MatterValidationHelper.IsValidDate(DateTime.MinValue);                // false (too early)
            bool isInvalid2 = MatterValidationHelper.IsValidDate(DateTime.UtcNow.AddHours(1));      // false (future)
            bool isInvalid3 = MatterValidationHelper.IsValidDate(new DateTime(1975, 1, 1));        // false (too early)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.IsValidMatterId(System.Guid)">
            <summary>
            Determines whether the specified matter ID is valid.
            A valid matter ID is a non-empty GUID.
            </summary>
            <param name="matterId">The matter ID to validate.</param>
            <returns>
            <c>true</c> if the matter ID is not empty; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method follows the same pattern as other entity validation helpers in the ADMS system,
            ensuring consistency across validation logic.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>GUID must not be Guid.Empty</item>
            <item>GUID must represent a valid identifier structure</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid = MatterValidationHelper.IsValidMatterId(Guid.NewGuid());  // true
            bool isInvalid = MatterValidationHelper.IsValidMatterId(Guid.Empty);    // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.IsValidCreationDate(System.DateTime)">
            <summary>
            Determines whether the specified creation date is valid for a matter.
            </summary>
            <param name="creationDate">The creation date to validate.</param>
            <returns>
            <c>true</c> if the creation date is valid; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method provides specialized validation for creation dates, ensuring they meet
            the same standards as general matter dates. It's an alias for IsValidDate for semantic clarity.
            </remarks>
            <example>
            <code>
            bool isValid = MatterValidationHelper.IsValidCreationDate(DateTime.UtcNow);     // true
            bool isInvalid = MatterValidationHelper.IsValidCreationDate(DateTime.MinValue); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.IsValidArchiveState(System.Boolean,System.Boolean)">
            <summary>
            Validates that a matter's archive and delete states are consistent with business rules.
            </summary>
            <param name="isArchived">Whether the matter is archived.</param>
            <param name="isDeleted">Whether the matter is deleted.</param>
            <returns>
            <c>true</c> if the archive state is valid; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method enforces business rules around matter lifecycle states:
            <list type="bullet">
            <item><strong>Active:</strong> isArchived = false, isDeleted = false</item>
            <item><strong>Archived:</strong> isArchived = true, isDeleted = false</item>
            <item><strong>Deleted:</strong> isArchived = true, isDeleted = true (deleted matters must be archived)</item>
            <item><strong>Invalid:</strong> isArchived = false, isDeleted = true (cannot delete without archiving)</item>
            </list>
            
            <para><strong>Legal Compliance:</strong></para>
            The requirement that deleted matters must be archived ensures proper audit trails
            and compliance with legal document retention requirements.
            </remarks>
            <example>
            <code>
            bool valid1 = MatterValidationHelper.IsValidArchiveState(false, false);   // true (active)
            bool valid2 = MatterValidationHelper.IsValidArchiveState(true, false);    // true (archived)
            bool valid3 = MatterValidationHelper.IsValidArchiveState(true, true);     // true (deleted and archived)
            bool invalid = MatterValidationHelper.IsValidArchiveState(false, true);   // false (deleted but not archived)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.IsUniqueDescription(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Validates that a matter description is unique within a given context.
            </summary>
            <param name="description">The description to validate. Can be null.</param>
            <param name="existingDescriptions">Collection of existing matter descriptions.</param>
            <param name="ignoreCaseComparison">Whether to ignore case when comparing descriptions.</param>
            <returns>
            <c>true</c> if the description is unique; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="existingDescriptions"/> is null.</exception>
            <remarks>
            This method helps enforce uniqueness constraints for matter descriptions
            within specific contexts, such as client-specific matter collections or
            active matter lists. It performs normalized comparison to handle whitespace differences.
            
            <para><strong>Comparison Process:</strong></para>
            <list type="bullet">
            <item>Normalizes both input and existing descriptions</item>
            <item>Performs case-sensitive or case-insensitive comparison as specified</item>
            <item>Handles null and whitespace variations consistently</item>
            </list>
            </remarks>
            <example>
            <code>
            var existing = new[] { "Contract Review", "Litigation Case" };
            bool unique1 = MatterValidationHelper.IsUniqueDescription("New Matter", existing);        // true
            bool unique2 = MatterValidationHelper.IsUniqueDescription("contract review", existing, true); // false (case insensitive)
            bool duplicate = MatterValidationHelper.IsUniqueDescription("Contract Review", existing); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.IsValidStateTransition(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Validates the business logic for matter lifecycle state transitions.
            </summary>
            <param name="currentIsArchived">Current archived state.</param>
            <param name="currentIsDeleted">Current deleted state.</param>
            <param name="newIsArchived">New archived state.</param>
            <param name="newIsDeleted">New deleted state.</param>
            <returns>
            <c>true</c> if the transition is valid; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates that matter state transitions follow proper business rules,
            preventing invalid state changes that could compromise data integrity or legal compliance.
            
            <para><strong>Valid Transitions:</strong></para>
            <list type="bullet">
            <item>Active → Archived (normal archival)</item>
            <item>Archived → Deleted (proper deletion process)</item>
            <item>Active → Deleted (if also archived in same operation)</item>
            <item>Any state → Same state (no change)</item>
            </list>
            
            <para><strong>Invalid Transitions:</strong></para>
            <list type="bullet">
            <item>Deleted → Any undeleted state (cannot restore deleted matters)</item>
            <item>Active → Deleted without archiving (must archive first)</item>
            <item>Deleted and Archived → Unarchived but still Deleted (logical inconsistency)</item>
            </list>
            
            <para><strong>Legal Compliance:</strong></para>
            These rules ensure proper audit trails and prevent accidental data loss
            while maintaining compliance with legal document retention requirements.
            </remarks>
            <example>
            <code>
            // Valid transitions
            bool valid1 = MatterValidationHelper.IsValidStateTransition(false, false, true, false);  // active to archived
            bool valid2 = MatterValidationHelper.IsValidStateTransition(true, false, true, true);    // archived to deleted
            bool valid3 = MatterValidationHelper.IsValidStateTransition(false, false, true, true);   // active to deleted+archived
            
            // Invalid transitions
            bool invalid1 = MatterValidationHelper.IsValidStateTransition(true, true, false, false); // deleted to active (not allowed)
            bool invalid2 = MatterValidationHelper.IsValidStateTransition(false, false, false, true); // active to deleted without archiving
            bool invalid3 = MatterValidationHelper.IsValidStateTransition(true, true, false, true);  // unarchive deleted matter
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.ValidateDescription(System.String,System.String)">
            <summary>
            Performs comprehensive validation of a matter description and returns detailed validation results.
            </summary>
            <param name="description">The description to validate. Can be null.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method performs all description validation checks in a single call:
            <list type="bullet">
            <item>Null/whitespace validation</item>
            <item>Length validation (min/max bounds)</item>
            <item>Format validation (character patterns, start/end validation)</item>
            <item>Reserved word validation</item>
            <item>Normalization compatibility validation</item>
            </list>
            
            <para><strong>Validation Order:</strong></para>
            Validations are performed in order of severity, with early termination for null values.
            </remarks>
            <example>
            <code>
            var results = MatterValidationHelper.ValidateDescription("SYSTEM Test", nameof(MyDto.Description));
            if (results.Any())
            {
                foreach (var result in results)
                {
                    Console.WriteLine($"Error: {result.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.ValidateMatterId(System.Guid,System.String)">
            <summary>
            Performs comprehensive validation of a matter ID.
            </summary>
            <param name="matterId">The matter ID to validate.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method validates that the matter ID represents a valid, non-empty GUID suitable
            for use as a database identifier.
            </remarks>
            <example>
            <code>
            var results = MatterValidationHelper.ValidateMatterId(Guid.Empty, nameof(MyDto.MatterId));
            if (results.Any())
            {
                Console.WriteLine($"Matter ID validation failed: {string.Join(", ", results.Select(r => r.ErrorMessage))}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.ValidateDate(System.DateTime,System.String)">
            <summary>
            Performs comprehensive validation of a matter date.
            </summary>
            <param name="date">The date to validate.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method validates that the date is within acceptable bounds for matter operations.
            </remarks>
            <example>
            <code>
            var results = MatterValidationHelper.ValidateDate(DateTime.MinValue, nameof(MyDto.CreationDate));
            if (results.Any())
            {
                Console.WriteLine($"Date validation failed: {string.Join(", ", results.Select(r => r.ErrorMessage))}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.ValidateStates(System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Validates matter state consistency and transitions.
            </summary>
            <param name="isArchived">Current or new archived state.</param>
            <param name="isDeleted">Current or new deleted state.</param>
            <param name="archivedPropertyName">Property name for archived state (for error messages). Cannot be null or whitespace.</param>
            <param name="deletedPropertyName">Property name for deleted state (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when property names are null, empty, or consist only of whitespace.</exception>
            <remarks>
            This method validates that matter states are consistent with business rules.
            </remarks>
            <example>
            <code>
            var results = MatterValidationHelper.ValidateStates(false, true, nameof(MyDto.IsArchived), nameof(MyDto.IsDeleted));
            // Will return validation error for deleted but not archived
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.NormalizeDescription(System.String)">
            <summary>
            Normalizes a matter description for consistent storage and comparison.
            </summary>
            <param name="description">The description to normalize. Can be null.</param>
            <returns>
            The normalized description, or null if the input is invalid.
            </returns>
            <remarks>
            Normalization includes trimming whitespace and standardizing spacing
            for consistent storage and comparison operations.
            
            <para><strong>Normalization Rules:</strong></para>
            <list type="bullet">
            <item>Trims leading and trailing whitespace</item>
            <item>Normalizes multiple consecutive spaces to single spaces</item>
            <item>Preserves internal punctuation and formatting</item>
            <item>Returns null for null or whitespace-only input</item>
            </list>
            
            <para><strong>Performance:</strong></para>
            Uses compiled regex for efficient whitespace normalization.
            </remarks>
            <example>
            <code>
            string? normalized1 = MatterValidationHelper.NormalizeDescription("  Contract   Review  "); // "Contract Review"
            string? normalized2 = MatterValidationHelper.NormalizeDescription("Legal\t\tMatter");       // "Legal Matter"
            string? invalid1 = MatterValidationHelper.NormalizeDescription("");                         // null
            string? invalid2 = MatterValidationHelper.NormalizeDescription(null);                       // null
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.AreDescriptionsEquivalent(System.String,System.String)">
            <summary>
            Checks if two matter descriptions are equivalent after normalization.
            </summary>
            <param name="description1">The first description. Can be null.</param>
            <param name="description2">The second description. Can be null.</param>
            <returns>
            <c>true</c> if the descriptions are equivalent; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method is useful for comparing descriptions in a case-insensitive manner
            while handling whitespace differences through normalization.
            </remarks>
            <example>
            <code>
            bool same1 = MatterValidationHelper.AreDescriptionsEquivalent("Contract Review", "contract review");     // true
            bool same2 = MatterValidationHelper.AreDescriptionsEquivalent("  Contract  Review  ", "Contract Review"); // true
            bool different = MatterValidationHelper.AreDescriptionsEquivalent("Contract Review", "Litigation Case"); // false
            bool bothNull = MatterValidationHelper.AreDescriptionsEquivalent(null, null);                            // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.NormalizeDateToUtc(System.DateTime)">
            <summary>
            Normalizes a date to UTC for consistent storage.
            </summary>
            <param name="date">The date to normalize.</param>
            <returns>
            The date normalized to UTC, or null if the input date is invalid.
            </returns>
            <remarks>
            This method ensures all matter dates are stored in UTC for consistency,
            while validating the date meets basic requirements.
            
            <para><strong>Normalization Process:</strong></para>
            <list type="bullet">
            <item>Validates date is within acceptable bounds</item>
            <item>Converts to UTC based on DateTimeKind</item>
            <item>Returns null for invalid dates</item>
            </list>
            </remarks>
            <example>
            <code>
            var localDate = DateTime.Now;
            DateTime? utcDate = MatterValidationHelper.NormalizeDateToUtc(localDate);
            // Returns the date converted to UTC if valid
            
            DateTime? invalid = MatterValidationHelper.NormalizeDateToUtc(DateTime.MinValue);
            // Returns null for invalid dates
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Common.MatterValidationHelper.ReservedDescriptionWordsList">
            <summary>
            Gets the list of reserved description words as a formatted, comma-separated string.
            </summary>
            <returns>
            A string containing all reserved description words separated by commas and spaces.
            </returns>
            <remarks>
            This property is useful for error messages and documentation where a human-readable
            list of reserved words is needed.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.SuggestAlternativeDescriptions(System.String,System.Int32)">
            <summary>
            Suggests alternative descriptions if the provided description is not valid.
            </summary>
            <param name="attemptedDescription">The attempted description. Can be null.</param>
            <param name="maxSuggestions">Maximum number of suggestions to return.</param>
            <returns>
            A read-only list of suggested alternative descriptions.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="maxSuggestions"/> is less than 1.</exception>
            <remarks>
            This method provides helpful suggestions when a description validation fails,
            improving user experience by offering valid alternatives based on the attempted input.
            
            <para><strong>Suggestion Strategies:</strong></para>
            <list type="bullet">
            <item>For short descriptions: Add prefixes like "Matter -", "Case -"</item>
            <item>For long descriptions: Suggest truncation strategies</item>
            <item>For reserved words: Offer generic alternatives</item>
            <item>For null/empty: Provide common matter description templates</item>
            </list>
            </remarks>
            <example>
            <code>
            var suggestions = MatterValidationHelper.SuggestAlternativeDescriptions("A", 3);
            // Returns suggestions like ["Matter - A", "Case - A", "Project - A"]
            
            var suggestions2 = MatterValidationHelper.SuggestAlternativeDescriptions("SYSTEM", 3);
            // Returns suggestions like ["Legal Matter", "Client Case", "Legal Project"]
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.GetDescriptionValidationDetails(System.String)">
            <summary>
            Gets detailed validation information about a matter description for diagnostic purposes.
            </summary>
            <param name="description">The description to analyze. Can be null.</param>
            <returns>
            A dictionary containing detailed validation results and diagnostic information.
            </returns>
            <remarks>
            This method provides comprehensive diagnostic information about description validation,
            useful for troubleshooting validation failures and providing detailed analysis.
            
            <para><strong>Diagnostic Information Includes:</strong></para>
            <list type="bullet">
            <item>Basic validation results (null, length, format)</item>
            <item>Character analysis (letters, digits, special characters)</item>
            <item>Word counting and structure analysis</item>
            <item>Reserved word detection results</item>
            <item>Normalization results</item>
            </list>
            </remarks>
            <example>
            <code>
            var results = MatterValidationHelper.GetDescriptionValidationDetails("Contract Review");
            foreach (var result in results)
            {
                Console.WriteLine($"{result.Key}: {result.Value}");
            }
            // Output includes: IsNotNullOrEmpty: True, OriginalLength: 15, IsOverallValid: True, etc.
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.GetValidationStatistics">
            <summary>
            Gets validation statistics for the matter validation system.
            </summary>
            <returns>
            A dictionary containing statistical information about the validation system.
            </returns>
            <remarks>
            This method provides insights into the validation system configuration,
            useful for monitoring, diagnostics, and system documentation.
            </remarks>
            <example>
            <code>
            var stats = MatterValidationHelper.GetValidationStatistics();
            Console.WriteLine($"Max description length: {stats["MaxDescriptionLength"]}");
            Console.WriteLine($"Min description length: {stats["MinDescriptionLength"]}");
            Console.WriteLine($"Reserved words count: {stats["ReservedWordsCount"]}");
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.IsValidDescriptionLength(System.String)">
            <summary>
            Validates if a description length is within acceptable bounds.
            </summary>
            <param name="description">The description to validate.</param>
            <returns><c>true</c> if the length is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.ContainsReservedWords(System.String)">
            <summary>
            Checks if a description contains any reserved words using high-performance lookup.
            </summary>
            <param name="description">The description to check.</param>
            <returns><c>true</c> if reserved words are found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.HasValidDescriptionFormat(System.String)">
            <summary>
            Validates the format of a matter description.
            </summary>
            <param name="description">The description to validate.</param>
            <returns><c>true</c> if the format is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.CleanDescription(System.String)">
            <summary>
            Cleans a description by removing or replacing invalid characters.
            </summary>
            <param name="description">The description to clean.</param>
            <returns>The cleaned description.</returns>
        </member>
        <member name="M:ADMS.API.Common.MatterValidationHelper.MultipleWhitespaceRegex">
            <remarks>
            Pattern:<br/>
            <code>\\s+</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a whitespace character atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:ADMS.API.Common.RevisionActivityValidationHelper">
            <summary>
            Provides comprehensive helper methods and constants for validating revision activity-related data within the ADMS system.
            </summary>
            <remarks>
            This static helper class provides robust revision activity validation functionality for the ADMS legal 
            document management system, supporting RevisionActivityDto and RevisionActivityMinimalDto validation.
            The validation methods ensure data integrity, business rule compliance, and consistent validation logic 
            across the application.
            
            <para><strong>Key Features:</strong></para>
            <list type="bullet">
            <item>Activity name validation against predefined allowed activities from database seed data</item>
            <item>GUID validation for activity IDs with proper empty value checking</item>
            <item>Length validation consistent with database constraints (StringLength(50))</item>
            <item>Format validation for activity names with pattern matching</item>
            <item>Business rule validation for revision lifecycle operations</item>
            <item>User association validation requirements for audit trail integrity</item>
            <item>High-performance validation using frozen collections for O(1) lookup performance</item>
            <item>Thread-safe operations optimized for concurrent access scenarios</item>
            </list>
            
            <para><strong>Revision Activity Categories:</strong></para>
            <list type="bullet">
            <item><strong>Lifecycle Operations:</strong> CREATED, DELETED, RESTORED, SAVED</item>
            </list>
            
            <para><strong>Database Synchronization:</strong></para>
            The allowed activities list is synchronized with the RevisionActivity seed data in AdmsContext.cs,
            ensuring consistency between validation logic and database constraints. These activities represent
            the standard revision lifecycle events for document versions in the legal document management system.
            
            <para><strong>Business Context:</strong></para>
            Revision activities track the lifecycle of document revisions, from creation through modification
            to archival or deletion. Each activity represents a significant state change or operation performed
            on a document revision, maintaining comprehensive audit trails for legal compliance.
            
            <para><strong>Thread Safety:</strong></para>
            All methods in this class are thread-safe and use immutable frozen collections for optimal
            performance in concurrent scenarios without external synchronization.
            
            <para><strong>Performance Considerations:</strong></para>
            Uses FrozenSet for O(1) average lookup performance and minimal memory allocation.
            All validation operations are optimized for high-frequency usage in API scenarios.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.RevisionActivityValidationHelper.MaxActivityLength">
            <summary>
            The maximum allowed length for a revision activity name.
            </summary>
            <remarks>
            This value matches the StringLength(50) constraint on the RevisionActivity.Activity property 
            in the ADMS.API.Entities.RevisionActivity entity to ensure consistency between validation 
            logic and database constraints.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.RevisionActivityValidationHelper.MinActivityLength">
            <summary>
            The minimum allowed length for a revision activity name.
            </summary>
            <remarks>
            Minimum length ensures activity names are meaningful and not just single characters
            or empty strings after trimming. This prevents issues with data integrity and user experience.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.RevisionActivityValidationHelper.MaxActivitySuggestions">
            <summary>
            Maximum number of activity suggestions to generate for user assistance.
            </summary>
            <remarks>
            Limits the number of suggestions to prevent excessive processing while
            providing sufficient alternatives for user selection.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.RevisionActivityValidationHelper._allowedActivitiesArray">
            <summary>
            The list of allowed revision activity names synchronized with database seed data.
            All values are uppercase and unique, corresponding to the RevisionActivity seed data in AdmsContext.cs.
            </summary>
            <remarks>
            These activity types represent the standard lifecycle events for document revisions
            in the ADMS legal document management system. Activities describe actions taken
            on document revisions throughout their lifecycle.
            
            <para><strong>Activity Categories:</strong></para>
            <list type="bullet">
            <item><strong>Lifecycle Operations:</strong> CREATED, DELETED, RESTORED, SAVED</item>
            </list>
            
            <para><strong>Database Synchronization:</strong></para>
            This list must be kept in sync with the RevisionActivity seed data in 
            DbContexts/AdmsContext.SeedRevisionActivities() method to ensure validation consistency.
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item><strong>CREATED:</strong> Initial creation of a document revision</item>
            <item><strong>SAVED:</strong> Saving changes to an existing revision</item>
            <item><strong>DELETED:</strong> Soft deletion of a revision (can be restored)</item>
            <item><strong>RESTORED:</strong> Restoration of a previously deleted revision</item>
            </list>
            
            <para><strong>Modification Guidelines:</strong></para>
            When adding new activities:
            <list type="number">
            <item>Add the activity to the database seed data first</item>
            <item>Update this list to match the seed data</item>
            <item>Ensure activity names are uppercase and descriptive</item>
            <item>Follow existing naming conventions for consistency</item>
            <item>Update documentation and tests accordingly</item>
            <item>Consider business implications for revision lifecycle management</item>
            </list>
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.RevisionActivityValidationHelper._reservedActivityNamesArray">
            <summary>
            The list of reserved activity names that cannot be used for standard revision operations.
            These names are reserved for system operations and error conditions.
            </summary>
            <remarks>
            Reserved names prevent conflicts with system-generated activities and ensure
            clear separation between user-initiated activities and system operations.
            
            <para><strong>Reserved Categories:</strong></para>
            <list type="bullet">
            <item><strong>System Operations:</strong> SYSTEM, ADMIN, AUTO, BATCH</item>
            <item><strong>Data Operations:</strong> MIGRATION, IMPORT, EXPORT</item>
            <item><strong>Error Conditions:</strong> CORRUPT, ERROR, FAILED</item>
            <item><strong>Cleanup Operations:</strong> PURGE</item>
            </list>
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.RevisionActivityValidationHelper._allowedActivitiesSet">
            <summary>
            High-performance frozen set of allowed activities for O(1) lookup performance.
            </summary>
            <remarks>
            Uses FrozenSet for optimal read performance in validation scenarios.
            Thread-safe and immutable for concurrent access without locking.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.RevisionActivityValidationHelper._reservedActivityNamesSet">
            <summary>
            High-performance frozen set of reserved activity names for O(1) lookup performance.
            </summary>
            <remarks>
            Uses FrozenSet for optimal read performance in validation scenarios.
            Case-insensitive comparison for cross-platform compatibility.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.RevisionActivityValidationHelper.AllowedActivities">
            <summary>
            Gets the read-only list of allowed revision activity names.
            All values are uppercase and unique.
            </summary>
            <remarks>
            Returns an immutable view of the allowed activities for external consumption.
            This property provides thread-safe access to the activities list.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.RevisionActivityValidationHelper.ReservedActivityNames">
            <summary>
            Gets the read-only list of reserved activity names.
            These names cannot be used for custom activities.
            </summary>
            <remarks>
            Returns an immutable view of the reserved activity names for external consumption.
            This property provides thread-safe access to the reserved names list.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.IsActivityAllowed(System.String)">
            <summary>
            Determines whether the specified activity is allowed.
            The comparison is case-insensitive and ignores leading/trailing whitespace.
            </summary>
            <param name="activity">The activity name to validate. Can be null or whitespace.</param>
            <returns>
            <c>true</c> if the activity is non-empty and exists in <see cref="P:ADMS.API.Common.RevisionActivityValidationHelper.AllowedActivities"/>; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates that activity names conform to the predefined list of allowed activities,
            ensuring consistency across the ADMS system and preventing invalid activity types that could
            compromise business logic or reporting.
            
            <para><strong>Performance:</strong></para>
            Uses FrozenSet for O(1) average lookup performance, optimized for high-frequency validation.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Null or whitespace strings return false</item>
            <item>Leading/trailing whitespace is ignored</item>
            <item>Case-insensitive comparison</item>
            <item>Must match exactly one of the predefined allowed activities</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid1 = RevisionActivityValidationHelper.IsActivityAllowed("CREATED");     // true
            bool isValid2 = RevisionActivityValidationHelper.IsActivityAllowed("created");     // true (case insensitive)
            bool isValid3 = RevisionActivityValidationHelper.IsActivityAllowed(" SAVED ");     // true (ignores whitespace)
            bool isInvalid1 = RevisionActivityValidationHelper.IsActivityAllowed("INVALID");   // false
            bool isInvalid2 = RevisionActivityValidationHelper.IsActivityAllowed("");          // false
            bool isInvalid3 = RevisionActivityValidationHelper.IsActivityAllowed(null);        // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.IsValidActivityId(System.Guid)">
            <summary>
            Determines whether the specified activity ID is valid.
            A valid activity ID is a non-empty GUID.
            </summary>
            <param name="activityId">The activity ID to validate.</param>
            <returns>
            <c>true</c> if the activity ID is not empty; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method follows the same pattern as other entity validation helpers in the ADMS system,
            ensuring consistency across validation logic.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>GUID must not be Guid.Empty</item>
            <item>GUID must represent a valid identifier structure</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid = RevisionActivityValidationHelper.IsValidActivityId(Guid.NewGuid());  // true
            bool isInvalid = RevisionActivityValidationHelper.IsValidActivityId(Guid.Empty);    // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.IsValidActivityLength(System.String)">
            <summary>
            Determines whether the specified activity name has valid length.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <returns>
            <c>true</c> if the activity length is within valid bounds; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates activity name length against the database constraints to prevent
            data truncation or invalid data storage.
            
            <para><strong>Length Constraints:</strong></para>
            <list type="bullet">
            <item>Minimum length: {MinActivityLength} character (after trimming)</item>
            <item>Maximum length: {MaxActivityLength} characters (matches database constraint)</item>
            <item>Null or whitespace strings return false</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid = RevisionActivityValidationHelper.IsValidActivityLength("CREATED");          // true
            bool isValid2 = RevisionActivityValidationHelper.IsValidActivityLength("A");               // true (minimum 1 char)
            bool isInvalid = RevisionActivityValidationHelper.IsValidActivityLength("");               // false (empty)
            bool isInvalid2 = RevisionActivityValidationHelper.IsValidActivityLength(new string('A', 51)); // false (too long)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.IsValidActivityFormat(System.String)">
            <summary>
            Determines whether the specified activity name contains only valid characters.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <returns>
            <c>true</c> if the activity contains only valid characters; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Valid activity names should contain only letters, numbers, and underscores,
            following standard naming conventions for activity types in legal document management.
            
            <para><strong>Format Rules:</strong></para>
            <list type="bullet">
            <item>Must contain at least one letter</item>
            <item>Can only contain letters, numbers, and underscores</item>
            <item>No spaces or special characters allowed</item>
            <item>Case-insensitive validation</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid1 = RevisionActivityValidationHelper.IsValidActivityFormat("CREATED");      // true
            bool isValid2 = RevisionActivityValidationHelper.IsValidActivityFormat("STEP_1");       // true
            bool isInvalid1 = RevisionActivityValidationHelper.IsValidActivityFormat("CREATED!");   // false
            bool isInvalid2 = RevisionActivityValidationHelper.IsValidActivityFormat("CREATED 1");  // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.IsReservedActivity(System.String)">
            <summary>
            Determines whether the specified activity name is reserved for system use.
            </summary>
            <param name="activity">The activity name to check. Can be null.</param>
            <returns>
            <c>true</c> if the activity name is reserved; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Reserved activity names should not be used for standard user-initiated revision operations
            as they are reserved for system operations and error conditions.
            </remarks>
            <example>
            <code>
            bool isReserved1 = RevisionActivityValidationHelper.IsReservedActivity("SYSTEM");    // true
            bool isReserved2 = RevisionActivityValidationHelper.IsReservedActivity("ERROR");     // true
            bool isNotReserved = RevisionActivityValidationHelper.IsReservedActivity("CREATED"); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.IsActivityAppropriateForContext(System.String,System.Boolean,System.Boolean)">
            <summary>
            Validates that a revision activity is appropriate for the given revision context.
            </summary>
            <param name="activity">The activity to validate. Can be null.</param>
            <param name="revisionExists">Whether the revision already exists.</param>
            <param name="isDeleted">Whether the revision is currently deleted.</param>
            <returns>
            <c>true</c> if the activity is appropriate for the revision context; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates that certain activities are only used in appropriate revision contexts.
            
            <para><strong>Business Rules by Activity:</strong></para>
            <list type="bullet">
            <item><strong>CREATED:</strong> Only valid for new revisions (revisionExists = false)</item>
            <item><strong>SAVED:</strong> Only valid for existing revisions (revisionExists = true)</item>
            <item><strong>DELETED:</strong> Only valid for existing, non-deleted revisions</item>
            <item><strong>RESTORED:</strong> Only valid for existing, deleted revisions</item>
            </list>
            
            <para><strong>Legal Compliance:</strong></para>
            These rules ensure proper audit trails and prevent invalid state transitions
            that could compromise document revision integrity.
            </remarks>
            <example>
            <code>
            bool valid1 = RevisionActivityValidationHelper.IsActivityAppropriateForContext("CREATED", false, false); // true
            bool valid2 = RevisionActivityValidationHelper.IsActivityAppropriateForContext("SAVED", true, false);    // true
            bool valid3 = RevisionActivityValidationHelper.IsActivityAppropriateForContext("RESTORED", true, true);  // true
            bool invalid1 = RevisionActivityValidationHelper.IsActivityAppropriateForContext("CREATED", true, false); // false
            bool invalid2 = RevisionActivityValidationHelper.IsActivityAppropriateForContext("RESTORED", true, false); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.IsValidActivityDuplication(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Validates that duplicate activities are not being created inappropriately.
            </summary>
            <param name="activity">The activity to validate. Can be null.</param>
            <param name="existingActivities">Collection of existing activity names.</param>
            <param name="allowDuplicates">Whether to allow duplicate activities.</param>
            <returns>
            <c>true</c> if the activity duplication is valid; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="existingActivities"/> is null.</exception>
            <remarks>
            Some revision activities may be allowed to occur multiple times (e.g., SAVED),
            while others should typically only happen once (e.g., CREATED, DELETED).
            
            <para><strong>Activity Duplication Rules:</strong></para>
            <list type="bullet">
            <item><strong>Single Occurrence:</strong> CREATED, DELETED (per revision lifecycle)</item>
            <item><strong>Multiple Allowed:</strong> SAVED, RESTORED (can occur multiple times)</item>
            </list>
            </remarks>
            <example>
            <code>
            var existing = new[] { "CREATED", "SAVED" };
            bool valid1 = RevisionActivityValidationHelper.IsValidActivityDuplication("SAVED", existing, true);    // true
            bool invalid = RevisionActivityValidationHelper.IsValidActivityDuplication("CREATED", existing, false); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.HasRequiredUserAssociations(System.Int32,System.Boolean)">
            <summary>
            Validates that a revision activity has the required user associations.
            </summary>
            <param name="userCount">Number of user associations.</param>
            <param name="allowEmptyUsers">Whether to allow activities without users (for system activities).</param>
            <returns>
            <c>true</c> if the user association requirements are met; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method enforces the business rule that most revision activities must have
            at least one user association to maintain audit trail integrity and ensure
            activities are properly attributed.
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Standard activities require at least one user association</item>
            <item>System activities may be allowed without user associations</item>
            <item>User count cannot be negative</item>
            </list>
            </remarks>
            <example>
            <code>
            bool valid1 = RevisionActivityValidationHelper.HasRequiredUserAssociations(1, false);  // true
            bool valid2 = RevisionActivityValidationHelper.HasRequiredUserAssociations(0, true);   // true (system activity)
            bool invalid = RevisionActivityValidationHelper.HasRequiredUserAssociations(0, false); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.IsValidActivity(System.String)">
            <summary>
            Performs comprehensive validation of an activity name including all validation rules.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <returns>
            <c>true</c> if the activity passes all validation rules; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method combines all individual validation rules into a single comprehensive check,
            providing a complete validation result for activity names.
            
            <para><strong>Validation Checks Performed:</strong></para>
            <list type="bullet">
            <item>Null/empty validation</item>
            <item>Length constraints validation</item>
            <item>Character format validation</item>
            <item>Reserved name validation</item>
            <item>Allowed activity list validation</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid = RevisionActivityValidationHelper.IsValidActivity("CREATED");        // true
            bool isInvalid1 = RevisionActivityValidationHelper.IsValidActivity("INVALID");     // false
            bool isInvalid2 = RevisionActivityValidationHelper.IsValidActivity("");            // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.ValidateActivity(System.String,System.String)">
            <summary>
            Performs comprehensive validation of an activity name and returns detailed validation results.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method performs all validation checks in a single call:
            <list type="bullet">
            <item>Null/whitespace validation</item>
            <item>Length validation (min/max bounds)</item>
            <item>Format validation (character patterns)</item>
            <item>Reserved name validation</item>
            <item>Allowed activity validation</item>
            </list>
            
            <para><strong>Validation Order:</strong></para>
            Validations are performed in order of severity, with early termination for null values.
            Reserved name validation is performed as an error, not a warning.
            </remarks>
            <example>
            <code>
            var results = RevisionActivityValidationHelper.ValidateActivity("INVALID_ACTIVITY", nameof(MyDto.Activity));
            if (results.Any())
            {
                foreach (var result in results)
                {
                    Console.WriteLine($"Error: {result.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.ValidateActivityId(System.Guid,System.String)">
            <summary>
            Performs comprehensive validation of an activity ID.
            </summary>
            <param name="activityId">The activity ID to validate.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method validates that the activity ID represents a valid, non-empty GUID suitable
            for use as a database identifier.
            </remarks>
            <example>
            <code>
            var results = RevisionActivityValidationHelper.ValidateActivityId(Guid.Empty, nameof(MyDto.ActivityId));
            if (results.Any())
            {
                Console.WriteLine($"Activity ID validation failed: {string.Join(", ", results.Select(r => r.ErrorMessage))}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.NormalizeActivity(System.String)">
            <summary>
            Normalizes an activity name for consistent storage and comparison.
            </summary>
            <param name="activity">The activity name to normalize. Can be null.</param>
            <returns>
            The normalized activity name, or null if the input is invalid.
            </returns>
            <remarks>
            Normalization includes trimming whitespace and converting to uppercase
            for consistent storage and comparison operations.
            
            <para><strong>Normalization Rules:</strong></para>
            <list type="bullet">
            <item>Trims leading and trailing whitespace</item>
            <item>Converts to uppercase using invariant culture</item>
            <item>Returns null for null or whitespace-only input</item>
            </list>
            </remarks>
            <example>
            <code>
            string? normalized1 = RevisionActivityValidationHelper.NormalizeActivity("  created  "); // "CREATED"
            string? normalized2 = RevisionActivityValidationHelper.NormalizeActivity("Saved");        // "SAVED"
            string? normalized3 = RevisionActivityValidationHelper.NormalizeActivity("");             // null
            string? normalized4 = RevisionActivityValidationHelper.NormalizeActivity(null);           // null
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.AreActivitiesEquivalent(System.String,System.String)">
            <summary>
            Checks if two activity names are equivalent after normalization.
            </summary>
            <param name="activity1">The first activity name. Can be null.</param>
            <param name="activity2">The second activity name. Can be null.</param>
            <returns>
            <c>true</c> if the activity names are equivalent; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method is useful for comparing activity names in a case-insensitive manner
            while handling whitespace differences.
            </remarks>
            <example>
            <code>
            bool same1 = RevisionActivityValidationHelper.AreActivitiesEquivalent("CREATED", "created");     // true
            bool same2 = RevisionActivityValidationHelper.AreActivitiesEquivalent("  CREATED  ", "CREATED");  // true
            bool different = RevisionActivityValidationHelper.AreActivitiesEquivalent("CREATED", "SAVED");   // false
            bool bothNull = RevisionActivityValidationHelper.AreActivitiesEquivalent(null, null);            // false
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Common.RevisionActivityValidationHelper.AllowedActivitiesList">
            <summary>
            Gets the list of allowed activities as a formatted, comma-separated string.
            </summary>
            <returns>
            A string containing all allowed activities separated by commas and spaces.
            </returns>
            <remarks>
            This property is useful for error messages and documentation where a human-readable
            list of allowed activities is needed.
            </remarks>
            <example>
            Returns: "CREATED, DELETED, RESTORED, SAVED"
            </example>
        </member>
        <member name="P:ADMS.API.Common.RevisionActivityValidationHelper.ReservedActivitiesList">
            <summary>
            Gets the list of reserved activities as a formatted, comma-separated string.
            </summary>
            <returns>
            A string containing all reserved activities separated by commas and spaces.
            </returns>
            <remarks>
            This property is useful for error messages and documentation where a human-readable
            list of reserved activities is needed.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.SuggestAlternativeActivities(System.String,System.String,System.Int32)">
            <summary>
            Suggests alternative activity names if the provided activity is not allowed.
            </summary>
            <param name="attemptedActivity">The attempted activity name. Can be null.</param>
            <param name="categoryHint">Optional category hint for better suggestions (lifecycle).</param>
            <param name="maxSuggestions">Maximum number of suggestions to return.</param>
            <returns>
            A read-only list of suggested alternative activity names.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="maxSuggestions"/> is less than 1.</exception>
            <remarks>
            This method provides helpful suggestions when an activity name validation fails,
            improving user experience by offering valid alternatives based on the context.
            
            <para><strong>Suggestion Strategies:</strong></para>
            <list type="bullet">
            <item>Find activities containing similar text</item>
            <item>Provide category-specific suggestions</item>
            <item>Offer all available activities for the limited set</item>
            <item>Prioritize exact matches and partial matches</item>
            </list>
            </remarks>
            <example>
            <code>
            var suggestions = RevisionActivityValidationHelper.SuggestAlternativeActivities("CREATE", "lifecycle", 3);
            // Returns lifecycle-related activities like "CREATED", "SAVED", "DELETED"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.GetActivitiesByCategory(System.String)">
            <summary>
            Gets activities by category for contextual suggestions.
            </summary>
            <param name="category">The category (lifecycle). Can be null.</param>
            <returns>A collection of activities for the specified category.</returns>
            <remarks>
            This method categorizes activities by their purpose to provide
            contextually relevant suggestions.
            
            <para><strong>Available Categories:</strong></para>
            <list type="bullet">
            <item><strong>lifecycle:</strong> CREATED, SAVED, DELETED, RESTORED</item>
            </list>
            </remarks>
            <example>
            <code>
            var lifecycleActivities = RevisionActivityValidationHelper.GetActivitiesByCategory("lifecycle");
            // Returns: ["CREATED", "DELETED", "RESTORED", "SAVED"]
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.GetValidationStatistics">
            <summary>
            Gets statistical information about activity validation rules.
            </summary>
            <returns>
            A dictionary containing statistical information about the validation system.
            </returns>
            <remarks>
            This method provides insights into the validation system configuration,
            useful for monitoring and diagnostics.
            </remarks>
            <example>
            <code>
            var stats = RevisionActivityValidationHelper.GetValidationStatistics();
            Console.WriteLine($"Total allowed activities: {stats["TotalAllowedActivities"]}");
            Console.WriteLine($"Total reserved activities: {stats["TotalReservedActivities"]}");
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.GenerateValidationReport(System.String)">
            <summary>
            Generates a comprehensive validation report for an activity name.
            </summary>
            <param name="activity">The activity name to analyze. Can be null.</param>
            <returns>
            A formatted string containing detailed validation information.
            </returns>
            <remarks>
            This method provides a human-readable validation report useful for debugging
            and troubleshooting activity validation issues.
            
            <para><strong>Report Contents:</strong></para>
            <list type="bullet">
            <item>Detailed validation results for each rule</item>
            <item>Normalized activity name</item>
            <item>Overall validation result</item>
            <item>Suggestions for invalid activities</item>
            <item>Available activity categories</item>
            <item>Reserved activity names</item>
            </list>
            </remarks>
            <example>
            <code>
            string report = RevisionActivityValidationHelper.GenerateValidationReport("INVALID_ACTIVITY");
            Console.WriteLine(report);
            // Outputs detailed validation results and suggestions
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionActivityValidationHelper.GetDetailedValidationResults(System.String)">
            <summary>
            Validates an activity name and returns detailed validation results.
            </summary>
            <param name="activity">The activity name to validate. Can be null.</param>
            <returns>
            A dictionary containing detailed validation results for each validation rule.
            </returns>
            <remarks>
            This method provides detailed diagnostic information about activity validation,
            useful for troubleshooting validation failures and providing specific error messages.
            
            <para><strong>Validation Rules Checked:</strong></para>
            <list type="bullet">
            <item>IsNotNullOrEmpty: Activity is not null, empty, or whitespace</item>
            <item>HasValidLength: Activity length is within bounds</item>
            <item>HasValidFormat: Activity contains valid characters</item>
            <item>IsNotReserved: Activity is not in reserved names list</item>
            <item>IsInAllowedList: Activity is in the allowed activities list</item>
            <item>PassesAllRules: Overall validation result</item>
            </list>
            </remarks>
            <example>
            <code>
            var results = RevisionActivityValidationHelper.GetDetailedValidationResults("CREATED");
            foreach (var result in results)
            {
                Console.WriteLine($"{result.Key}: {result.Value}");
            }
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Common.RevisionValidationHelper">
            <summary>
            Provides comprehensive helper methods and constants for validating revision-related data within the ADMS system.
            </summary>
            <remarks>
            This static helper class provides robust revision validation functionality for the ADMS legal 
            document management system, supporting all revision-related DTOs including RevisionDto, RevisionMinimalDto, 
            RevisionForCreationDto, and RevisionForUpdateDto. The validation methods ensure data integrity, business rule 
            compliance, and consistent validation logic across the application.
            
            <para><strong>Key Features:</strong></para>
            <list type="bullet">
            <item>Revision number validation with sequential numbering enforcement</item>
            <item>GUID validation for revision IDs with proper empty value checking</item>
            <item>Date validation with timezone normalization and chronological consistency</item>
            <item>Business rule validation for revision lifecycle and versioning operations</item>
            <item>Temporal consistency validation between creation and modification dates</item>
            <item>Document association validation for proper revision management</item>
            <item>High-performance validation using modern .NET patterns</item>
            <item>Thread-safe operations optimized for concurrent access scenarios</item>
            </list>
            
            <para><strong>Revision Lifecycle Management:</strong></para>
            <list type="bullet">
            <item><strong>Creation:</strong> First revision starts at number 1</item>
            <item><strong>Versioning:</strong> Sequential numbering without gaps or duplicates</item>
            <item><strong>Modification:</strong> Modification date must be >= creation date</item>
            <item><strong>Deletion:</strong> Soft deletion with business rule enforcement</item>
            </list>
            
            <para><strong>Database Synchronization:</strong></para>
            All validation constraints are synchronized with the Revision entity structure:
            <list type="bullet">
            <item>RevisionNumber: int with sequential validation</item>
            <item>CreationDate/ModificationDate: DateTime with UTC normalization</item>
            <item>IsDeleted: bool with business rule validation</item>
            <item>DocumentId: Guid with non-empty validation</item>
            </list>
            
            <para><strong>Legal Compliance:</strong></para>
            Revision validation enforces legal document management best practices including:
            <list type="bullet">
            <item>Audit trail preservation through proper versioning</item>
            <item>Data integrity through comprehensive validation rules</item>
            <item>Temporal consistency for legal document chronology</item>
            <item>Version control integrity for document management</item>
            </list>
            
            <para><strong>Thread Safety:</strong></para>
            All methods in this class are thread-safe and use immutable collections where applicable
            for optimal performance in concurrent scenarios without external synchronization.
            
            <para><strong>Performance Considerations:</strong></para>
            Uses modern .NET patterns including aggressive inlining for hot paths and
            optimized validation operations for high-frequency usage in API scenarios.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.RevisionValidationHelper.MinRevisionNumber">
            <summary>
            The minimum allowed revision number.
            </summary>
            <remarks>
            Revision numbers start from 1 to maintain consistency with document versioning standards
            and prevent confusion with zero-based indexing systems.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.RevisionValidationHelper.MaxRevisionNumber">
            <summary>
            The maximum allowed revision number.
            </summary>
            <remarks>
            This limit prevents integer overflow and ensures reasonable revision numbering.
            Set to a practical maximum that allows for extensive document versioning.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.RevisionValidationHelper.MinAllowedRevisionDate">
            <summary>
            The earliest allowed date for revision operations.
            </summary>
            <remarks>
            This date represents a reasonable lower bound for revision dates in the ADMS system,
            preventing unrealistic historical dates that might indicate data corruption or system errors.
            Set to January 1, 1980, as a practical minimum for legal document management systems.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.RevisionValidationHelper.MaxAllowedRevisionDate">
            <summary>
            The maximum allowed date for revision operations (current UTC time plus tolerance).
            </summary>
            <remarks>
            This represents a reasonable upper bound that accounts for system clock differences
            while preventing future dates that could cause issues with business logic.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.RevisionValidationHelper.FutureDateToleranceMinutes">
            <summary>
            The tolerance in minutes for future dates.
            </summary>
            <remarks>
            This tolerance accounts for clock skew between client and server systems,
            allowing for small time differences while preventing actual future dates.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.RevisionValidationHelper.MaxDateTimeSpan">
            <summary>
            The maximum allowed time span between creation and modification dates.
            </summary>
            <remarks>
            This prevents unrealistic time spans that might indicate data corruption.
            Set to 50 years as a reasonable maximum for long-term document management.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.RevisionValidationHelper.MaxRevisionSuggestions">
            <summary>
            Maximum number of revision suggestions to generate for user assistance.
            </summary>
            <remarks>
            Limits the number of suggestions to prevent excessive processing while
            providing sufficient information for troubleshooting.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.IsValidRevisionNumber(System.Int32)">
            <summary>
            Determines whether the specified revision number is valid.
            A valid revision number is a positive integer within acceptable bounds.
            </summary>
            <param name="revisionNumber">The revision number to validate.</param>
            <returns>
            <c>true</c> if the revision number is within valid bounds; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates that revision numbers follow the standard versioning convention
            where the first revision is numbered 1, not 0, and ensures numbers remain within
            practical limits to prevent system issues.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Must be greater than or equal to {MinRevisionNumber}</item>
            <item>Must be less than or equal to {MaxRevisionNumber}</item>
            <item>Follows standard document versioning conventions</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid1 = RevisionValidationHelper.IsValidRevisionNumber(1);        // true
            bool isValid2 = RevisionValidationHelper.IsValidRevisionNumber(100);      // true
            bool isInvalid1 = RevisionValidationHelper.IsValidRevisionNumber(0);      // false
            bool isInvalid2 = RevisionValidationHelper.IsValidRevisionNumber(-1);     // false
            bool isInvalid3 = RevisionValidationHelper.IsValidRevisionNumber(1000000); // false (too large)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.IsValidDate(System.DateTime)">
            <summary>
            Determines whether the specified date is valid for a revision.
            A valid date is within reasonable bounds and not in the future.
            </summary>
            <param name="date">The date to validate.</param>
            <returns>
            <c>true</c> if the date is valid; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method ensures revision dates are realistic and comply with business rules:
            <list type="bullet">
            <item>Must be after the minimum allowed date ({MinAllowedRevisionDate:yyyy-MM-dd})</item>
            <item>Cannot be in the future (with {FutureDateToleranceMinutes} minute tolerance)</item>
            <item>Must not be DateTime.MinValue or other sentinel values</item>
            </list>
            
            <para><strong>Timezone Handling:</strong></para>
            The method works with any DateTime kind but normalizes to UTC for comparison.
            </remarks>
            <example>
            <code>
            bool isValid1 = RevisionValidationHelper.IsValidDate(DateTime.UtcNow);                    // true
            bool isValid2 = RevisionValidationHelper.IsValidDate(new DateTime(2020, 1, 1));          // true
            bool isInvalid1 = RevisionValidationHelper.IsValidDate(DateTime.MinValue);                // false (too early)
            bool isInvalid2 = RevisionValidationHelper.IsValidDate(DateTime.UtcNow.AddHours(1));      // false (future)
            bool isInvalid3 = RevisionValidationHelper.IsValidDate(new DateTime(1975, 1, 1));        // false (too early)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.IsValidRevisionId(System.Guid)">
            <summary>
            Determines whether the specified revision ID is valid.
            A valid revision ID is a non-empty GUID.
            </summary>
            <param name="revisionId">The revision ID to validate.</param>
            <returns>
            <c>true</c> if the revision ID is not empty; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method follows the same pattern as other entity validation helpers in the ADMS system,
            ensuring consistency across validation logic.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>GUID must not be Guid.Empty</item>
            <item>GUID must represent a valid identifier structure</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid = RevisionValidationHelper.IsValidRevisionId(Guid.NewGuid());  // true
            bool isInvalid = RevisionValidationHelper.IsValidRevisionId(Guid.Empty);    // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.IsValidDocumentId(System.Guid)">
            <summary>
            Determines whether the specified document ID is valid for revision association.
            A valid document ID is a non-empty GUID.
            </summary>
            <param name="documentId">The document ID to validate.</param>
            <returns>
            <c>true</c> if the document ID is not empty; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates that revisions are properly associated with documents,
            ensuring referential integrity in the document management system.
            </remarks>
            <example>
            <code>
            bool isValid = RevisionValidationHelper.IsValidDocumentId(Guid.NewGuid());  // true
            bool isInvalid = RevisionValidationHelper.IsValidDocumentId(Guid.Empty);    // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.IsValidCreationDate(System.DateTime)">
            <summary>
            Determines whether the specified creation date is valid for a revision.
            </summary>
            <param name="creationDate">The creation date to validate.</param>
            <returns>
            <c>true</c> if the creation date is valid; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method provides specialized validation for creation dates, ensuring they meet
            the same standards as general revision dates. It's an alias for IsValidDate for semantic clarity.
            </remarks>
            <example>
            <code>
            bool isValid = RevisionValidationHelper.IsValidCreationDate(DateTime.UtcNow);     // true
            bool isInvalid = RevisionValidationHelper.IsValidCreationDate(DateTime.MinValue); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.IsValidModificationDate(System.DateTime)">
            <summary>
            Determines whether the specified modification date is valid for a revision.
            </summary>
            <param name="modificationDate">The modification date to validate.</param>
            <returns>
            <c>true</c> if the modification date is valid; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method provides specialized validation for modification dates, ensuring they meet
            the same standards as general revision dates. It's an alias for IsValidDate for semantic clarity.
            </remarks>
            <example>
            <code>
            bool isValid = RevisionValidationHelper.IsValidModificationDate(DateTime.UtcNow);     // true
            bool isInvalid = RevisionValidationHelper.IsValidModificationDate(DateTime.MinValue); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.IsValidDateSequence(System.DateTime,System.DateTime)">
            <summary>
            Validates that a modification date is not before a creation date.
            </summary>
            <param name="creationDate">The creation date.</param>
            <param name="modificationDate">The modification date.</param>
            <returns>
            <c>true</c> if the modification date is valid (not before creation date); otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method enforces the business rule that modification dates must be chronologically
            after or equal to creation dates, maintaining data integrity for revision timelines.
            
            <para><strong>Business Rules:</strong></para>
            <list type="bullet">
            <item>Modification date must be >= creation date</item>
            <item>Both dates must be valid individually</item>
            <item>Maintains chronological consistency for audit trails</item>
            </list>
            </remarks>
            <example>
            <code>
            var creation = DateTime.UtcNow.AddHours(-1);
            var modification = DateTime.UtcNow;
            bool isValid = RevisionValidationHelper.IsValidDateSequence(creation, modification);    // true
            
            var invalidModification = DateTime.UtcNow.AddHours(-2);
            bool isInvalid = RevisionValidationHelper.IsValidDateSequence(creation, invalidModification); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.IsValidRevisionSequence(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Validates that a revision number is sequential within a document context.
            </summary>
            <param name="newRevisionNumber">The new revision number to validate.</param>
            <param name="existingRevisionNumbers">The collection of existing revision numbers for the document.</param>
            <returns>
            <c>true</c> if the revision number maintains proper sequence; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="existingRevisionNumbers"/> is null.</exception>
            <remarks>
            This method ensures revision numbers follow a proper sequence without gaps or duplicates,
            maintaining consistency in document version control.
            
            <para><strong>Sequencing Rules:</strong></para>
            <list type="bullet">
            <item>First revision for a document must be 1</item>
            <item>Subsequent revisions must be exactly +1 from the highest existing</item>
            <item>No gaps or duplicates allowed</item>
            <item>Maintains strict version control integrity</item>
            </list>
            </remarks>
            <example>
            <code>
            var existing = new[] { 1, 2, 3 };
            bool isValid = RevisionValidationHelper.IsValidRevisionSequence(4, existing);   // true
            bool isInvalid1 = RevisionValidationHelper.IsValidRevisionSequence(3, existing); // false (duplicate)
            bool isInvalid2 = RevisionValidationHelper.IsValidRevisionSequence(6, existing); // false (gap)
            bool isInvalid3 = RevisionValidationHelper.IsValidRevisionSequence(0, existing); // false (invalid number)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.IsValidDeletionState(System.Boolean,System.Boolean)">
            <summary>
            Validates the deletion state consistency for a revision.
            </summary>
            <param name="isDeleted">The deletion state to validate.</param>
            <param name="hasActiveReferences">Whether the revision has active references that prevent deletion.</param>
            <returns>
            <c>true</c> if the deletion state is valid; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates business rules around revision deletion, ensuring that revisions
            with active references cannot be marked as deleted to maintain referential integrity.
            
            <para><strong>Deletion Rules:</strong></para>
            <list type="bullet">
            <item>Revisions with active references cannot be deleted</item>
            <item>Non-deleted revisions can have any reference state</item>
            <item>Maintains data integrity and prevents orphaned references</item>
            </list>
            </remarks>
            <example>
            <code>
            bool canDelete = RevisionValidationHelper.IsValidDeletionState(true, false);   // true (no active references)
            bool cannotDelete = RevisionValidationHelper.IsValidDeletionState(true, true); // false (has active references)
            bool notDeleted = RevisionValidationHelper.IsValidDeletionState(false, true);  // true (not deleted)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.IsValidDateTimeSpan(System.DateTime,System.DateTime,System.Nullable{System.TimeSpan})">
            <summary>
            Validates the time span between creation and modification dates.
            </summary>
            <param name="creationDate">The creation date.</param>
            <param name="modificationDate">The modification date.</param>
            <param name="maxAllowedSpan">The maximum allowed time span (optional, defaults to system maximum).</param>
            <returns>
            <c>true</c> if the time span is valid; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method validates that the time span between creation and modification dates
            is reasonable, helping to detect data corruption or incorrect date values.
            
            <para><strong>Time Span Rules:</strong></para>
            <list type="bullet">
            <item>Modification date must be >= creation date</item>
            <item>Time span cannot exceed maximum allowed duration</item>
            <item>Helps detect data corruption and unrealistic timestamps</item>
            </list>
            </remarks>
            <example>
            <code>
            var creation = DateTime.UtcNow.AddDays(-1);
            var modification = DateTime.UtcNow;
            bool valid = RevisionValidationHelper.IsValidDateTimeSpan(creation, modification); // true
            
            var oldCreation = DateTime.UtcNow.AddYears(-60);
            bool invalid = RevisionValidationHelper.IsValidDateTimeSpan(oldCreation, modification); // false (too long)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.ValidateRevisionNumber(System.Int32,System.String)">
            <summary>
            Performs comprehensive validation of a revision number and returns detailed validation results.
            </summary>
            <param name="revisionNumber">The revision number to validate.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method validates revision numbers against all business rules including bounds checking
            and versioning standards.
            </remarks>
            <example>
            <code>
            var results = RevisionValidationHelper.ValidateRevisionNumber(0, nameof(MyDto.RevisionNumber));
            if (results.Any())
            {
                foreach (var result in results)
                {
                    Console.WriteLine($"Error: {result.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.ValidateDate(System.DateTime,System.String)">
            <summary>
            Performs comprehensive validation of a revision date.
            </summary>
            <param name="date">The date to validate.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method validates that dates are within acceptable bounds for revision operations.
            </remarks>
            <example>
            <code>
            var results = RevisionValidationHelper.ValidateDate(DateTime.MinValue, nameof(MyDto.CreationDate));
            if (results.Any())
            {
                Console.WriteLine($"Date validation failed: {string.Join(", ", results.Select(r => r.ErrorMessage))}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.ValidateDateSequence(System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            Validates revision date sequence (creation before modification).
            </summary>
            <param name="creationDate">The creation date.</param>
            <param name="modificationDate">The modification date.</param>
            <param name="creationPropertyName">Property name for creation date (for error messages). Cannot be null or whitespace.</param>
            <param name="modificationPropertyName">Property name for modification date (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when property names are null, empty, or consist only of whitespace.</exception>
            <remarks>
            This method validates the chronological relationship between creation and modification dates.
            </remarks>
            <example>
            <code>
            var results = RevisionValidationHelper.ValidateDateSequence(
                DateTime.UtcNow, DateTime.UtcNow.AddHours(-1), 
                nameof(MyDto.CreationDate), nameof(MyDto.ModificationDate));
            // Will return validation error for modification before creation
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.ValidateRevisionId(System.Guid,System.String)">
            <summary>
            Performs comprehensive validation of a revision ID.
            </summary>
            <param name="revisionId">The revision ID to validate.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method validates that revision IDs represent valid, non-empty GUIDs suitable
            for use as database identifiers.
            </remarks>
            <example>
            <code>
            var results = RevisionValidationHelper.ValidateRevisionId(Guid.Empty, nameof(MyDto.RevisionId));
            if (results.Any())
            {
                Console.WriteLine($"Revision ID validation failed: {string.Join(", ", results.Select(r => r.ErrorMessage))}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.GetNextRevisionNumber(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the next valid revision number for a document.
            </summary>
            <param name="existingRevisionNumbers">The collection of existing revision numbers for the document.</param>
            <returns>
            The next valid revision number in sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="existingRevisionNumbers"/> is null.</exception>
            <remarks>
            This method calculates the next revision number in sequence, useful for automatic
            revision numbering in creation scenarios.
            
            <para><strong>Calculation Rules:</strong></para>
            <list type="bullet">
            <item>For empty collections: returns 1 (first revision)</item>
            <item>For existing revisions: returns maximum + 1</item>
            <item>Ensures sequential numbering without gaps</item>
            </list>
            </remarks>
            <example>
            <code>
            var existing = new[] { 1, 2, 3 };
            int next = RevisionValidationHelper.GetNextRevisionNumber(existing); // 4
            
            var empty = Array.Empty&lt;int&gt;();
            int first = RevisionValidationHelper.GetNextRevisionNumber(empty);  // 1
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.IsReasonableRevisionDate(System.DateTime)">
            <summary>
            Determines if a revision date is reasonable (not too far in the past or future).
            </summary>
            <param name="date">The date to validate.</param>
            <returns>
            <c>true</c> if the date is reasonable; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method provides additional validation to detect potentially corrupted or
            incorrectly imported revision dates that might be unrealistically old or in the future.
            </remarks>
            <example>
            <code>
            bool reasonable1 = RevisionValidationHelper.IsReasonableRevisionDate(DateTime.UtcNow.AddYears(-1)); // true
            bool reasonable2 = RevisionValidationHelper.IsReasonableRevisionDate(DateTime.UtcNow);              // true
            bool unreasonable1 = RevisionValidationHelper.IsReasonableRevisionDate(new DateTime(1970, 1, 1));  // false (too old)
            bool unreasonable2 = RevisionValidationHelper.IsReasonableRevisionDate(DateTime.UtcNow.AddHours(2)); // false (future)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.NormalizeDateToUtc(System.DateTime)">
            <summary>
            Normalizes a revision date to UTC for consistent storage.
            </summary>
            <param name="date">The date to normalize.</param>
            <returns>
            The date normalized to UTC, or null if the input date is invalid.
            </returns>
            <remarks>
            This method ensures all revision dates are stored in UTC for consistency,
            while validating the date meets basic requirements.
            
            <para><strong>Normalization Process:</strong></para>
            <list type="bullet">
            <item>Validates date is within acceptable bounds</item>
            <item>Converts to UTC based on DateTimeKind</item>
            <item>Returns null for invalid dates</item>
            </list>
            </remarks>
            <example>
            <code>
            var localDate = DateTime.Now;
            DateTime? utcDate = RevisionValidationHelper.NormalizeDateToUtc(localDate);
            // Returns the date converted to UTC if valid
            
            DateTime? invalid = RevisionValidationHelper.NormalizeDateToUtc(DateTime.MinValue);
            // Returns null for invalid dates
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.SuggestRevisionNumbers(System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Gets suggested revision numbers for troubleshooting sequencing issues.
            </summary>
            <param name="attemptedNumber">The attempted revision number that failed validation.</param>
            <param name="existingNumbers">The existing revision numbers for context.</param>
            <param name="maxSuggestions">Maximum number of suggestions to return.</param>
            <returns>
            A read-only list of suggested revision numbers.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="existingNumbers"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="maxSuggestions"/> is less than 1.</exception>
            <remarks>
            This method provides helpful suggestions when revision number validation fails,
            improving user experience by offering valid alternatives.
            </remarks>
            <example>
            <code>
            var existing = new[] { 1, 2, 3 };
            var suggestions = RevisionValidationHelper.SuggestRevisionNumbers(5, existing, 3);
            // Returns suggestions like [4] (next in sequence)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.GetRevisionTemporalDiagnostics(System.DateTime,System.DateTime)">
            <summary>
            Gets validation information about a revision's temporal consistency.
            </summary>
            <param name="creationDate">The creation date.</param>
            <param name="modificationDate">The modification date.</param>
            <returns>
            A dictionary containing diagnostic information about the revision's temporal state.
            </returns>
            <remarks>
            This method provides detailed diagnostic information useful for troubleshooting
            revision validation issues and understanding temporal relationships.
            
            <para><strong>Diagnostic Information Includes:</strong></para>
            <list type="bullet">
            <item>Individual date validations</item>
            <item>Chronological sequence validation</item>
            <item>Time span calculations and analysis</item>
            <item>DateTime kind information</item>
            <item>Normalization results</item>
            </list>
            </remarks>
            <example>
            <code>
            var creation = DateTime.UtcNow.AddHours(-2);
            var modification = DateTime.UtcNow;
            var diagnostics = RevisionValidationHelper.GetRevisionTemporalDiagnostics(creation, modification);
            
            // diagnostics contains comprehensive information about date validity and relationships
            foreach (var kvp in diagnostics)
            {
                Console.WriteLine($"{kvp.Key}: {kvp.Value}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.GetValidationStatistics">
            <summary>
            Gets validation statistics for the revision validation system.
            </summary>
            <returns>
            A dictionary containing statistical information about the validation system.
            </returns>
            <remarks>
            This method provides insights into the validation system configuration,
            useful for monitoring, diagnostics, and system documentation.
            </remarks>
            <example>
            <code>
            var stats = RevisionValidationHelper.GetValidationStatistics();
            Console.WriteLine($"Min revision number: {stats["MinRevisionNumber"]}");
            Console.WriteLine($"Max revision number: {stats["MaxRevisionNumber"]}");
            Console.WriteLine($"Min allowed date: {stats["MinAllowedDate"]}");
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.RevisionValidationHelper.GenerateValidationReport(System.Int32,System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Generates a comprehensive validation report for revision data.
            </summary>
            <param name="revisionNumber">The revision number to analyze.</param>
            <param name="creationDate">The creation date to analyze.</param>
            <param name="modificationDate">The modification date to analyze.</param>
            <param name="existingNumbers">Optional existing revision numbers for context.</param>
            <returns>
            A formatted string containing detailed validation information.
            </returns>
            <remarks>
            This method provides a human-readable validation report useful for debugging
            and troubleshooting revision validation issues.
            </remarks>
            <example>
            <code>
            var existing = new[] { 1, 2, 3 };
            string report = RevisionValidationHelper.GenerateValidationReport(
                5, DateTime.UtcNow.AddHours(-1), DateTime.UtcNow, existing);
            Console.WriteLine(report);
            // Outputs detailed validation results and suggestions
            </code>
            </example>
        </member>
        <member name="T:ADMS.API.Common.BaseValidationDto">
            <summary>
            Base abstract class providing standardized validation infrastructure for ADMS DTOs.
            </summary>
            <remarks>
            This base class provides a comprehensive validation framework that standardizes validation patterns
            across all ADMS DTOs while leveraging the existing validation helpers and maintaining consistency
            with .NET 9 best practices.
            
            <para><strong>Key Features:</strong></para>
            <list type="bullet">
            <item><strong>Consistent Validation Patterns:</strong> Standardized validation approach across all DTOs</item>
            <item><strong>Performance Optimized:</strong> Uses yield return for lazy evaluation and early termination</item>
            <item><strong>Integration Ready:</strong> Works seamlessly with existing validation helpers</item>
            <item><strong>Thread Safe:</strong> All validation methods are thread-safe and stateless</item>
            <item><strong>Extensible:</strong> Allows derived classes to add custom validation logic</item>
            <item><strong>Error Context:</strong> Provides rich error context and member path information</item>
            </list>
            
            <para><strong>Validation Hierarchy:</strong></para>
            <list type="number">
            <item><strong>Data Annotations:</strong> Standard .NET validation attributes</item>
            <item><strong>Core Property Validation:</strong> Essential property validation using ADMS helpers</item>
            <item><strong>Business Rule Validation:</strong> Domain-specific business logic validation</item>
            <item><strong>Cross-Property Validation:</strong> Validation that involves multiple properties</item>
            <item><strong>Collection Validation:</strong> Validation of nested collections and complex objects</item>
            </list>
            
            <para><strong>Integration with ADMS Helpers:</strong></para>
            This class integrates seamlessly with existing ADMS validation helpers:
            <list type="bullet">
            <item>MatterValidationHelper for matter-related validation</item>
            <item>DocumentValidationHelper for document-related validation</item>
            <item>UserValidationHelper for user-related validation</item>
            <item>DtoValidationHelper for collection validation</item>
            </list>
            </remarks>
            <example>
            <code>
            // Example derived DTO
            public class MyDto : BaseValidationDto
            {
                [Required]
                public string Name { get; set; } = string.Empty;
                
                protected override IEnumerable&lt;ValidationResult&gt; ValidateCoreProperties()
                {
                    if (string.IsNullOrWhiteSpace(Name))
                        yield return CreateValidationResult("Name is required.", nameof(Name));
                }
                
                protected override IEnumerable&lt;ValidationResult&gt; ValidateBusinessRules()
                {
                    // Custom business logic validation
                    yield break;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.BaseValidationDto.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the DTO using the standardized ADMS validation hierarchy.
            </summary>
            <param name="validationContext">The validation context for the operation.</param>
            <returns>A collection of validation results indicating any validation failures.</returns>
            <remarks>
            This method implements the standardized ADMS validation pattern:
            <list type="number">
            <item>Core property validation (required fields, formats, etc.)</item>
            <item>Business rule validation (domain-specific logic)</item>
            <item>Cross-property validation (relationships between properties)</item>
            <item>Collection validation (nested objects and collections)</item>
            </list>
            
            <para><strong>Performance Notes:</strong></para>
            Uses yield return for lazy evaluation, allowing early termination on critical errors
            and reducing memory allocation for large validation sets.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.BaseValidationDto.ValidationContext">
            <summary>
            Gets the current validation context during validation operations.
            </summary>
            <remarks>
            This property is only available during validation operations and is automatically
            set and cleared by the validation framework.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.BaseValidationDto.ValidateCoreProperties">
            <summary>
            Validates core properties such as required fields, formats, and basic constraints.
            </summary>
            <returns>A collection of validation results for core property validation.</returns>
            <remarks>
            This method should validate essential properties including:
            <list type="bullet">
            <item>Required field validation</item>
            <item>Format validation (GUIDs, dates, etc.)</item>
            <item>Length constraints</item>
            <item>Range validation</item>
            <item>Pattern matching</item>
            </list>
            
            Use the existing ADMS validation helpers where possible for consistency.
            </remarks>
            <example>
            <code>
            protected override IEnumerable&lt;ValidationResult&gt; ValidateCoreProperties()
            {
                // Validate required GUID
                if (Id == Guid.Empty)
                    yield return CreateValidationResult("ID is required.", nameof(Id));
                    
                // Use ADMS helper for complex validation
                foreach (var result in MatterValidationHelper.ValidateDescription(Description, nameof(Description)))
                    yield return result;
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.BaseValidationDto.ValidateBusinessRules">
            <summary>
            Validates business rules and domain-specific logic.
            </summary>
            <returns>A collection of validation results for business rule validation.</returns>
            <remarks>
            This method should validate domain-specific business rules including:
            <list type="bullet">
            <item>State transition rules</item>
            <item>Professional practice requirements</item>
            <item>Legal compliance rules</item>
            <item>System-specific constraints</item>
            <item>Professional standards</item>
            </list>
            </remarks>
            <example>
            <code>
            protected override IEnumerable&lt;ValidationResult&gt; ValidateBusinessRules()
            {
                // Validate matter state transitions
                if (!MatterValidationHelper.IsValidStateTransition(currentArchived, currentDeleted, IsArchived, IsDeleted))
                    yield return CreateValidationResult("Invalid state transition.", nameof(IsArchived), nameof(IsDeleted));
            }
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ADMS.API.Common.BaseValidationDto.ValidateCrossPropertyRules" -->
        <member name="M:ADMS.API.Common.BaseValidationDto.ValidateCollections">
            <summary>
            Validates collections and nested objects using the DtoValidationHelper.
            </summary>
            <returns>A collection of validation results for collection validation.</returns>
            <remarks>
            This method validates collections and nested objects including:
            <list type="bullet">
            <item>Collection existence and null checking</item>
            <item>Individual item validation within collections</item>
            <item>Collection size constraints</item>
            <item>Nested object validation</item>
            <item>Hierarchical error message construction</item>
            </list>
            
            Uses DtoValidationHelper for consistent collection validation patterns.
            Override this method in derived classes that have collection properties.
            </remarks>
            <example>
            <code>
            protected override IEnumerable&lt;ValidationResult&gt; ValidateCollections()
            {
                // Validate document collection
                foreach (var result in DtoValidationHelper.ValidateCollection(Documents, nameof(Documents)))
                    yield return result;
            }
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ADMS.API.Common.BaseValidationDto.ValidateCustomRules" -->
        <member name="M:ADMS.API.Common.BaseValidationDto.CreateValidationResult(System.String,System.String[])">
            <summary>
            Creates a standardized ValidationResult with consistent formatting.
            </summary>
            <param name="errorMessage">The error message for the validation result.</param>
            <param name="memberNames">The member names associated with the validation error.</param>
            <returns>A properly formatted ValidationResult.</returns>
            <remarks>
            This helper method ensures consistent error message formatting across all ADMS DTOs
            and provides proper member name attribution for validation errors.
            </remarks>
            <example>
            <code>
            // Single property error
            yield return CreateValidationResult("Name is required.", nameof(Name));
            
            // Multiple property error
            yield return CreateValidationResult("Date range is invalid.", nameof(StartDate), nameof(EndDate));
            
            // No specific properties
            yield return CreateValidationResult("General validation error.");
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.BaseValidationDto.CreateContextualValidationResult(System.String,System.String)">
            <summary>
            Creates a contextual ValidationResult with property path information.
            </summary>
            <param name="errorMessage">The error message for the validation result.</param>
            <param name="propertyPath">The hierarchical property path (e.g., "Documents[0].FileName").</param>
            <returns>A ValidationResult with proper property path context.</returns>
            <remarks>
            This helper method is useful for nested object validation where the error location
            needs to be precisely identified in complex object hierarchies.
            </remarks>
            <example>
            <code>
            // Nested property error
            yield return CreateContextualValidationResult(
                "File name is invalid.", 
                "Documents[0].FileName");
            
            // Collection item error
            yield return CreateContextualValidationResult(
                "User name is required.", 
                $"Users[{index}].Name");
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.BaseValidationDto.ValidateGuid(System.Guid,System.String,System.Boolean)">
            <summary>
            Validates a GUID property using ADMS standards.
            </summary>
            <param name="guidValue">The GUID value to validate.</param>
            <param name="propertyName">The name of the property being validated.</param>
            <param name="allowEmpty">Whether to allow Guid.Empty values (default: false).</param>
            <returns>A collection of validation results for GUID validation.</returns>
            <remarks>
            This helper method provides consistent GUID validation across all ADMS DTOs,
            following the patterns established in the existing validation helpers.
            </remarks>
            <example>
            <code>
            protected override IEnumerable&lt;ValidationResult&gt; ValidateCoreProperties()
            {
                // Required GUID
                foreach (var result in ValidateGuid(Id, nameof(Id)))
                    yield return result;
                    
                // Optional GUID (allow empty)
                foreach (var result in ValidateGuid(ParentId, nameof(ParentId), allowEmpty: true))
                    yield return result;
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.BaseValidationDto.ValidateDate(System.Nullable{System.DateTime},System.String,System.Boolean)">
            <summary>
            Validates a date property using ADMS standards.
            </summary>
            <param name="dateValue">The date value to validate.</param>
            <param name="propertyName">The name of the property being validated.</param>
            <param name="allowNull">Whether to allow null values (default: true).</param>
            <returns>A collection of validation results for date validation.</returns>
            <remarks>
            This helper method provides consistent date validation across all ADMS DTOs,
            using the patterns established in MatterValidationHelper and other validation helpers.
            </remarks>
            <example>
            <code>
            protected override IEnumerable&lt;ValidationResult&gt; ValidateCoreProperties()
            {
                // Required date
                foreach (var result in ValidateDate(CreationDate, nameof(CreationDate), allowNull: false))
                    yield return result;
                    
                // Optional date
                foreach (var result in ValidateDate(ModifiedDate, nameof(ModifiedDate)))
                    yield return result;
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.BaseValidationDto.ValidateRequiredDate(System.DateTime,System.String)">
            <summary>
            Validates a required date property using ADMS standards.
            </summary>
            <param name="dateValue">The date value to validate.</param>
            <param name="propertyName">The name of the property being validated.</param>
            <returns>A collection of validation results for date validation.</returns>
            <remarks>
            This is a convenience overload for required DateTime properties (non-nullable).
            </remarks>
            <example>
            <code>
            protected override IEnumerable&lt;ValidationResult&gt; ValidateCoreProperties()
            {
                // Required date (non-nullable)
                foreach (var result in ValidateRequiredDate(CreationDate, nameof(CreationDate)))
                    yield return result;
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.BaseValidationDto.ValidateDateTime(System.DateTime,System.String,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Validates a DateTime property with comprehensive temporal constraints for audit trail and legal compliance scenarios.
            </summary>
            <param name="dateValue">The DateTime value to validate.</param>
            <param name="propertyName">The name of the property being validated.</param>
            <param name="allowFuture">Whether to allow future dates (default: true).</param>
            <param name="allowPast">Whether to allow past dates (default: true).</param>
            <param name="maxFutureOffset">Maximum allowed future offset from current time (default: null for no limit).</param>
            <param name="maxPastOffset">Maximum allowed past offset from current time (default: null for no limit).</param>
            <param name="allowDefault">Whether to allow default DateTime values (default: false).</param>
            <returns>A collection of validation results for DateTime validation.</returns>
            <remarks>
            This comprehensive DateTime validation method provides advanced temporal validation
            specifically designed for audit trail scenarios, legal compliance requirements,
            and professional practice standards in the ADMS system.
            
            <para><strong>Temporal Validation Features:</strong></para>
            <list type="bullet">
            <item><strong>Future Date Control:</strong> Configurable future date validation for audit trail integrity</item>
            <item><strong>Past Date Control:</strong> Configurable past date validation for reasonable temporal bounds</item>
            <item><strong>Offset Limits:</strong> Precise control over acceptable time ranges for professional standards</item>
            <item><strong>Default Value Handling:</strong> Controls whether default DateTime values are acceptable</item>
            <item><strong>Audit Trail Optimization:</strong> Optimized for audit trail timestamp validation scenarios</item>
            </list>
            
            <para><strong>Professional Standards Integration:</strong></para>
            <list type="bullet">
            <item><strong>Legal Compliance:</strong> Supports legal requirement for accurate temporal tracking</item>
            <item><strong>Audit Trail Integrity:</strong> Ensures audit timestamps maintain chronological consistency</item>
            <item><strong>Professional Practice:</strong> Aligns with professional practice standards for document management</item>
            <item><strong>System Security:</strong> Prevents temporal manipulation and ensures data integrity</item>
            </list>
            
            <para><strong>Common Usage Patterns:</strong></para>
            <list type="bullet">
            <item><strong>Audit Timestamps:</strong> allowFuture=false, allowPast=true, with reasonable past limits</item>
            <item><strong>Creation Dates:</strong> allowFuture=false, allowPast=true, maxPastOffset for reasonable history</item>
            <item><strong>Schedule Dates:</strong> allowFuture=true, allowPast=false, with appropriate future limits</item>
            <item><strong>Historical Data:</strong> allowFuture=false, allowPast=true, with extended past limits</item>
            </list>
            </remarks>
            <example>
            <code>
            protected override IEnumerable&lt;ValidationResult&gt; ValidateCoreProperties()
            {
                // Audit timestamp validation (no future, reasonable past)
                foreach (var result in ValidateDateTime(CreatedAt, nameof(CreatedAt), 
                    allowFuture: false, allowPast: true, maxPastOffset: TimeSpan.FromYears(10)))
                    yield return result;
            
                // Schedule date validation (future allowed, limited range)
                foreach (var result in ValidateDateTime(ScheduledDate, nameof(ScheduledDate), 
                    allowFuture: true, allowPast: false, maxFutureOffset: TimeSpan.FromYears(2)))
                    yield return result;
            
                // General date validation with clock skew tolerance
                foreach (var result in ValidateDateTime(ModifiedAt, nameof(ModifiedAt), 
                    allowFuture: false, allowPast: true, maxFutureOffset: TimeSpan.FromMinutes(5)))
                    yield return result;
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.BaseValidationDto.ValidateDateTime(System.Nullable{System.DateTime},System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Validates a nullable DateTime property with comprehensive temporal constraints.
            </summary>
            <param name="dateValue">The nullable DateTime value to validate.</param>
            <param name="propertyName">The name of the property being validated.</param>
            <param name="allowNull">Whether to allow null values (default: true).</param>
            <param name="allowFuture">Whether to allow future dates (default: true).</param>
            <param name="allowPast">Whether to allow past dates (default: true).</param>
            <param name="maxFutureOffset">Maximum allowed future offset from current time (default: null).</param>
            <param name="maxPastOffset">Maximum allowed past offset from current time (default: null).</param>
            <returns>A collection of validation results for nullable DateTime validation.</returns>
            <remarks>
            This overload handles nullable DateTime properties with the same comprehensive validation
            as the non-nullable version, with additional null value handling.
            </remarks>
            <example>
            <code>
            protected override IEnumerable&lt;ValidationResult&gt; ValidateCoreProperties()
            {
                // Optional audit timestamp (null allowed)
                foreach (var result in ValidateDateTime(LastModified, nameof(LastModified), 
                    allowNull: true, allowFuture: false, allowPast: true))
                    yield return result;
            
                // Required audit timestamp (null not allowed)
                foreach (var result in ValidateDateTime(CreatedAt, nameof(CreatedAt), 
                    allowNull: false, allowFuture: false, allowPast: true))
                    yield return result;
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.BaseValidationDto.ValidateString(System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Validates a string property with length and format constraints.
            </summary>
            <param name="stringValue">The string value to validate.</param>
            <param name="propertyName">The name of the property being validated.</param>
            <param name="required">Whether the string is required (default: true).</param>
            <param name="minLength">The minimum length (default: 0).</param>
            <param name="maxLength">The maximum length (default: int.MaxValue).</param>
            <param name="allowWhitespaceOnly">Whether to allow whitespace-only strings (default: false).</param>
            <returns>A collection of validation results for string validation.</returns>
            <remarks>
            This helper method provides consistent string validation across all ADMS DTOs,
            handling common string validation scenarios with professional standards.
            </remarks>
            <example>
            <code>
            protected override IEnumerable&lt;ValidationResult&gt; ValidateCoreProperties()
            {
                // Required string with length constraints
                foreach (var result in ValidateString(Name, nameof(Name), minLength: 2, maxLength: 100))
                    yield return result;
                    
                // Optional string
                foreach (var result in ValidateString(Description, nameof(Description), required: false, maxLength: 256))
                    yield return result;
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.BaseValidationDto.FormatTimeSpan(System.TimeSpan)">
            <summary>
            Formats a TimeSpan for user-friendly display in validation messages.
            </summary>
            <param name="timeSpan">The TimeSpan to format.</param>
            <returns>A user-friendly string representation of the TimeSpan.</returns>
            <remarks>
            This helper method provides consistent TimeSpan formatting for validation messages,
            making them more readable and professional.
            </remarks>
            <example>
            <code>
            // Example outputs:
            // FormatTimeSpan(TimeSpan.FromMinutes(30)) => "30 minutes"
            // FormatTimeSpan(TimeSpan.FromHours(2)) => "2 hours"
            // FormatTimeSpan(TimeSpan.FromDays(7)) => "7 days"
            // FormatTimeSpan(TimeSpan.FromDays(365)) => "1 year"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.BaseValidationDto.ValidateModel``1(``0)">
            <summary>
            Validates a DTO instance and returns detailed validation results.
            </summary>
            <typeparam name="T">The type of DTO to validate.</typeparam>
            <param name="dto">The DTO instance to validate. Can be null.</param>
            <returns>A list of validation results indicating any validation failures.</returns>
            <remarks>
            This static helper method provides a convenient way to validate DTO instances
            without requiring a ValidationContext. It performs comprehensive validation including
            both data annotations and IValidatableObject validation.
            
            This method follows the established pattern from existing ADMS DTOs while providing
            enhanced error handling and null safety.
            </remarks>
            <example>
            <code>
            var dto = new MyDto { Name = "Test" };
            var results = BaseValidationDto.ValidateModel(dto);
            
            if (results.Any())
            {
                var errorMessages = string.Join(", ", results.Select(r => r.ErrorMessage));
                throw new ValidationException($"Validation failed: {errorMessages}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.BaseValidationDto.ValidateModels``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Validates multiple DTO instances and returns aggregated validation results.
            </summary>
            <typeparam name="T">The type of DTOs to validate.</typeparam>
            <param name="dtos">The collection of DTO instances to validate. Can be null.</param>
            <returns>A dictionary containing validation results keyed by index.</returns>
            <remarks>
            This method provides bulk validation capabilities for collections of DTOs,
            useful for batch validation scenarios and collection processing.
            </remarks>
            <example>
            <code>
            var dtos = new List&lt;MyDto&gt; { dto1, dto2, dto3 };
            var results = BaseValidationDto.ValidateModels(dtos);
            
            foreach (var (index, validationResults) in results)
            {
                if (validationResults.Any())
                {
                    Console.WriteLine($"DTO {index} has validation errors:");
                    foreach (var error in validationResults)
                    {
                        Console.WriteLine($"  - {error.ErrorMessage}");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.BaseValidationDto.GetValidationSummary(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Gets a summary of validation results for logging and debugging purposes.
            </summary>
            <param name="validationResults">The validation results to summarize.</param>
            <returns>A formatted summary string of validation errors.</returns>
            <remarks>
            This utility method provides a consistent way to format validation results
            for logging, debugging, and error reporting purposes.
            </remarks>
            <example>
            <code>
            var results = ValidateModel(dto);
            if (results.Any())
            {
                var summary = GetValidationSummary(results);
                _logger.LogWarning("Validation failed: {ValidationSummary}", summary);
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.BaseValidationDto.HasValidationErrors(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Determines if validation results contain any errors.
            </summary>
            <param name="validationResults">The validation results to check.</param>
            <returns>True if there are validation errors; otherwise, false.</returns>
            <remarks>
            This utility method provides a consistent way to check validation status
            across the ADMS system.
            </remarks>
        </member>
        <member name="T:ADMS.API.Common.DocumentValidationHelper">
            <summary>
            Provides comprehensive helper methods for validating document-related data within the ADMS system.
            </summary>
            <remarks>
            This static helper class provides robust document validation functionality for the ADMS legal 
            document management system, supporting all document-related DTOs and ensuring data integrity,
            business rule compliance, and consistent validation logic across the application.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.DocumentValidationHelper.MinAllowedDocumentDate">
            <summary>
            The minimum allowed date for document operations.
            </summary>
        </member>
        <member name="F:ADMS.API.Common.DocumentValidationHelper.FutureDateToleranceMinutes">
            <summary>
            The tolerance in minutes for future dates in document-related operations.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.DocumentValidationHelper.IsValidDocumentId(System.Guid)">
            <summary>
            Determines whether the specified document ID is valid.
            </summary>
            <param name="documentId">The document ID to validate.</param>
            <returns>true if the document ID is not empty; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Common.DocumentValidationHelper.IsValidDocumentDate(System.DateTime)">
            <summary>
            Determines whether the specified date is valid for document-related operations.
            </summary>
            <param name="date">The date to validate.</param>
            <returns>true if the date is valid; otherwise, false.</returns>
        </member>
        <member name="M:ADMS.API.Common.DocumentValidationHelper.ValidateDocumentId(System.Guid,System.String)">
            <summary>
            Performs comprehensive validation of a document ID.
            </summary>
            <param name="documentId">The document ID to validate.</param>
            <param name="propertyName">The name of the property being validated.</param>
            <returns>A collection of validation results.</returns>
        </member>
        <member name="M:ADMS.API.Common.DocumentValidationHelper.ValidateDocumentDate(System.DateTime,System.String)">
            <summary>
            Performs comprehensive validation of a document date.
            </summary>
            <param name="date">The date to validate.</param>
            <param name="propertyName">The name of the property being validated.</param>
            <returns>A collection of validation results.</returns>
        </member>
        <member name="T:ADMS.API.Common.DtoValidationHelper">
            <summary>
            Provides comprehensive helper methods for validating collections of DTOs that implement <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject"/>.
            </summary>
            <remarks>
            This static helper class provides robust validation functionality for the ADMS legal document management system,
            supporting comprehensive collection validation with detailed error reporting and performance optimization.
            
            <para><strong>Key Features:</strong></para>
            <list type="bullet">
            <item>Null-safe collection validation with early termination for invalid states</item>
            <item>Index-based error reporting for precise error location identification</item>
            <item>Nested property path construction for hierarchical validation results</item>
            <item>Generic type support for compile-time type safety and reusability</item>
            <item>Performance-optimized validation with minimal allocations</item>
            <item>Integration with standard .NET validation infrastructure</item>
            </list>
            
            <para><strong>Validation Process:</strong></para>
            <list type="number">
            <item>Validates collection existence (null checking)</item>
            <item>Validates individual item existence within the collection</item>
            <item>Performs deep validation on items implementing IValidatableObject</item>
            <item>Constructs detailed error messages with property path context</item>
            <item>Returns comprehensive validation results for all discovered issues</item>
            </list>
            
            The helper follows established ADMS validation patterns and integrates seamlessly with
            the existing validation infrastructure, including centralized validation services
            and standardized error reporting mechanisms.
            
            <para><strong>Thread Safety:</strong></para>
            All methods in this class are thread-safe and can be safely used in concurrent scenarios
            without external synchronization. The class uses only immutable operations and local variables.
            
            <para><strong>Performance Considerations:</strong></para>
            The validation methods use yield return for lazy evaluation, allowing callers to stop
            enumeration early if needed and reducing memory allocation for large collections.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.DtoValidationHelper.ValidateCollection``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Validates a collection of DTOs, ensuring the collection exists and that each item is valid.
            </summary>
            <typeparam name="T">The type of items in the collection. Must be a reference type.</typeparam>
            <param name="collection">The collection to validate. Can be null.</param>
            <param name="propertyName">The name of the property representing the collection (used in error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing validation errors for the collection or its items.
            Returns an empty enumerable if all validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method performs comprehensive validation including:
            <list type="bullet">
            <item>Collection null checking with immediate error return</item>
            <item>Individual item null checking with index-specific error messages</item>
            <item>Deep validation for items implementing <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject"/></item>
            <item>Hierarchical error message construction with property path context</item>
            </list>
            
            <para><strong>Validation Order:</strong></para>
            <list type="number">
            <item>Validates collection is not null</item>
            <item>Iterates through collection items with index tracking</item>
            <item>Validates each item is not null/default</item>
            <item>Performs IValidatableObject.Validate() if item supports it</item>
            <item>Constructs detailed error messages with property paths</item>
            </list>
            
            <para><strong>Error Message Format:</strong></para>
            <list type="bullet">
            <item>Collection errors: "{propertyName} collection is required."</item>
            <item>Item null errors: "{propertyName}[{index}] is null."</item>
            <item>Validation errors: "{propertyName}[{index}]: {original error message}"</item>
            </list>
            
            <para><strong>Performance Notes:</strong></para>
            Uses yield return for lazy evaluation, allowing early termination and memory efficiency.
            Validation context is created once per item for optimal performance.
            </remarks>
            <example>
            <code>
            // Validate a collection of user DTOs
            var users = new List&lt;UserDto&gt; { new UserDto { Name = "John" }, null, new UserDto { Name = "" } };
            var results = DtoValidationHelper.ValidateCollection(users, nameof(MyDto.Users));
            
            foreach (var result in results)
            {
                Console.WriteLine($"Error: {result.ErrorMessage}");
                Console.WriteLine($"Members: {string.Join(", ", result.MemberNames)}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.DtoValidationHelper.ValidateCollection``1(System.Collections.Generic.ICollection{``0},System.String,System.ComponentModel.DataAnnotations.ValidationContext,System.Boolean)">
            <summary>
            Validates a collection of DTOs with additional validation context and custom error handling.
            </summary>
            <typeparam name="T">The type of items in the collection. Must be a reference type.</typeparam>
            <param name="collection">The collection to validate. Can be null.</param>
            <param name="propertyName">The name of the property representing the collection (used in error messages). Cannot be null or whitespace.</param>
            <param name="parentValidationContext">The parent validation context for nested validation scenarios. Cannot be null.</param>
            <param name="allowEmptyCollection">If true, allows empty collections; if false, requires at least one item.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing validation errors for the collection or its items.
            Returns an empty enumerable if all validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="parentValidationContext"/> is null.</exception>
            <remarks>
            This overload provides additional validation capabilities including:
            <list type="bullet">
            <item>Parent validation context inheritance for consistent validation state</item>
            <item>Empty collection validation control</item>
            <item>Enhanced validation context propagation</item>
            <item>Consistent validation behavior across nested object hierarchies</item>
            </list>
            
            <para><strong>Extended Validation Features:</strong></para>
            <list type="bullet">
            <item>Inherits validation context items and services from parent</item>
            <item>Optionally validates collection contains at least one item</item>
            <item>Maintains validation context consistency across object graphs</item>
            <item>Supports complex validation scenarios with shared state</item>
            </list>
            
            This method is particularly useful when validating nested object hierarchies where
            validation context needs to be preserved across multiple levels of validation.
            </remarks>
            <example>
            <code>
            // Validate nested collections with context inheritance
            public IEnumerable&lt;ValidationResult&gt; Validate(ValidationContext validationContext)
            {
                // Validate required collection with at least one item
                foreach (var result in DtoValidationHelper.ValidateCollection(
                    Documents, 
                    nameof(Documents), 
                    validationContext, 
                    allowEmptyCollection: false))
                {
                    yield return result;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.DtoValidationHelper.ValidatePropertyName(System.String,System.String)">
            <summary>
            Validates that a collection property name is valid for error reporting.
            </summary>
            <param name="propertyName">The property name to validate.</param>
            <param name="parameterName">The parameter name for exception reporting.</param>
            <exception cref="T:System.ArgumentException">Thrown when the property name is invalid.</exception>
        </member>
        <member name="T:ADMS.API.Common.FileValidationHelper">
            <summary>
            Provides comprehensive helper methods and constants for validating file names, extensions, MIME types, and file content within the ADMS system.
            </summary>
            <remarks>
            This static helper class provides enterprise-grade file validation functionality for the ADMS legal 
            document management system, supporting all document-related DTOs including DocumentDto, 
            DocumentForCreationDto, DocumentFullDto, DocumentMinimalDto, DocumentWithoutRevisionsDto, 
            and DocumentWithRevisionsDto.
            
            <para><strong>Key Features:</strong></para>
            <list type="bullet">
            <item>File name and extension validation with database constraint alignment</item>
            <item>MIME type validation for legal document formats with comprehensive type detection</item>
            <item>File content validation using magic number detection for security</item>
            <item>Checksum validation for file integrity verification using SHA256</item>
            <item>Reserved name protection for cross-platform system compatibility</item>
            <item>File size validation with configurable limits and performance considerations</item>
            <item>Thread-safe operations with high-performance frozen collections</item>
            <item>Integration with virus scanning and malware detection services</item>
            </list>
            
            <para><strong>Security Features:</strong></para>
            <list type="bullet">
            <item>File type spoofing protection through magic number validation</item>
            <item>Comprehensive malware scanning integration support</item>
            <item>Reserved filename protection against system conflicts</item>
            <item>File size limits to prevent denial-of-service attacks</item>
            <item>Content validation for data integrity and security</item>
            </list>
            
            <para><strong>Database Synchronization:</strong></para>
            All validation constraints are synchronized with the Document entity constraints:
            <list type="bullet">
            <item>FileName: MaxLength(128) - matches Document.FileName constraint</item>
            <item>Extension: MaxLength(5) - matches Document.Extension constraint</item>
            <item>FileSize: Up to 100MB with configurable limits</item>
            <item>Checksum: SHA256 format (64 hexadecimal characters)</item>
            </list>
            
            The class follows enterprise-grade security practices and is specifically designed 
            for legal document management workflows with comprehensive audit trail support.
            
            <para><strong>Thread Safety:</strong></para>
            All methods in this class are thread-safe and use immutable frozen collections for optimal
            performance in concurrent scenarios without external synchronization.
            
            <para><strong>Performance Characteristics:</strong></para>
            <list type="bullet">
            <item>FrozenSet collections for O(1) lookup performance</item>
            <item>Compiled regex patterns for optimal pattern matching</item>
            <item>Memory-efficient file processing with stream-based operations</item>
            <item>Lazy evaluation patterns for large collection processing</item>
            </list>
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.FileValidationHelper.MaxFileNameLength">
            <summary>
            The maximum allowed length for file names.
            </summary>
            <remarks>
            This value matches the MaxLength(128) constraint on the Document.FileName property 
            in the ADMS.API.Entities.Document entity to ensure consistency between validation 
            logic and database constraints.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.FileValidationHelper.MinFileNameLength">
            <summary>
            The minimum allowed length for file names (excluding extension).
            </summary>
            <remarks>
            Ensures file names are meaningful and not just single characters.
            This prevents issues with file system operations and user experience.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.FileValidationHelper.MaxExtensionLength">
            <summary>
            The maximum allowed length for file extensions.
            </summary>
            <remarks>
            This value matches the MaxLength(5) constraint on the Document.Extension property 
            in the ADMS.API.Entities.Document entity to ensure database consistency.
            Most common file extensions (.docx, .pdf, .jpeg) fit within this constraint.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.FileValidationHelper.MinExtensionLength">
            <summary>
            The minimum allowed length for file extensions (excluding the dot).
            </summary>
            <remarks>
            Ensures file extensions are meaningful (minimum 1 character after the dot).
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.FileValidationHelper.MaxFileSizeBytes">
            <summary>
            The maximum allowed file size in bytes (100 MB).
            </summary>
            <remarks>
            This limit prevents excessively large files from impacting system performance
            while accommodating typical legal document sizes. Can be adjusted based on
            system requirements and storage capacity.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.FileValidationHelper.MinFileSizeBytes">
            <summary>
            The minimum allowed file size in bytes (1 byte).
            </summary>
            <remarks>
            Prevents empty files from being uploaded to the system, which could
            indicate upload errors or malicious attempts.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.FileValidationHelper.Sha256ChecksumLength">
            <summary>
            The standard length for SHA256 checksums (64 hexadecimal characters).
            </summary>
            <remarks>
            SHA256 produces a 256-bit hash, which is represented as 64 hexadecimal characters.
            This is the standard format used throughout the ADMS system for file integrity verification.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.FileValidationHelper.MaxFileNameSuggestions">
            <summary>
            Maximum number of alternative file name suggestions to generate.
            </summary>
            <remarks>
            Limits the number of suggestions to prevent excessive processing while
            providing sufficient alternatives for user selection.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.FileValidationHelper._allowedExtensionsArray">
            <summary>
            The list of allowed file extensions for upload (all lowercase, with leading dot).
            </summary>
            <remarks>
            This list is specifically curated for legal document management, including
            common office documents, PDFs, images, and archive formats that lawyers
            and legal professionals commonly use.
            
            <para><strong>Extension Categories:</strong></para>
            <list type="bullet">
            <item><strong>Microsoft Office:</strong> Word, Excel, PowerPoint formats (legacy and modern)</item>
            <item><strong>Adobe PDF:</strong> Portable Document Format for legal documents</item>
            <item><strong>Text Formats:</strong> Plain text, markdown, and log files</item>
            <item><strong>Image Formats:</strong> Common formats for evidence and diagrams</item>
            <item><strong>Audio/Video:</strong> Formats for depositions and recorded evidence</item>
            <item><strong>Archive Formats:</strong> ZIP, 7-Zip, and RAR for document collections</item>
            </list>
            
            <para><strong>Maintenance Guidelines:</strong></para>
            When adding new extensions, ensure they are:
            <list type="number">
            <item>Lowercase with leading dot</item>
            <item>Commonly used in legal practice</item>
            <item>Have corresponding MIME type entries</item>
            <item>Are security-vetted and safe for storage</item>
            <item>Fit within the database extension length constraint (5 characters)</item>
            </list>
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.FileValidationHelper._allowedMimeTypesArray">
            <summary>
            The list of allowed MIME types for upload (all lowercase).
            </summary>
            <remarks>
            MIME types are validated to ensure file content matches the claimed file type,
            providing an additional security layer against file spoofing attacks.
            Each entry corresponds to one or more file extensions in the allowed extensions list.
            
            <para><strong>MIME Type Categories:</strong></para>
            <list type="bullet">
            <item><strong>Office Documents:</strong> Microsoft Office application types</item>
            <item><strong>Text Types:</strong> Plain text, CSV, and markup formats</item>
            <item><strong>Media Types:</strong> Image, audio, and video formats</item>
            <item><strong>Archive Types:</strong> Compressed file formats</item>
            <item><strong>Email Types:</strong> Email message and container formats</item>
            </list>
            
            <para><strong>Security Considerations:</strong></para>
            All MIME types in this list have been security-reviewed and are considered
            safe for document management systems when combined with virus scanning.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.FileValidationHelper._reservedFileNamesArray">
            <summary>
            List of reserved file names that cannot be used (Windows system reserved names).
            </summary>
            <remarks>
            These names are reserved by Windows and other operating systems and cannot be used
            as file names to prevent system conflicts and compatibility issues.
            
            <para><strong>Reserved Categories:</strong></para>
            <list type="bullet">
            <item><strong>Device Names:</strong> CON, PRN, AUX, NUL</item>
            <item><strong>Serial Ports:</strong> COM1-COM9</item>
            <item><strong>Parallel Ports:</strong> LPT1-LPT9</item>
            <item><strong>System Files:</strong> Windows system file names</item>
            </list>
            
            This list ensures cross-platform compatibility and prevents issues when
            files are accessed from different operating systems.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.FileValidationHelper._allowedExtensionsSet">
            <summary>
            High-performance frozen set of allowed extensions for O(1) lookup performance.
            </summary>
            <remarks>
            Uses FrozenSet for optimal read performance in validation scenarios.
            Thread-safe and immutable for concurrent access without locking.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.FileValidationHelper._allowedMimeTypesSet">
            <summary>
            High-performance frozen set of allowed MIME types for O(1) lookup performance.
            </summary>
            <remarks>
            Uses FrozenSet for optimal read performance in validation scenarios.
            Thread-safe and immutable for concurrent access without locking.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.FileValidationHelper._reservedFileNamesSet">
            <summary>
            High-performance frozen set of reserved file names for O(1) lookup performance.
            </summary>
            <remarks>
            Uses FrozenSet for optimal read performance in validation scenarios.
            Case-insensitive comparison for cross-platform compatibility.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.FileValidationHelper.AllowedExtensions">
            <summary>
            Gets the read-only list of allowed file extensions.
            All values are lowercase with leading dots.
            </summary>
            <remarks>
            Returns an immutable view of the allowed extensions for external consumption.
            This property provides thread-safe access to the extensions list.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.FileValidationHelper.AllowedMimeTypes">
            <summary>
            Gets the read-only list of allowed MIME types.
            All values are lowercase.
            </summary>
            <remarks>
            Returns an immutable view of the allowed MIME types for external consumption.
            This property provides thread-safe access to the MIME types list.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.FileValidationHelper.ReservedFileNames">
            <summary>
            Gets the read-only list of reserved file names.
            All values are uppercase for consistency.
            </summary>
            <remarks>
            Returns an immutable view of the reserved file names for external consumption.
            This property provides thread-safe access to the reserved names list.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.FileValidationHelper.AllowedExtensionsList">
            <summary>
            Gets the list of allowed file extensions as a comma-separated string (without leading dots).
            </summary>
            <value>
            A comma-separated string of all allowed file extensions.
            </value>
            <remarks>
            This property is useful for generating error messages that list all valid options,
            helping users understand what file types are acceptable.
            Extensions are returned without leading dots for better readability.
            </remarks>
            <example>
            <code>
            string extensions = FileValidationHelper.AllowedExtensionsList;
            // Returns: "doc, docx, pdf, txt, jpg, mp4, zip, ..."
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Common.FileValidationHelper.AllowedMimeTypesList">
            <summary>
            Gets the list of allowed MIME types as a comma-separated string.
            </summary>
            <value>
            A comma-separated string of all allowed MIME types.
            </value>
            <remarks>
            This property provides a comprehensive list of supported MIME types for documentation
            and error message purposes.
            </remarks>
            <example>
            <code>
            string mimeTypes = FileValidationHelper.AllowedMimeTypesList;
            // Returns: "application/pdf, application/msword, image/jpeg, ..."
            </code>
            </example>
        </member>
        <member name="P:ADMS.API.Common.FileValidationHelper.ReservedFileNamesList">
            <summary>
            Gets the list of reserved file names as a comma-separated string.
            </summary>
            <value>
            A comma-separated string of all reserved file names.
            </value>
            <remarks>
            This property provides a list of names that cannot be used as file names
            for error message and documentation purposes.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.IsExtensionAllowed(System.String)">
            <summary>
            Checks if the file extension is allowed.
            </summary>
            <param name="extension">The file extension to check (with or without leading dot).</param>
            <returns><c>true</c> if the extension is allowed; otherwise, <c>false</c>.</returns>
            <remarks>
            This method normalizes the extension format and performs a case-insensitive comparison
            against the allowed extensions list using high-performance frozen set lookup.
            
            <para><strong>Normalization Rules:</strong></para>
            <list type="bullet">
            <item>Null or whitespace extensions return false</item>
            <item>Extensions are converted to lowercase</item>
            <item>Leading dot is added if missing</item>
            <item>Trailing whitespace is trimmed</item>
            </list>
            
            <para><strong>Performance:</strong></para>
            Uses FrozenSet for O(1) average lookup performance, optimized for high-frequency validation.
            </remarks>
            <example>
            <code>
            bool isValid1 = FileValidationHelper.IsExtensionAllowed(".pdf");     // true
            bool isValid2 = FileValidationHelper.IsExtensionAllowed("pdf");      // true (normalized)
            bool isValid3 = FileValidationHelper.IsExtensionAllowed(".PDF");     // true (case insensitive)
            bool isInvalid = FileValidationHelper.IsExtensionAllowed(".exe");    // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.IsMimeTypeAllowed(System.String)">
            <summary>
            Checks if the MIME type is allowed.
            </summary>
            <param name="mimeType">The MIME type to check.</param>
            <returns><c>true</c> if the MIME type is allowed; otherwise, <c>false</c>.</returns>
            <remarks>
            This method performs a case-insensitive comparison against the allowed MIME types list
            and validates the basic format of the MIME type using high-performance frozen set lookup.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Null or whitespace MIME types return false</item>
            <item>MIME types are converted to lowercase</item>
            <item>Basic format validation (type/subtype)</item>
            <item>Must match exactly one of the predefined allowed MIME types</item>
            </list>
            
            <para><strong>Performance:</strong></para>
            Uses FrozenSet for O(1) average lookup performance with format pre-validation.
            </remarks>
            <example>
            <code>
            bool isValid1 = FileValidationHelper.IsMimeTypeAllowed("application/pdf");           // true
            bool isValid2 = FileValidationHelper.IsMimeTypeAllowed("APPLICATION/PDF");           // true (case insensitive)
            bool isInvalid = FileValidationHelper.IsMimeTypeAllowed("application/x-executable"); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.IsFileNameValid(System.String)">
            <summary>
            Validates if the file name is valid (does not contain invalid characters and meets length requirements).
            </summary>
            <param name="fileName">The file name to validate.</param>
            <returns><c>true</c> if the file name is valid; otherwise, <c>false</c>.</returns>
            <remarks>
            This method checks for invalid file name characters, length constraints, and ensures
            the file name is not empty or whitespace-only.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Must not be null, empty, or whitespace-only</item>
            <item>Must be between {MinFileNameLength} and {MaxFileNameLength} characters</item>
            <item>Must not contain invalid file name characters</item>
            <item>Must not contain problematic characters (&lt;, &gt;, :, ", |, ?, *)</item>
            </list>
            
            <para><strong>Security Considerations:</strong></para>
            This validation helps prevent path traversal attacks and ensures file names
            are safe for storage across different file systems.
            </remarks>
            <example>
            <code>
            bool isValid1 = FileValidationHelper.IsFileNameValid("document.pdf");       // true
            bool isValid2 = FileValidationHelper.IsFileNameValid("My Document.docx");   // true
            bool isInvalid1 = FileValidationHelper.IsFileNameValid("doc|ument.pdf");    // false (invalid character)
            bool isInvalid2 = FileValidationHelper.IsFileNameValid("");                 // false (empty)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.IsReservedFileName(System.String)">
            <summary>
            Checks if the provided file name (without path) is a reserved system name.
            </summary>
            <param name="fileName">The file name to check (with or without extension).</param>
            <returns><c>true</c> if the file name is reserved; otherwise, <c>false</c>.</returns>
            <remarks>
            Reserved file names include Windows device names and system reserved names that
            cannot be used as regular file names due to operating system restrictions.
            
            <para><strong>Validation Process:</strong></para>
            <list type="bullet">
            <item>Extracts base file name (without extension)</item>
            <item>Performs case-insensitive comparison with reserved names</item>
            <item>Uses high-performance frozen set lookup</item>
            </list>
            
            <para><strong>Cross-Platform Compatibility:</strong></para>
            This check ensures files will be accessible across different operating systems
            and prevents conflicts with system device names.
            </remarks>
            <example>
            <code>
            bool isReserved1 = FileValidationHelper.IsReservedFileName("CON");        // true
            bool isReserved2 = FileValidationHelper.IsReservedFileName("CON.txt");    // true
            bool isReserved3 = FileValidationHelper.IsReservedFileName("COM1.pdf");   // true
            bool isNotReserved = FileValidationHelper.IsReservedFileName("document"); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.IsFileSizeValid(System.Int64)">
            <summary>
            Validates file size against configured limits.
            </summary>
            <param name="fileSize">The file size in bytes.</param>
            <returns><c>true</c> if the file size is within allowed limits; otherwise, <c>false</c>.</returns>
            <remarks>
            This method ensures file sizes are within reasonable limits to prevent system
            performance issues, storage concerns, and potential denial-of-service attacks.
            
            <para><strong>Size Limits:</strong></para>
            <list type="bullet">
            <item>Minimum: {MinFileSizeBytes:N0} byte (prevents empty files)</item>
            <item>Maximum: {MaxFileSizeBytes:N0} bytes ({MaxFileSizeBytes / (1024 * 1024)} MB)</item>
            </list>
            
            <para><strong>Security Considerations:</strong></para>
            Size limits help prevent resource exhaustion attacks and ensure the system
            remains responsive under normal operating conditions.
            </remarks>
            <example>
            <code>
            bool isValid1 = FileValidationHelper.IsFileSizeValid(1024);              // true (1 KB)
            bool isValid2 = FileValidationHelper.IsFileSizeValid(50 * 1024 * 1024);  // true (50 MB)
            bool isInvalid1 = FileValidationHelper.IsFileSizeValid(0);               // false (empty file)
            bool isInvalid2 = FileValidationHelper.IsFileSizeValid(200 * 1024 * 1024); // false (too large)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.IsValidChecksum(System.String)">
            <summary>
            Validates a SHA256 checksum format.
            </summary>
            <param name="checksum">The checksum to validate.</param>
            <returns><c>true</c> if the checksum format is valid; otherwise, <c>false</c>.</returns>
            <remarks>
            This method validates that the checksum is exactly 64 hexadecimal characters,
            which is the standard format for SHA256 hash values used throughout the ADMS system.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Must be exactly {Sha256ChecksumLength} characters long</item>
            <item>Must contain only hexadecimal characters (0-9, A-F, a-f)</item>
            <item>Must not be null, empty, or whitespace-only</item>
            </list>
            
            <para><strong>Performance:</strong></para>
            Uses compiled regex pattern for optimal validation performance.
            </remarks>
            <example>
            <code>
            bool isValid = FileValidationHelper.IsValidChecksum("a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456"); // true
            bool isInvalid1 = FileValidationHelper.IsValidChecksum("invalid");        // false (not hex)
            bool isInvalid2 = FileValidationHelper.IsValidChecksum("a1b2c3");         // false (too short)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.IsValidFileType(System.Byte[],System.String@,System.String@,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Detects the MIME type and extension of a file based on its content (magic number).
            Optionally logs warnings or errors if detection fails.
            </summary>
            <param name="fileBytes">The file bytes to analyze.</param>
            <param name="detectedMimeType">The detected MIME type (output).</param>
            <param name="detectedExtension">The detected file extension (output, with leading dot).</param>
            <param name="logger">Optional logger for warnings/errors.</param>
            <returns><c>true</c> if the file type is recognized and allowed; otherwise, <c>false</c>.</returns>
            <remarks>
            This method uses file signature detection (magic numbers) to identify file types,
            providing security against file type spoofing attacks. It's more reliable than
            relying solely on file extensions or MIME types provided by clients.
            
            <para><strong>Detection Process:</strong></para>
            <list type="number">
            <item>Validates input parameters</item>
            <item>Reads file signature (magic numbers) from beginning of file</item>
            <item>Matches against known file type signatures</item>
            <item>Performs special handling for complex formats (Office files)</item>
            <item>Validates detected type against allowed types</item>
            </list>
            
            <para><strong>Security Benefits:</strong></para>
            <list type="bullet">
            <item>Prevents file type spoofing attacks</item>
            <item>Validates actual file content vs claimed type</item>
            <item>Detects potentially malicious files with misleading extensions</item>
            </list>
            
            <para><strong>Supported File Types:</strong></para>
            The method can detect common legal document formats including PDF, Office documents,
            images, audio/video files, and archive formats through their unique signatures.
            </remarks>
            <example>
            <code>
            byte[] pdfBytes = File.ReadAllBytes("document.pdf");
            bool isValid = FileValidationHelper.IsValidFileType(pdfBytes, out string mimeType, out string extension);
            // mimeType: "application/pdf", extension: ".pdf", isValid: true
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.ValidateFileIntegrity(System.Byte[],System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Validates file content integrity by comparing provided checksum with calculated checksum.
            </summary>
            <param name="fileBytes">The file bytes to validate.</param>
            <param name="providedChecksum">The checksum provided by the client.</param>
            <param name="logger">Optional logger for validation results.</param>
            <returns><c>true</c> if the checksums match; otherwise, <c>false</c>.</returns>
            <remarks>
            This method calculates the SHA256 hash of the file content and compares it with
            the provided checksum to ensure file integrity and detect tampering.
            
            <para><strong>Validation Process:</strong></para>
            <list type="number">
            <item>Validates input parameters (file bytes and checksum format)</item>
            <item>Calculates SHA256 hash of file content</item>
            <item>Performs case-insensitive comparison with provided checksum</item>
            <item>Logs results for audit and debugging purposes</item>
            </list>
            
            <para><strong>Security Benefits:</strong></para>
            <list type="bullet">
            <item>Detects file corruption during transmission</item>
            <item>Prevents tampering with file content</item>
            <item>Ensures data integrity throughout the system</item>
            <item>Provides audit trail for file validation</item>
            </list>
            </remarks>
            <example>
            <code>
            byte[] fileBytes = File.ReadAllBytes("document.pdf");
            string expectedChecksum = "a1b2c3d4..."; // 64-character hex string
            bool isIntact = FileValidationHelper.ValidateFileIntegrity(fileBytes, expectedChecksum);
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.CalculateFileChecksum(System.Byte[])">
            <summary>
            Calculates the SHA256 checksum of file bytes.
            </summary>
            <param name="fileBytes">The file bytes to hash.</param>
            <returns>The SHA256 checksum as a lowercase hexadecimal string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="fileBytes"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="fileBytes"/> is empty.</exception>
            <remarks>
            This method provides a secure hash calculation using the SHA256 algorithm,
            which is the standard for file integrity verification in the ADMS system.
            
            <para><strong>Security Features:</strong></para>
            <list type="bullet">
            <item>Uses SHA256 algorithm for cryptographic strength</item>
            <item>Returns lowercase hexadecimal for consistency</item>
            <item>Validates input to prevent calculation errors</item>
            </list>
            
            <para><strong>Performance:</strong></para>
            Uses the static SHA256.HashData method for optimal performance
            without creating unnecessary object instances.
            </remarks>
            <example>
            <code>
            byte[] fileBytes = File.ReadAllBytes("document.pdf");
            string checksum = FileValidationHelper.CalculateFileChecksum(fileBytes);
            // Returns: "a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.ValidateFile(System.String,System.String,System.Int64,System.String,System.String,System.Byte[],Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Performs comprehensive validation of a file including name, extension, size, content, and integrity.
            </summary>
            <param name="fileName">The file name to validate.</param>
            <param name="extension">The file extension to validate.</param>
            <param name="fileSize">The file size in bytes.</param>
            <param name="mimeType">The MIME type to validate.</param>
            <param name="checksum">The file checksum to validate.</param>
            <param name="fileBytes">Optional file bytes for content validation.</param>
            <param name="logger">Optional logger for detailed validation results.</param>
            <returns>A <see cref="T:ADMS.API.Common.FileValidationResult"/> containing comprehensive validation details.</returns>
            <remarks>
            This method provides complete file validation suitable for document upload scenarios,
            combining all individual validation checks into a single comprehensive assessment.
            
            <para><strong>Validation Categories:</strong></para>
            <list type="bullet">
            <item><strong>Basic Validation:</strong> File name, extension, size, MIME type format</item>
            <item><strong>Security Validation:</strong> Reserved names, allowed types, content validation</item>
            <item><strong>Integrity Validation:</strong> Checksum verification, size consistency</item>
            <item><strong>Content Validation:</strong> File type detection, spoofing protection</item>
            </list>
            
            <para><strong>Result Details:</strong></para>
            Returns a comprehensive result object containing:
            <list type="bullet">
            <item>Overall validation status (IsValid)</item>
            <item>Primary error message for user display</item>
            <item>Detailed list of validation errors</item>
            <item>List of warnings that don't prevent validity</item>
            <item>Validated file metadata for storage</item>
            </list>
            </remarks>
            <example>
            <code>
            byte[] fileBytes = File.ReadAllBytes("document.pdf");
            var result = FileValidationHelper.ValidateFile(
                "document.pdf", ".pdf", fileBytes.Length, "application/pdf", 
                "a1b2c3...", fileBytes);
            
            if (result.IsValid)
            {
                Console.WriteLine("File validation passed");
            }
            else
            {
                Console.WriteLine($"Validation failed: {result.ErrorMessage}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.ValidateFileName(System.String,System.String)">
            <summary>
            Validates file name according to all file name rules.
            </summary>
            <param name="fileName">The file name to validate.</param>
            <param name="propertyName">The name of the property being validated (for error messages).</param>
            <returns>An enumerable of validation results.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method performs comprehensive file name validation including:
            <list type="bullet">
            <item>Null/empty validation</item>
            <item>Length constraints validation</item>
            <item>Invalid character validation</item>
            <item>Reserved name validation</item>
            </list>
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.ValidateExtension(System.String,System.String)">
            <summary>
            Validates file extension according to all extension rules.
            </summary>
            <param name="extension">The extension to validate.</param>
            <param name="propertyName">The name of the property being validated (for error messages).</param>
            <returns>An enumerable of validation results.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.NormalizeExtension(System.String)">
            <summary>
            Normalizes a file extension to standard format (lowercase with leading dot).
            </summary>
            <param name="extension">The extension to normalize.</param>
            <returns>The normalized extension, or null if invalid.</returns>
            <remarks>
            This method ensures consistent extension format for comparison and storage.
            
            <para><strong>Normalization Rules:</strong></para>
            <list type="bullet">
            <item>Trims leading and trailing whitespace</item>
            <item>Converts to lowercase</item>
            <item>Adds leading dot if missing</item>
            <item>Returns null for empty or invalid extensions</item>
            </list>
            </remarks>
            <example>
            <code>
            string? normalized1 = FileValidationHelper.NormalizeExtension("PDF");   // ".pdf"
            string? normalized2 = FileValidationHelper.NormalizeExtension(".DOC");  // ".doc"
            string? normalized3 = FileValidationHelper.NormalizeExtension("txt");   // ".txt"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.NormalizeMimeType(System.String)">
            <summary>
            Normalizes a MIME type to standard format (lowercase).
            </summary>
            <param name="mimeType">The MIME type to normalize.</param>
            <returns>The normalized MIME type, or null if invalid.</returns>
            <remarks>
            This method ensures consistent MIME type format for comparison and storage.
            
            <para><strong>Normalization Rules:</strong></para>
            <list type="bullet">
            <item>Trims leading and trailing whitespace</item>
            <item>Converts to lowercase</item>
            <item>Validates basic MIME type format (type/subtype)</item>
            <item>Returns null for empty or invalid MIME types</item>
            </list>
            </remarks>
            <example>
            <code>
            string? normalized1 = FileValidationHelper.NormalizeMimeType("APPLICATION/PDF");  // "application/pdf"
            string? normalized2 = FileValidationHelper.NormalizeMimeType("text/PLAIN");       // "text/plain"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.ExtractBaseFileName(System.String)">
            <summary>
            Extracts the base file name without extension.
            </summary>
            <param name="fileName">The full file name.</param>
            <returns>The base name without extension.</returns>
            <remarks>
            This method is used for reserved name checking and file name analysis.
            Handles edge cases like files with no extension or multiple dots.
            </remarks>
            <example>
            <code>
            string baseName1 = FileValidationHelper.ExtractBaseFileName("document.pdf");  // "document"
            string baseName2 = FileValidationHelper.ExtractBaseFileName("CON.txt");       // "CON"
            string baseName3 = FileValidationHelper.ExtractBaseFileName("README");        // "README"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.SuggestAlternativeFileNames(System.String,System.Int32)">
            <summary>
            Suggests alternative file names if the provided name is not valid.
            </summary>
            <param name="attemptedFileName">The attempted file name.</param>
            <param name="maxSuggestions">Maximum number of suggestions to return.</param>
            <returns>A list of suggested alternative file names.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="maxSuggestions"/> is less than 1.</exception>
            <remarks>
            This method provides user-friendly suggestions when a file name validation fails,
            helping users understand how to correct naming issues.
            
            <para><strong>Suggestion Strategies:</strong></para>
            <list type="bullet">
            <item>Clean invalid characters from the original name</item>
            <item>Add prefixes/suffixes to avoid reserved names</item>
            <item>Generate timestamp-based alternatives</item>
            <item>Create GUID-based unique names as fallback</item>
            </list>
            </remarks>
            <example>
            <code>
            var suggestions = FileValidationHelper.SuggestAlternativeFileNames("CON.pdf", 3);
            // Returns: ["CON_File.pdf", "Legal_CON.pdf", "Doc_CON.pdf"]
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.ValidateFileName(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Validates file name and adds errors to the error list.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.ValidateExtension(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Validates extension and adds errors to the error list.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.ValidateFileSize(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            Validates file size against configured limits.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.ValidateMimeType(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Validates MIME type and adds errors to the error list.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.ValidateChecksumFormat(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Validates checksum format and adds errors to the error list.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.ValidateFileContent(System.Byte[],System.String,System.String,System.String,System.Int64,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Validates file content including type detection and integrity checks.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.CleanFileName(System.String)">
            <summary>
            Cleans invalid characters from a file name.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.GenerateReservedNameSuggestions(System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Generates suggestions for reserved file names.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.GenerateGenericSuggestions(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Generates generic file name suggestions.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.GenerateTimestampSuggestions(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Generates timestamp-based file name suggestions.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.GenerateUniqueSuggestions(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Generates unique file name suggestions using GUIDs.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.FormatFileSize(System.Int64)">
            <summary>
            Formats file size in human-readable format with appropriate units.
            </summary>
            <param name="bytes">The size in bytes.</param>
            <returns>A human-readable string representation of the file size.</returns>
            <remarks>
            Converts byte values to appropriate units (B, KB, MB, GB, TB) for better readability
            in user interfaces and error messages.
            
            <para><strong>Unit Conversion:</strong></para>
            <list type="bullet">
            <item>Bytes: Displayed as whole numbers (e.g., "500 B")</item>
            <item>Kilobytes and above: Displayed with 2 decimal places (e.g., "1.46 MB")</item>
            <item>Uses binary units (1024 bytes = 1 KB)</item>
            </list>
            </remarks>
            <example>
            <code>
            string size1 = FileValidationHelper.FormatFileSize(1024);      // "1.00 KB"
            string size2 = FileValidationHelper.FormatFileSize(1536000);   // "1.46 MB"
            string size3 = FileValidationHelper.FormatFileSize(500);       // "500 B"
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.ContainsProblematicCharacters(System.String)">
            <summary>
            Checks if a string contains problematic characters that may cause file system issues.
            </summary>
            <param name="input">The string to check.</param>
            <returns><c>true</c> if the string contains problematic characters; otherwise, <c>false</c>.</returns>
            <remarks>
            This method checks for characters that, while not necessarily invalid for file names,
            can cause issues across different file systems or applications.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.GetFileSignatures">
            <summary>
            Gets an immutable list of file signatures used for file type detection.
            </summary>
            <returns>An immutable collection of file signature definitions.</returns>
            <remarks>
            File signatures (magic numbers) are unique byte sequences at the beginning of files
            that identify the file format. This method provides signatures for common legal document
            formats including Office documents, PDFs, images, and archive formats.
            
            <para><strong>Supported File Types:</strong></para>
            <list type="bullet">
            <item><strong>Documents:</strong> PDF, Microsoft Office formats</item>
            <item><strong>Images:</strong> JPEG, PNG, GIF, BMP, TIFF</item>
            <item><strong>Audio:</strong> MP3, WAV</item>
            <item><strong>Video:</strong> MP4</item>
            <item><strong>Archives:</strong> ZIP, RAR, 7-Zip</item>
            </list>
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.IsOfficeFile(System.String,System.Byte[])">
            <summary>
            Determines if a file is a ZIP-based Office file that requires special detection.
            </summary>
            <param name="extension">The detected extension.</param>
            <param name="fileBytes">The file bytes.</param>
            <returns><c>true</c> if the file is an Office file requiring special handling; otherwise, <c>false</c>.</returns>
            <remarks>
            Modern Microsoft Office files (.docx, .xlsx, .pptx) are ZIP archives containing XML files.
            This method identifies such files for specialized processing to determine the specific Office format.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.DetectOfficeFileType(System.Byte[],Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Detects specific Office file type from ZIP-based Office documents.
            </summary>
            <param name="fileBytes">The file bytes to analyze.</param>
            <param name="logger">Optional logger for diagnostic information.</param>
            <returns>A tuple containing the detected MIME type and extension, or null values if detection fails.</returns>
            <remarks>
            This method analyzes ZIP-based Office files to determine their specific format.
            In a production implementation, this would parse the ZIP structure to examine
            the [Content_Types].xml file or specific directory structures.
            
            <para><strong>Current Implementation:</strong></para>
            This is a simplified implementation that defaults to Word document format.
            A complete implementation would:
            <list type="bullet">
            <item>Parse the ZIP archive structure</item>
            <item>Examine [Content_Types].xml for format identification</item>
            <item>Check for specific directories (word/, xl/, ppt/)</item>
            <item>Validate XML schema references</item>
            </list>
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.Sha256ChecksumRegex">
            <remarks>
            Pattern:<br/>
            <code>^[A-Fa-f0-9]{64}$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9A-Fa-f] exactly 64 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.MimeTypeFormatRegex">
            <remarks>
            Pattern:<br/>
            <code>^[\\w\\.\\-]+\\/[\\w\\.\\-\\+]+$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [-.\w] atomically at least once.<br/>
            ○ Match '/'.<br/>
            ○ Match a character in the set [+-.\w] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.ExtensionFormatRegex">
            <remarks>
            Pattern:<br/>
            <code>^\\.([a-zA-Z0-9]{1,10})$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '.'.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [0-9A-Za-z] atomically at least 1 and at most 10 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:ADMS.API.Common.FileValidationHelper.FileSignature">
            <summary>
            Represents a file signature (magic number) for file type detection.
            </summary>
            <param name="magicBytes">The magic bytes that identify the file type.</param>
            <param name="mimeType">The MIME type associated with this signature.</param>
            <param name="extension">The file extension associated with this signature.</param>
            <remarks>
            File signatures are unique byte sequences found at the beginning of files that
            identify their format. This record provides a type-safe way to define and
            work with file signatures for content validation.
            
            <para><strong>Usage:</strong></para>
            File signatures are used to detect file types based on actual content rather than
            relying on file extensions, which can be easily spoofed or incorrect.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.FileSignature.#ctor(System.Byte[],System.String,System.String)">
            <summary>
            Represents a file signature (magic number) for file type detection.
            </summary>
            <param name="magicBytes">The magic bytes that identify the file type.</param>
            <param name="mimeType">The MIME type associated with this signature.</param>
            <param name="extension">The file extension associated with this signature.</param>
            <remarks>
            File signatures are unique byte sequences found at the beginning of files that
            identify their format. This record provides a type-safe way to define and
            work with file signatures for content validation.
            
            <para><strong>Usage:</strong></para>
            File signatures are used to detect file types based on actual content rather than
            relying on file extensions, which can be easily spoofed or incorrect.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.FileValidationHelper.FileSignature.MagicBytes">
            <summary>
            Gets the magic bytes that identify this file type.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.FileValidationHelper.FileSignature.MimeType">
            <summary>
            Gets the MIME type associated with this file signature.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.FileValidationHelper.FileSignature.Extension">
            <summary>
            Gets the file extension associated with this file signature.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.FileValidationHelper.FileSignature.Matches(System.ReadOnlySpan{System.Byte})">
            <summary>
            Determines whether the specified byte array starts with this file signature.
            </summary>
            <param name="fileBytes">The file bytes to check.</param>
            <returns><c>true</c> if the file bytes start with this signature; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ADMS.API.Common.FileValidationResult">
            <summary>
            Represents the result of comprehensive file validation operations.
            </summary>
            <param name="IsValid">Whether the file passed all validation checks.</param>
            <param name="ErrorMessage">The primary error message if validation failed.</param>
            <param name="ValidationErrors">Detailed list of validation errors.</param>
            <param name="Warnings">List of validation warnings that don't prevent validity.</param>
            <param name="FileName">The validated file name.</param>
            <param name="Extension">The validated file extension.</param>
            <param name="FileSize">The validated file size in bytes.</param>
            <param name="MimeType">The validated MIME type.</param>
            <param name="Checksum">The validated checksum.</param>
            <remarks>
            This record provides a comprehensive result object for file validation operations,
            including both success/failure status and detailed diagnostic information.
            
            <para><strong>Usage Patterns:</strong></para>
            <list type="bullet">
            <item><strong>Success Check:</strong> Use IsValid property for basic validation status</item>
            <item><strong>User Display:</strong> Use ErrorMessage for primary error display</item>
            <item><strong>Detailed Analysis:</strong> Use ValidationErrors for comprehensive error listing</item>
            <item><strong>User Feedback:</strong> Use Warnings for non-critical issues</item>
            <item><strong>Storage:</strong> Use validated properties for safe data storage</item>
            </list>
            
            <para><strong>Immutability:</strong></para>
            This record is immutable, ensuring thread safety and preventing accidental modification
            of validation results after creation.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.FileValidationResult.#ctor(System.Boolean,System.String,System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{System.String},System.String,System.String,System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Represents the result of comprehensive file validation operations.
            </summary>
            <param name="IsValid">Whether the file passed all validation checks.</param>
            <param name="ErrorMessage">The primary error message if validation failed.</param>
            <param name="ValidationErrors">Detailed list of validation errors.</param>
            <param name="Warnings">List of validation warnings that don't prevent validity.</param>
            <param name="FileName">The validated file name.</param>
            <param name="Extension">The validated file extension.</param>
            <param name="FileSize">The validated file size in bytes.</param>
            <param name="MimeType">The validated MIME type.</param>
            <param name="Checksum">The validated checksum.</param>
            <remarks>
            This record provides a comprehensive result object for file validation operations,
            including both success/failure status and detailed diagnostic information.
            
            <para><strong>Usage Patterns:</strong></para>
            <list type="bullet">
            <item><strong>Success Check:</strong> Use IsValid property for basic validation status</item>
            <item><strong>User Display:</strong> Use ErrorMessage for primary error display</item>
            <item><strong>Detailed Analysis:</strong> Use ValidationErrors for comprehensive error listing</item>
            <item><strong>User Feedback:</strong> Use Warnings for non-critical issues</item>
            <item><strong>Storage:</strong> Use validated properties for safe data storage</item>
            </list>
            
            <para><strong>Immutability:</strong></para>
            This record is immutable, ensuring thread safety and preventing accidental modification
            of validation results after creation.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.FileValidationResult.FileName">
            <summary>The validated file name.</summary>
        </member>
        <member name="P:ADMS.API.Common.FileValidationResult.Extension">
            <summary>The validated file extension.</summary>
        </member>
        <member name="P:ADMS.API.Common.FileValidationResult.FileSize">
            <summary>The validated file size in bytes.</summary>
        </member>
        <member name="P:ADMS.API.Common.FileValidationResult.MimeType">
            <summary>The validated MIME type.</summary>
        </member>
        <member name="P:ADMS.API.Common.FileValidationResult.Checksum">
            <summary>The validated checksum.</summary>
        </member>
        <member name="P:ADMS.API.Common.FileValidationResult.IsValid">
            <summary>
            Gets a value indicating whether the validation passed without any errors.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.FileValidationResult.ErrorMessage">
            <summary>
            Gets the primary error message suitable for user display.
            </summary>
            <remarks>
            This message provides a concise summary of validation failures.
            For detailed error information, use the ValidationErrors collection.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.FileValidationResult.ValidationErrors">
            <summary>
            Gets the detailed list of validation errors.
            </summary>
            <remarks>
            This collection contains all validation errors discovered during the validation process.
            Each error provides specific information about what validation rule was violated.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.FileValidationResult.Warnings">
            <summary>
            Gets the list of validation warnings that don't prevent validity.
            </summary>
            <remarks>
            Warnings indicate potential issues that don't make the file invalid but may
            require attention, such as type mismatches or unusual characteristics.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.FileValidationResult.ErrorCount">
            <summary>
            Gets the count of validation errors.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.FileValidationResult.WarningCount">
            <summary>
            Gets the count of validation warnings.
            </summary>
        </member>
        <member name="P:ADMS.API.Common.FileValidationResult.HasWarnings">
            <summary>
            Gets a value indicating whether the validation result has any warnings.
            </summary>
        </member>
        <member name="M:ADMS.API.Common.FileValidationResult.ToString">
            <summary>
            Returns a string representation of the validation result.
            </summary>
            <returns>A string summarizing the validation result.</returns>
        </member>
        <member name="T:ADMS.API.Common.UserValidationHelper">
            <summary>
            Provides comprehensive helper methods and constants for validating user-related data within the ADMS system.
            </summary>
            <remarks>
            This static helper class provides robust user validation functionality for the ADMS legal 
            document management system, supporting all user-related DTOs including UserDto, UserMinimalDto, 
            UserForCreationDto, and UserForUpdateDto. The validation methods ensure data integrity, 
            business rule compliance, and consistent validation logic across the application.
            
            <para><strong>Key Features:</strong></para>
            <list type="bullet">
            <item>Username validation with database constraint alignment and professional naming standards</item>
            <item>GUID validation for user IDs with proper empty value checking</item>
            <item>Reserved name protection to prevent conflicts with system functionality</item>
            <item>Character format validation ensuring professional and readable usernames</item>
            <item>Normalization support for consistent storage and comparison</item>
            <item>Username suggestion algorithms for improved user experience</item>
            <item>High-performance validation using frozen collections for O(1) lookup performance</item>
            <item>Thread-safe operations optimized for concurrent access scenarios</item>
            </list>
            
            <para><strong>Username Standards:</strong></para>
            <list type="bullet">
            <item><strong>Professional Names:</strong> Support for full names with spaces and professional formatting</item>
            <item><strong>Length Requirements:</strong> 2-50 characters matching database constraints</item>
            <item><strong>Character Support:</strong> Letters, numbers, spaces, periods, hyphens, underscores</item>
            <item><strong>Format Rules:</strong> Cannot start/end with special characters, no consecutive specials</item>
            </list>
            
            <para><strong>Database Synchronization:</strong></para>
            All validation constraints are synchronized with the User entity structure:
            <list type="bullet">
            <item>Name: StringLength(50) - matches User.Name constraint</item>
            <item>Reserved names: Protected system and ADMS-specific terms</item>
            <item>Professional formatting: Supports real-world user naming conventions</item>
            </list>
            
            <para><strong>Legal Compliance:</strong></para>
            User validation enforces legal document management best practices including:
            <list type="bullet">
            <item>Audit trail integrity through consistent user identification</item>
            <item>Professional naming standards for legal document attribution</item>
            <item>System security through reserved name protection</item>
            <item>Data integrity through comprehensive validation rules</item>
            </list>
            
            <para><strong>Thread Safety:</strong></para>
            All methods in this class are thread-safe and use immutable frozen collections for optimal
            performance in concurrent scenarios without external synchronization.
            
            <para><strong>Performance Considerations:</strong></para>
            Uses FrozenSet for O(1) average lookup performance on reserved names and
            compiled regex patterns for efficient format validation. All validation operations 
            are optimized for high-frequency usage in API scenarios.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.UserValidationHelper.MaxUserNameLength">
            <summary>
            The maximum allowed length for a username.
            </summary>
            <remarks>
            This value matches the StringLength(50) constraint on the User.Name property 
            in the ADMS.API.Entities.User entity to ensure consistency between validation 
            logic and database constraints.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.UserValidationHelper.MinUserNameLength">
            <summary>
            The minimum allowed length for a username.
            </summary>
            <remarks>
            Minimum length helps prevent very short usernames that might cause
            confusion or conflict with system identifiers. Set to 2 to allow
            reasonable abbreviations while maintaining clarity.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.UserValidationHelper.MinAllowedUserDate">
            <summary>
            The earliest allowed date for user operations.
            </summary>
            <remarks>
            This date represents a reasonable lower bound for user-related dates in the ADMS system,
            preventing unrealistic historical dates that might indicate data corruption.
            Set to January 1, 1980, as a practical minimum for legal document management systems.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.UserValidationHelper.FutureDateToleranceMinutes">
            <summary>
            The tolerance in minutes for future dates in user-related operations.
            </summary>
            <remarks>
            This tolerance accounts for clock skew between client and server systems,
            allowing for small time differences while preventing actual future dates.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.UserValidationHelper.MaxUsernameSuggestions">
            <summary>
            Maximum number of username suggestions to generate for user assistance.
            </summary>
            <remarks>
            Limits the number of suggestions to prevent excessive processing while
            providing sufficient alternatives for user selection.
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.UserValidationHelper._reservedNamesArray">
            <summary>
            The list of reserved usernames that cannot be used (case-insensitive).
            These terms are protected to prevent conflicts with system functionality.
            </summary>
            <remarks>
            This list includes common system account names, administrative terms,
            and names that might cause confusion with ADMS system functionality.
            Reserved names are checked using case-insensitive comparison.
            
            <para><strong>Reserved Categories:</strong></para>
            <list type="bullet">
            <item><strong>System Accounts:</strong> admin, administrator, system, root</item>
            <item><strong>Service Accounts:</strong> service, daemon, process, worker</item>
            <item><strong>Common Roles:</strong> user, guest, anonymous, public</item>
            <item><strong>API Terms:</strong> api, rest, json, xml, http</item>
            <item><strong>ADMS Specific:</strong> adms, matter, document, revision</item>
            <item><strong>Security Terms:</strong> auth, token, session, password</item>
            <item><strong>Internet Standards:</strong> support, help, noreply, webmaster</item>
            <item><strong>Confusing Terms:</strong> null, undefined, empty, test</item>
            </list>
            
            <para><strong>Modification Guidelines:</strong></para>
            When adding reserved names:
            <list type="bullet">
            <item>Consider case-insensitive conflicts</item>
            <item>Include variations and common misspellings</item>
            <item>Focus on terms that could cause system confusion</item>
            <item>Document the reason for reservation</item>
            </list>
            </remarks>
        </member>
        <member name="F:ADMS.API.Common.UserValidationHelper._reservedNamesSet">
            <summary>
            High-performance frozen set of reserved names for O(1) lookup performance.
            </summary>
            <remarks>
            Uses FrozenSet for optimal read performance in validation scenarios.
            Case-insensitive comparison for user-friendly validation.
            </remarks>
        </member>
        <member name="P:ADMS.API.Common.UserValidationHelper.ReservedNames">
            <summary>
            Gets the read-only list of reserved usernames.
            These names cannot be used for user accounts.
            </summary>
            <remarks>
            Returns an immutable view of the reserved names for external consumption.
            This property provides thread-safe access to the reserved names list.
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.IsNameAllowed(System.String)">
            <summary>
            Determines whether the specified username is allowed according to ADMS business rules.
            </summary>
            <param name="name">The username to validate. Can be null or whitespace.</param>
            <returns>
            <c>true</c> if the name is allowed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            A valid username must meet all the following criteria:
            <list type="bullet">
            <item>Not be null or whitespace</item>
            <item>Be between {MinUserNameLength} and {MaxUserNameLength} characters long (matching database constraint)</item>
            <item>Not be a reserved system name (case-insensitive check)</item>
            <item>Contain only valid characters (letters, numbers, spaces, periods, hyphens, underscores)</item>
            <item>Not start or end with special characters (must start/end with letter or number)</item>
            <item>Not contain consecutive special characters</item>
            <item>Not contain multiple consecutive spaces</item>
            </list>
            
            <para><strong>Performance:</strong></para>
            Uses FrozenSet for O(1) average lookup performance on reserved names check.
            </remarks>
            <example>
            <code>
            bool isValid1 = UserValidationHelper.IsNameAllowed("John Doe");         // true
            bool isValid2 = UserValidationHelper.IsNameAllowed("j.smith");          // true
            bool isValid3 = UserValidationHelper.IsNameAllowed("user123");          // true
            bool isInvalid1 = UserValidationHelper.IsNameAllowed("admin");          // false (reserved)
            bool isInvalid2 = UserValidationHelper.IsNameAllowed(".john");          // false (starts with special)
            bool isInvalid3 = UserValidationHelper.IsNameAllowed("john..doe");      // false (consecutive specials)
            bool isInvalid4 = UserValidationHelper.IsNameAllowed("");               // false (empty)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.IsValidUserId(System.Guid)">
            <summary>
            Determines whether the specified user ID is valid.
            A valid user ID is a non-empty GUID.
            </summary>
            <param name="userId">The user ID to validate.</param>
            <returns>
            <c>true</c> if the user ID is not empty; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method follows the same pattern as other entity validation helpers in the ADMS system,
            ensuring consistency across validation logic.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>GUID must not be Guid.Empty</item>
            <item>GUID must represent a valid identifier structure</item>
            </list>
            </remarks>
            <example>
            <code>
            bool isValid = UserValidationHelper.IsValidUserId(Guid.NewGuid());  // true
            bool isInvalid = UserValidationHelper.IsValidUserId(Guid.Empty);    // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.IsValidUserDate(System.DateTime)">
            <summary>
            Determines whether the specified date is valid for user-related operations.
            A valid date is within reasonable bounds and not in the future.
            </summary>
            <param name="date">The date to validate.</param>
            <returns>
            <c>true</c> if the date is valid; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method follows the same validation pattern as other ADMS validation helpers,
            ensuring consistency across the validation system.
            
            <para><strong>Validation Rules:</strong></para>
            <list type="bullet">
            <item>Must be after the minimum allowed date ({MinAllowedUserDate:yyyy-MM-dd})</item>
            <item>Cannot be in the future (with {FutureDateToleranceMinutes} minute tolerance)</item>
            <item>Must not be DateTime.MinValue or other sentinel values</item>
            </list>
            
            <para><strong>Timezone Handling:</strong></para>
            The method works with any DateTime kind but normalizes to UTC for comparison.
            </remarks>
            <example>
            <code>
            bool isValid1 = UserValidationHelper.IsValidUserDate(DateTime.UtcNow);                    // true
            bool isValid2 = UserValidationHelper.IsValidUserDate(new DateTime(2020, 1, 1));          // true
            bool isInvalid1 = UserValidationHelper.IsValidUserDate(DateTime.MinValue);                // false (too early)
            bool isInvalid2 = UserValidationHelper.IsValidUserDate(DateTime.UtcNow.AddHours(1));      // false (future)
            bool isInvalid3 = UserValidationHelper.IsValidUserDate(new DateTime(1975, 1, 1));        // false (too early)
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.ValidateName(System.String,System.String)">
            <summary>
            Performs comprehensive validation of a username and returns detailed validation results.
            </summary>
            <param name="name">The username to validate. Can be null.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method performs all username validation checks in a single call:
            <list type="bullet">
            <item>Null/whitespace validation</item>
            <item>Length validation (min/max bounds)</item>
            <item>Reserved name validation</item>
            <item>Character format validation</item>
            <item>Professional naming standards validation</item>
            </list>
            
            <para><strong>Validation Order:</strong></para>
            Validations are performed in order of severity, with early termination for null values.
            </remarks>
            <example>
            <code>
            var results = UserValidationHelper.ValidateName("admin", nameof(MyDto.Name));
            if (results.Any())
            {
                foreach (var result in results)
                {
                    Console.WriteLine($"Error: {result.ErrorMessage}");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.ValidateUserId(System.Guid,System.String)">
            <summary>
            Performs comprehensive validation of a user ID.
            </summary>
            <param name="userId">The user ID to validate.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method validates that the user ID represents a valid, non-empty GUID suitable
            for use as a database identifier.
            </remarks>
            <example>
            <code>
            var results = UserValidationHelper.ValidateUserId(Guid.Empty, nameof(MyDto.UserId));
            if (results.Any())
            {
                Console.WriteLine($"User ID validation failed: {string.Join(", ", results.Select(r => r.ErrorMessage))}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.ValidateDate(System.DateTime,System.String)">
            <summary>
            Performs comprehensive validation of a user-related date.
            </summary>
            <param name="date">The date to validate.</param>
            <param name="propertyName">The name of the property being validated (for error messages). Cannot be null or whitespace.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing any validation errors found.
            Returns an empty enumerable if validation passes.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null, empty, or consists only of whitespace.</exception>
            <remarks>
            This method validates that dates are within acceptable bounds for user-related operations.
            </remarks>
            <example>
            <code>
            var results = UserValidationHelper.ValidateDate(DateTime.MinValue, nameof(MyDto.CreatedDate));
            if (results.Any())
            {
                Console.WriteLine($"Date validation failed: {string.Join(", ", results.Select(r => r.ErrorMessage))}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.NormalizeName(System.String)">
            <summary>
            Returns the normalized version of a username for consistent storage.
            </summary>
            <param name="name">The username to normalize. Can be null.</param>
            <returns>The normalized username, or <c>null</c> if input is invalid.</returns>
            <remarks>
            Normalization includes:
            <list type="bullet">
            <item>Trimming leading and trailing whitespace</item>
            <item>Collapsing multiple consecutive spaces to single spaces</item>
            <item>Preserving case for professional names</item>
            <item>Maintaining original character encoding</item>
            </list>
            
            <para><strong>Professional Name Support:</strong></para>
            Unlike some systems that force lowercase, this normalization preserves
            case to maintain professional appearance of names like "John Doe" or "Dr. Smith".
            </remarks>
            <example>
            <code>
            string? normalized1 = UserValidationHelper.NormalizeName("  John   Doe  ");  // "John Doe"
            string? normalized2 = UserValidationHelper.NormalizeName("j.smith");         // "j.smith"
            string? normalized3 = UserValidationHelper.NormalizeName("");                // null
            string? normalized4 = UserValidationHelper.NormalizeName(null);              // null
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.NormalizeDateToUtc(System.DateTime)">
            <summary>
            Normalizes a user-related date to UTC for consistent storage.
            </summary>
            <param name="date">The date to normalize.</param>
            <returns>
            The date normalized to UTC, or null if the input date is invalid.
            </returns>
            <remarks>
            This method ensures all user-related dates are stored in UTC for consistency,
            while validating the date meets basic requirements.
            </remarks>
            <example>
            <code>
            var localDate = DateTime.Now;
            DateTime? utcDate = UserValidationHelper.NormalizeDateToUtc(localDate);
            // Returns the date converted to UTC if valid
            
            DateTime? invalid = UserValidationHelper.NormalizeDateToUtc(DateTime.MinValue);
            // Returns null for invalid dates
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.AreUserNamesEquivalent(System.String,System.String)">
            <summary>
            Checks if two usernames are equivalent after normalization.
            </summary>
            <param name="userName1">The first username. Can be null.</param>
            <param name="userName2">The second username. Can be null.</param>
            <returns><c>true</c> if the usernames are equivalent; otherwise, <c>false</c>.</returns>
            <remarks>
            This method is useful for checking username uniqueness while handling
            minor formatting differences like extra spaces. Uses case-insensitive
            comparison to handle variations in capitalization.
            </remarks>
            <example>
            <code>
            bool same1 = UserValidationHelper.AreUserNamesEquivalent("John Doe", "john doe");       // true
            bool same2 = UserValidationHelper.AreUserNamesEquivalent("  John  Doe  ", "John Doe");  // true
            bool different = UserValidationHelper.AreUserNamesEquivalent("John Doe", "Jane Doe");   // false
            bool bothNull = UserValidationHelper.AreUserNamesEquivalent(null, null);                // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.SuggestAlternativeNames(System.String,System.Int32)">
            <summary>
            Suggests alternative usernames if the provided name is not allowed.
            </summary>
            <param name="attemptedName">The attempted username. Can be null.</param>
            <param name="maxSuggestions">Maximum number of suggestions to generate.</param>
            <returns>A read-only list of suggested alternative usernames.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="maxSuggestions"/> is less than 1.</exception>
            <remarks>
            This method provides user-friendly suggestions when a username is rejected
            due to validation rules or uniqueness constraints. Uses multiple strategies:
            <list type="bullet">
            <item>Cleaning invalid characters from the attempted name</item>
            <item>Adding numeric suffixes to create unique variations</item>
            <item>Shortening names that exceed length limits</item>
            <item>Providing alternative formatting suggestions</item>
            </list>
            </remarks>
            <example>
            <code>
            var suggestions = UserValidationHelper.SuggestAlternativeNames("admin", 3);
            // Returns alternatives like ["administrator1", "admin123", "user-admin"]
            
            var suggestions2 = UserValidationHelper.SuggestAlternativeNames("john..doe", 3);
            // Returns cleaned alternatives like ["john.doe", "johndoe", "john_doe"]
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.IsReservedName(System.String)">
            <summary>
            Checks if a username is reserved (case-insensitive).
            </summary>
            <param name="name">The username to check. Can be null.</param>
            <returns><c>true</c> if the username is reserved; otherwise, <c>false</c>.</returns>
            <remarks>
            This method provides a direct way to check if a username conflicts with
            reserved system names without performing full validation.
            </remarks>
            <example>
            <code>
            bool isReserved1 = UserValidationHelper.IsReservedName("admin");    // true
            bool isReserved2 = UserValidationHelper.IsReservedName("ADMIN");    // true (case insensitive)
            bool isNotReserved = UserValidationHelper.IsReservedName("johndoe"); // false
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.GetNameValidationDetails(System.String)">
            <summary>
            Gets detailed validation information about a username for diagnostic purposes.
            </summary>
            <param name="name">The username to analyze. Can be null.</param>
            <returns>
            A dictionary containing detailed validation results and diagnostic information.
            </returns>
            <remarks>
            This method provides comprehensive diagnostic information about username validation,
            useful for troubleshooting validation failures and providing detailed analysis.
            
            <para><strong>Diagnostic Information Includes:</strong></para>
            <list type="bullet">
            <item>Basic validation results (null, length, reserved)</item>
            <item>Character analysis and format validation</item>
            <item>Normalization results</item>
            <item>Professional naming assessment</item>
            </list>
            </remarks>
            <example>
            <code>
            var results = UserValidationHelper.GetNameValidationDetails("John Doe");
            foreach (var result in results)
            {
                Console.WriteLine($"{result.Key}: {result.Value}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.GetValidationStatistics">
            <summary>
            Gets validation statistics for the user validation system.
            </summary>
            <returns>
            A dictionary containing statistical information about the validation system.
            </returns>
            <remarks>
            This method provides insights into the validation system configuration,
            useful for monitoring, diagnostics, and system documentation.
            </remarks>
            <example>
            <code>
            var stats = UserValidationHelper.GetValidationStatistics();
            Console.WriteLine($"Min username length: {stats["MinUserNameLength"]}");
            Console.WriteLine($"Max username length: {stats["MaxUserNameLength"]}");
            Console.WriteLine($"Reserved names count: {stats["ReservedNamesCount"]}");
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.GenerateValidationReport(System.String)">
            <summary>
            Generates a comprehensive validation report for a username.
            </summary>
            <param name="name">The username to analyze. Can be null.</param>
            <returns>
            A formatted string containing detailed validation information.
            </returns>
            <remarks>
            This method provides a human-readable validation report useful for debugging
            and troubleshooting username validation issues.
            </remarks>
            <example>
            <code>
            string report = UserValidationHelper.GenerateValidationReport("admin");
            Console.WriteLine(report);
            // Outputs detailed validation results and suggestions
            </code>
            </example>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.IsValidNameLength(System.String)">
            <summary>
            Validates if a username length is within acceptable bounds.
            </summary>
            <param name="name">The username to validate.</param>
            <returns><c>true</c> if the length is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.IsValidUserNameFormat(System.String)">
            <summary>
            Validates username format using comprehensive rules.
            </summary>
            <param name="userName">The username to validate (must be trimmed).</param>
            <returns><c>true</c> if the format is valid; otherwise, <c>false</c>.</returns>
            <remarks>
            This method performs comprehensive format validation including:
            <list type="bullet">
            <item>Character set validation (letters, numbers, allowed specials)</item>
            <item>Start/end character validation (must be letter or number)</item>
            <item>Consecutive special character prevention</item>
            <item>Multiple space prevention</item>
            </list>
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.CleanUserName(System.String)">
            <summary>
            Cleans a username by removing or replacing invalid characters.
            </summary>
            <param name="name">The username to clean.</param>
            <returns>The cleaned username, or null if it cannot be cleaned.</returns>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.UserNameFormatRegex">
            <remarks>
            Pattern:<br/>
            <code>^[a-zA-Z0-9][a-zA-Z0-9._\\s-]*[a-zA-Z0-9]$|^[a-zA-Z0-9]$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match with 2 alternative expressions, atomically.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match a character in the set [0-9A-Za-z].<br/>
                    ○ Match a character in the set [-.0-9A-Z_a-z\s] greedily any number of times.<br/>
                    ○ Match a character in the set [0-9A-Za-z].<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match a character in the set [0-9A-Za-z].<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.UserNameCharacterRegex">
            <remarks>
            Pattern:<br/>
            <code>^[a-zA-Z0-9._\\s-]+$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [-.0-9A-Z_a-z\s] greedily at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:ADMS.API.Common.UserValidationHelper.MultipleSpacesRegex">
            <remarks>
            Pattern:<br/>
            <code>\\s+</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a whitespace character atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MultipleWhitespaceRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the MultipleWhitespaceRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.MultipleWhitespaceRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MultipleWhitespaceRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MultipleWhitespaceRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MultipleWhitespaceRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MultipleWhitespaceRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MultipleWhitespaceRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MultipleWhitespaceRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MultipleWhitespaceRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Sha256ChecksumRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Sha256ChecksumRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Sha256ChecksumRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Sha256ChecksumRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Sha256ChecksumRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Sha256ChecksumRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Sha256ChecksumRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Sha256ChecksumRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Sha256ChecksumRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Sha256ChecksumRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MimeTypeFormatRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the MimeTypeFormatRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.MimeTypeFormatRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MimeTypeFormatRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MimeTypeFormatRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MimeTypeFormatRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MimeTypeFormatRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MimeTypeFormatRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MimeTypeFormatRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MimeTypeFormatRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ExtensionFormatRegex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ExtensionFormatRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ExtensionFormatRegex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtensionFormatRegex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ExtensionFormatRegex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtensionFormatRegex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ExtensionFormatRegex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtensionFormatRegex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtensionFormatRegex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtensionFormatRegex_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UserNameFormatRegex_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the UserNameFormatRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.UserNameFormatRegex_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UserNameFormatRegex_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UserNameFormatRegex_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UserNameFormatRegex_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UserNameFormatRegex_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UserNameFormatRegex_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UserNameFormatRegex_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UserNameFormatRegex_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UserNameCharacterRegex_5">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the UserNameCharacterRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.UserNameCharacterRegex_5.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UserNameCharacterRegex_5.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UserNameCharacterRegex_5.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UserNameCharacterRegex_5.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UserNameCharacterRegex_5.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UserNameCharacterRegex_5.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UserNameCharacterRegex_5.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UserNameCharacterRegex_5.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiHexDigits">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFabcdef".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiLettersAndDigits">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_whitespace">
            <summary>Supports searching for characters in or not in "\t\n\v\f\r \u0085             \u2028\u2029  　".</summary>
        </member>
    </members>
</doc>
